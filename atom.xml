<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ygoto3.com</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ygoto3.com/"/>
  <updated>2019-02-13T03:11:50.332Z</updated>
  <id>https://ygoto3.com/</id>
  
  <author>
    <name>Yusuke Goto</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Story-Assured Design - 未来の改善スピードのためのデザインワークフロー</title>
    <link href="https://ygoto3.com/posts/story-assured-design/"/>
    <id>https://ygoto3.com/posts/story-assured-design/</id>
    <published>2019-02-13T10:08:30.000Z</published>
    <updated>2019-02-13T03:11:50.332Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/story-assured-design/story-assured-design_hero-image.png" alt="Story-Assured Design のヒーローイメージ"></p><p>現在開発担当している <a href="https://abema.tv/" target="_blank" rel="external">AbemaTV</a> で、昨年末にパナソニックさんのスマートテレビ VIERA 向けにアプリケーションをリリースしました。AbemaTV リモコンボタンで AbemaTV にアクセスできます。今回このアプリケーションの UI を開発するにあたって、新しいデザインワークフローを導入しました。</p><p>本記事では、 <strong>Story-Assured Design</strong> というデザインワークフローを、現在プロダクト開発で直面しているデザインの課題とともに紹介します。</p><h2>Story-Assured Design とは？</h2><p>Story-Assured Design はその名前が示しているように、ユーザーストーリーを保証することを目的とした UI デザインのワークフローです。UI デザインを３つのステップに分けて行います。</p><ol><li>ストーリーデザイン</li><li>デザインの構造化</li><li>視覚情報デザイン</li></ol><p>一番重要なユーザーストーリーのデザインから始めて、それを保証するようにフローを進めていきます。大袈裟な名前が付いていますが、奇抜なことをやっているわけではなく、デザインする上でやった方が良いことを明示的なデザイン工程として分割しているだけです。しかし、分割することによって規模が大きくなってきたサービスが抱えがちなデザインに関する問題にアプローチすることができます。逆に言えば、規模が小さく収まるサービスやプロダクトを作り上げるだけであれば、目的に対して複雑な手順を取り過ぎるかもしれません。</p><p>今回このワークフローで１つのプロダクトの初期リリースを終えてみて、兼ねてから課題に思っていたことが解決できたので、それを共有したいと思います。</p><p>デザインに関する話を書いていますが、このプロジェクトでの私の役回りはテックリードで、プロダクトのオーナーシップを持ったエンジニアとして開発の進行、エンジニアリング、デザイン、ビジネスとの調整を行ううちに得た副産物になります。</p><h2>このデザインワークフローで解決したかった課題</h2><p>Story-Assured Design の実践方法の説明に入る前に、まずこのデザインワークフローで解決しようとした課題と導入の経緯について触れたいと思います。</p><p>従来のデザインのやり方でもアプリケーションを作ることはできますが、将来的にデザインを改善し続けることを考えると下記４点のことが課題でした。</p><ol><li>デザインを定量・定性的に評価することが難しい</li><li>デザイン作業を分担することが難しい</li><li>未完成のデザインに対して早期からユーザビリティテストすることが難しい</li><li>デザインの負債によりいづれ改善速度低下してしまう</li></ol><p>逆にこれら４つの課題が解決できれば、組織が大きくなっても、プロダクトの年齢が上がっても、自分たちの力でデザインを１歩ずつ確実に前に進化させることができるのではないかと思います。そして、この課題解決をデザイナーやチームのメンバーの力量に左右されることなく、仕組みによって大部分を解決できればと思い、ワークフロー化しました。</p><h2>課題１：デザインを定量・定性的に評価したい</h2><p>プロダクトが飯の種になっている以上、どんなデザインが良くて、どんなデザインが悪いのか、アプリケーションの開発に携わる人なら誰でも多かれ少なかれ関心があるテーマだと思います。目的や文脈が異なればデザインの善し悪しもそれに応じて変わりますが、それでもデザイン１つで売り上げが変わったり、ユーザーの使用頻度に影響が出てしまったり、プロダクトの寿命が左右されてしまうことを思うと、自分たちのプロダクトのデザインが間違いなく良い方向に進んでいることを確信したいと思っています。</p><p>しかし、デザインを評価することは難しいです。誰もが目で見て触る部分なので、簡単に意見できたりしますが、１ユーザーとしての意見を言うことはできても、プロダクトもしくはサービスにとっての正解は誰も知らないことがほとんどです。それに比べるとエンジニアリングは評価しやすいと感じます。ソフトウェアエンジニアリングであれば、実際の処理時間やパフォーマンスを計測して評価したり、コードの設計が拡張しやすくなっているかを評価したり、など多少の好みや比重の置き方に違いはあっても、何となくみんなが共通で考えている正解が存在します。</p><h3>デザインの「良い」を定義したい</h3><p>デザインにもみんなが共通で考えることができる正解が存在すればいいなあ、とかねてから思っていました。そうすれば良いデザインをちゃんと評価できます。</p><p>デザインコンサルタントの<a href="https://twitter.com/yhassy" target="_blank" rel="external">長谷川恭久</a>氏のブログ記事「<a href="https://yasuhisa.com/could/article/start-with-principles/" target="_blank" rel="external">デザインシステムの最初の一歩として原則を作る理由</a>」で「自分たちにとっての良いって何だっけ？」を考えることについて触れられています。この記事の中で</p><blockquote><p>お互いが考える『良い』をぶつけ合う</p></blockquote><p>という一文がありますが、デザインをみんなで考えたり、振り返ったり、評価しようとすると、まさに「お互いが考える『良い』をぶつけ合う」状態になりがちだなと思います。</p><p>Story-Assured Design では３つのステップに分けて UI デザインを進めますが、１つ１つのステップにおいてチームで共有する『良い』が定義されます。これにより、少なくとも「お互いが考える『良い』をぶつけ合う」状態は避けることができました。</p><h2>課題２：デザイン作業を分担したい</h2><p>何人かのデザイナーと一緒に仕事していると、当然のことですが、デザイナーにもいろいろなタイプの人がいることが分かります。あるデザイナーはグラフィックが得意だったり、情報整理が得意だったり、サービスのブランディングが得意だったり、アイデアの引き出しが多かったり、分析が得意だったり、いろいろな人がいます。でも、デザインの仕事にはこういったこと全てが求められます。</p><h3>デザインの不得意領域の負荷分散</h3><p>どのプロジェクトでもアサインされるデザイナーの数は多いわけではないので、場合によっては担当デザイナーが不得意な領域でもデザイン作業としてお願いしなければならない場合があります。今までさまざまなチームでアプリケーションを開発してきましたが、どのチームでもデザイン作業はデザイナーがやるものでした。でも、明らかに情報整理が苦手なデザイナーは、ブレインストーミングで好き勝手に出たアイデアを整理する作業に苦しみますし、やっぱり何度もやり直しを繰り返すことになります。こういうとても非効率に感じる場面もたくさんありました。</p><p>そういうとき、苦手な領域のデザイン作業をデザイナー以外でも担当できたり、時にはチーム全員の知恵を借りてデザインに関する課題を解決できたらいいのに、と思います。そこで、Story-Assured Design では、デザイン作業のステップを分割することで分担しやすくします。</p><h2>課題３：早期からユーザビリティを検証したい</h2><p>私が経験してきたプロジェクトでは、ユーザビリティの本格的な検証は開発終盤に行われることが多かったです。デザインがある程度プロダクトに実装されてからでないとテストしづらかったからです。早期にユーザビリティを検証する方法としては、ペーパープロトタイピングなど方法はあるのですが、やはり実機で早期に検証できる方が確実です。最近だと、ペーパープロトタイピング自体がしづらい特性のプロダクトもあります。</p><p>また、開発経験がない分野だと、ある程度のベストプラクティスさえもイメージできないので、実機で確認するまで気付かないデザインの落とし穴もあります。</p><h3>新分野のアプリケーション開発は難しい</h3><p>現在私は未着手のデバイスを開拓することをミッションに持った開発をやっています。未着手なので、当然その領域の知見はほとんどない案件ばかりです。未着手といっても、世の中的に未着手というわけではなく、あくまでも自分たちにとって未着手なので、もちろん調べれば知見に巡り合えることもあります。ただ、経験値がない状態では知見の適用するにも見様見真似感が否めません。基本的に経験がない分野でのプロダクトデザインは難易度が高いと感じます。</p><p>本記事のプロジェクト以前に、今年始めに <a href="https://play.google.com/store/apps/details?id=tv.abema.vr" target="_blank" rel="external">AbemaTV VR</a> という AbemaTV の Google Daydream 版アプリの開発を担当しました。そのプロジェクトでは私はテクニカルディレクターという立ち位置でしたが、開発を進める中で、同じアプリケーションでもスマホや PC アプリと同じ感覚でデザインしていては全く使いやすくなっていかないことを痛感しました。このあたりの奮闘は当時の担当デザイナーの<a href="https://www.mdn.co.jp/di/contents/4333/58167/" target="_blank" rel="external">解説記事</a>にもあります。</p><p>AbemaTV VR の開発では結果的にリリース日を少し延期して UI デザインの品質を上げるという決断に至りました。知見がない新しい分野の開発にも関わらず、私たちは技術的な課題ばかりに目がいき、完全に UI や体験に関するデザインをなめていたために発生した失敗でした。</p><p>過去の一見似ている経験を過信したことを反省しました。普通に考えれば、自分たちはスマホと PC 向けのアプリケーションのデザイン経験しかないのだから、それ以外のデバイス向けにプロダクトを開発するときは初心にかえってデザインするのが正しい姿です。開発の早いタイミングからプロダクトを触り始められるデザインワークフローにしてデザインの問題点を早々に発見することが大事だと痛感しました。</p><h3>新分野ではデザイナーもデザイン未経験</h3><p>この VR プロジェクトでは、新規分野ではデザイナーもデザイン未経験だということを忘れてはいけない、ということも痛感しています。開発初期はちゃんとしたデザイナーにデザインを任せれば、デザインはなんとかなるだろうと思ってしまっていました。</p><p>VR のプロジェクトでは、このデザイナーはさまざまな試行錯誤を繰り返し、最後まで諦めずに UI の品質を追い求めました。最終的に良い品質のものができることに何の疑問もありませんでしたが、そんな彼でも身近な人物にユーザーテストをしてその反応を見るまでは VR 特有の穴に気づくことは難しいものでした。</p><p>VR 上の UI 要素は画面内に入っていてもユーザーが気付かないことがあります。VR の場合は焦点が合っている対象物の臨場感が大きいため、それ以外の要素の存在感が雑音になりやすいのです。</p><p>そのため、たとえばサイドメニューのような普段は使わないため閉じておきたい要素をユーザーに開かせる場合、画面の端っこの方に開くボタンを配置しても想定以上にユーザーが気付かないことに後になって気付きます。スマホアプリの場合だと画面右上端にハンバーガーメニューがあれば、気付いてもらえると思います。その感覚からすると、何となく VR 画面でもデザインカンプ段階だと良いデザインに思えてしまいます。（しかし、実際に実機で見ると全然気付かないのです。）</p><h3>リアルな感触による早期デザイン改善</h3><p>それらの経験を踏まえて、新規分野の場合は特にデザインに対してしっかりと早めに説得力があるフィードバックを得られることが大事だと実感しました。プロダクトのリリース前であれば、一番説得力があるフィードバックは、やはりデザインに対する自分たちの直接的な感触です。</p><h3>検証しやすいデザイン要素を分離する</h3><p>そこでユーザビリティに関わる要素の中でも検証しやすい部分だけ分離してデザインし、先に実装することで、プロダクト開発の流れの中であまり寄り道することなくプロトタイプを作ることができます。そして、プロトタイプとして自分たちで触り検証しながらそのまま改善していくとプロダクトに昇華できるので、開発におけるプロトタイプ開発工数が最小にすることができます。</p><p>Story-Assured Design ではユーザーストーリーを構成する UI 要素を先にデザインすることで、ストーリーを開発フェーズの早期から検証しながら、そのままシームレスにプロダクトへと昇華していきます。</p><h2>課題４：デザインの負債による改善速度低下を防ぎたい</h2><p>解決したい課題の最後になりますが、「デザインの負債による改善速度低下を防ぎたい」、個人的にデザインフローを変えた一番の理由はこれでした。</p><h3>サービス開局３年が経過して感じていること</h3><p>現在私が担当している AbemaTV というサービスは開局３年が経とうとしています。サイバーエージェントに入社してから、どちらかというと新規プロジェクトの立ち上げを多く担当してきたので、リリース後に３年も同じサービスの運用開発していること自体が初めての体験です。以前は正直３年も同じサービスを担当していたら飽きそうだなと思ってましたが、意外なことに飽きていません。新規開発では経験しなかった２種類の課題に挑戦できるからだと思います。</p><p>１つ目はサービス自体が成長し続けていることで生まれた課題に挑戦できる点です。私個人の話でいうと、サービスリリース当初は <a href="https://abema.tv/" target="_blank" rel="external">AbemaTV Web 版</a> を立ち上げていましたが、組織的な動画技術力進化が課題になり、半年渡米して動画技術研究し、帰国後は未着手デバイス開拓と動画再生技術のエンジニアリングに軸足を置いて技術的な挑戦を続けられています。ほかにも動画技術エバンジェリスト<a href="https://developers.cyberagent.co.jp/blog/archives/17579/" target="_blank" rel="external">※1</a> <a href="https://www.slideshare.net/abemadev/abematv-abematv-devcon-2018-tracka-final-session" target="_blank" rel="external">※2</a> のような立場で変則的なアプローチでの技術的な挑戦ができるのも、サービスが成長し続けているおかげだと思います。</p><p>２つ目は長く運用開発しなければ直面できなかったと思える課題に挑戦できているからだと思っています。そんな課題の１つに「 <strong>デザインの負債</strong> 」という概念があります。私自身は、新規プロジェクトの立ち上げをメインにやっているときは、ほとんど意識しなかった概念です。というのも、デザインの負債は変更し続けることを前提としたプロダクトのデザインでしか生まれない概念だからです。</p><h3>デザインの負債</h3><p>開発に携っている人なら「負債」という言葉を普段から耳にすると思います。私もエンジニアなので負債といえば「技術的負債」という言葉が真っ先に頭に浮かびます。技術的負債といえば、いきあたりばったりのソフトウェアアーキテクチャによって既存コードに対する機能追加や変更のコストが高くなることを指しますが、「デザインの負債」は簡単に言えば、そのデザイン版です。いきあたりばったりのデザイン改修の繰り返しによって将来的なデザイン変更がしづらくなっていくことを指します。</p><p>私がデザインの負債を明確に意識し始めたのは Google のプロダクトデザイナーである <a href="https://twitter.com/ustinKnight" target="_blank" rel="external">Austin Knight</a> 氏の『 <a href="https://austinknight.com/writing/design-debt/" target="_blank" rel="external">Design Debt</a> 』という記事を読んでからでした。この記事で、デザインの負債とは、新しいユーザー体験のためのデザインが既存デザインに統合できなくなってしまう状態のことだと言っています。</p><p>負債を持つことは誰しも好まざるところですが、良いデザインを生むためには直感ドリブンとデータドリブン両方のデザイン手法が必要です。直感ドリブンだけでは目の前のコンテキストや人の瞬間の感覚に左右されすぎますし、データ・ドリブンだけでは現状に対する改善はできても、まだ現実に存在していないものはデザインできません。両方をうまく組み合わせてデザインする必要がありますが、一見相反する性質の２つを組み合わせるので、どうしてもデザイン的には矛盾がある瞬間が生じてしています。</p><p>このような矛盾は明らかに「デザインの負債」と呼べるものですが、負債は返済するものなので、放っておいて大きくなる前に返済するようにする必要があります。Austin 氏は小さなループで負債を生んで、大きなループで負債を返済するといいよ、とも言っています。</p><h3>デザインの負債に気づきたい</h3><p>それで当然ながら、AbemaTV もデザインの改修を繰り返しているので、いろんなデザインの負債があります。小さなループで負債を生んで、大きなループで返済するといっても、返済するためには負債に明確に気づく必要があります。</p><h3>デザインの負債要因１「複数の平行プロジェクト」</h3><p>サービスの成長速度を加速するためには、複数のプロジェクトが平行して走る必要があります。プロジェクトはそれぞれ自分たちが達成すべきゴールを持っているので、デザインの最適解もそれに応じて変わります。デザインは目に見えて触れることができるという特性上、ゴールが異なるプロジェクトからは矛盾するフィードバックをもらうこともあります。あるプロジェクトからは良いと言われたデザインが別のプロジェクトからは悪いと評価されたりです。全て折り合いをつけようとすればデザイン上に何かしら無理が生じ、それが後でデザインの負債としてのしかかります。また、デザイナー自身が特定のプロジェクトにコミットする体制を取っている場合は、プロジェクトの文脈に最適化されたデザインになってしまうリスクもあります。</p><p>どのプロジェクトも一番目立つところに自分のプロジェクトの数字を上げるための導線を配置したいと思うでしょうし、全部のプロジェクトの導線を目立つところに置けばレイアウトの優先順位は崩壊し、ユーザー体験を激しく損ねるでしょう。たとえプロジェクトに優先度が付いていたとしても、既存のデザインはそのために作られたわけではないので、その優先度を表現できるように変更されるためには大きな工数がかかります。さらに悪いことには、複数のプロジェクトが平行して走っているときは大抵の場合、全てのプロジェクトの優先度が「S :最高」だったりします。</p><p>それでもプロダクトの数が１つであれば良いですが、インターネット上でサービスを展開するのであれば、iOS、Android、Web などメジャーどころの複数の媒体にプロダクトを展開していることが一般的です。スモールスタートで Android だけ先にリリースしていたり、ある技術のエンジニアが他方に比べて不足している場合など、さまざまな理由でプロダクトごとに成熟度が違う場合は先行して特定のプロダクトにだけプロジェクトが走ったりすることもあります。すると、プロジェクトを実現するためのデザインがそのプロダクトに最適化されてしまい、追いかけてリリースするプロダクトにデザインが適用できなかったり、適用しても不自然さが残り負債になるでしょう。</p><p>複数のプロダクトに複数のプロジェクトが走っている状況では、いわゆるリードデザイナーが人力で全てのデザインを見て品質を担保することは不可能です。組織体制の変更やワークフローの工夫など仕組みとしての解決が必要になります。</p><h3>デザインの負債要因２「短納期」</h3><p>複数の平行プロジェクトが走っているということは、１つ１つのプロジェクトのデザインにかけられる絶対的な時間が少なくなるということです。デザインは開発の最初のプロセスなので今後の開発に大きく影響するような決断を迫られることが多いと思いますが、ここに時間がかけられないということはプロジェクトとプロダクトの品質に関わる判断をミスるリスクが大きくなるということです。</p><p>｢あのときもう少し時間をかけて考えていれば。。｣と思うことは誰しもあることだと思います。とはいえ、時間をかけることが許されない状況は変わりません。そもそもデザインは決断の連続なので、プロジェクトの度に考えて判断していてはどれだけ時間があっても足りなくなります。プロジェクトの度に考えなくてもいいように、明文化された判断基準が共有されていると、何を考慮しなくてもいけなくて何は考慮しなくてもいいのか迷うポイントが減り、判断をミスるリスクも小さくなります。</p><h3>デザインの負債要因３「積み重ねられたコンテキスト」</h3><p>デザインは複数の問題を解決する仕事です。改善を積み重ねていると、目の前にある課題のコンテキストに左右されすぎて、解決しようとしているもの以外の問題が見えなくなってしまうことがあります。</p><p>特に好ましくないのが、１つの問題の解決した副作用でこれまで解決してきた問題が再発することです。長くプロダクトを改善していると、１つの画面デザインはさまざまな問題を解決した後の絶妙なバランスで構成されています。プロダクトの年齢が高くなればなる程デザインの難易度が上がっていきます。長く担当しているデザイナーでも大昔に解決した問題を忘れてしまうこともあるので、新しくジョインしたデザイナーにこの何層にも積み重ねられたコンテキストを読み解くことを期待することは無謀なことです。</p><p><img src="/images/story-assured-design/accumulation_of_contextual-layers.png" alt="積み重ねられたデザイン改善のコンテキスト"></p><p>たとえば、上図のようなあるグローバルナビゲーションのデザイン改善の履歴では、「サービスのメイン機能を目立たせたい」、「推したい機能をよりアクセスしやすい距離に配置したい」、「文字文字しい見た目をスッキリさせたい」、「アイテムを優先度によるグルーピングをしたい」、「配置のバランスを整えたい」などの課題が発見され、その都度コンテキストが積み重ねられています。しかし、このコンテキストは Slack 上で展開された議論を遡ってみれば分かるのですが、Sketch のデザインデータ上から読み取ることは困難です。積み重ねたコンテキストを忘れてデザインに修正を加えた場合、解決された問題が再発する可能性もあります。</p><p>改善の繰り返しによってコンテキストが積み重なったとしても、今までデザインが解決しようとした問題を振り返ることができるようになっていれば、目の前の改善案によって過去に解決した特定の問題がデグレーションを引き起していないかを確認することができます。</p><h3>デザインの負債要因４「ここでしか使っていないパターンの導入」</h3><p>デザインはパターンが統一されている方がユーザーにとっては使い方に迷うことが少なくなります。しかし、あるデザインパターンを導入するとき、特定の条件の画面だとそのデザインが破綻してしまうリスクがあるときあります。</p><p>そんなとき「今このデザインはここでしか使ってないから大丈夫」と導入すると、近い将来高い確率で負債になります。導入のタイミングでは、破綻したときにデザインを見直すことにして一旦これでいこうと思ってしまうことも多いですが、その後の改善でそのデザインの上にもいくつもコンテキストが積み重ねられていきます。そうなるとそのデザイン修正は積み重ねられた複数の問題を一気に解決しないとデグレーションになってしまう難易度が高いものになります。多くの場合は「ここのデザインを修正するのはデメリットが多すぎるからやめよう」ということになります。その場所のデザインを修正できんなくても、解決しなければならない問題は残り続けるので、別のアプローチでのデザイン修正で解決を試みるのですが、よほど筋が良いアプローチでないと無理が生じて更にデザインの負債が積み上がることも少なくありません。</p><p>この場合の「ここでしか使っていないデザイン」は「ここでしか使えないデザイン」なので、その時点でも負債です。少なくともその場の人間がパッと思い付くような条件で破綻するようなデザインは、将来的にも導入される場所になる可能性が高いので導入は避けるべきだと思います。</p><p>大抵の場合、１つの問題を解決する手段はいくつもあります。しかし、コンテキストが重なっていくとさまざまな制限により取れる手段が少なくなっていきます。長くサービスを運用するのであれば、同じ問題を解決するにしても選択肢ができるだけ減らないような手段を選ぶ必要があります。それができるのは選択肢が多いうちだけです。</p><h3>デザインの負債要因５「暗黙の知見化」</h3><p>運用期間が長くなると開発メンバーも入れ替わります。私も AbemaTV 立ち上げ時にいた開発チームにはもういませんし、ほかのエンジニアやデザイナーも入れ替わっています。入れ替わってもチームに同じ職種のメンバーが複数いる場合は、順々に入れ替わるので、仮に明文化されていない知見が存在しても、一緒に開発している間に受け継がれたりします。</p><p>最近のプロダクト開発ではエンジニアは複数人開発していることが多く、総入れ替えは発生しづらかったので、これにより知見の暗黙化が防がれて助かっている部分がありました。それに対して、デザイナーの方が人数が少なく、基本的に１プロダクト１デザイナーになりがちでした。必然的にデザイナー総入れ替えパターンは発生しやすくなっていました。</p><p>そうすると、前のデザイナーの意図が正しく受け継がれないことも多く発生します。「このデザイン、何でこうなってるんだっけ？」と一番長くいるデザイナーに尋ねることも多いです。尋ねる分にはまだいいですが、「既存のデザインがそうなっていたので合わせました」と意図が理解されないままデザインが継承されることもあります。もし元々のデザインの意図が適さないものだったら、継承先のデザインはどこかのタイミングで思わぬ形で矛盾を露呈することになります。</p><h3>デザインの負債要因６「統一されていないデザインデータ構造」</h3><p>デザインはデータで管理されることが多いと思います。AbemaTV も Sketch のデータとして管理しています。データは使いやすくするために用途に応じて整理されると思いますが、チームで整理方法の基準が決まっていなければ、整理した人によってデータの構造はバラバラになるでしょう。AbemaTV も初期は作業速度重視でプロダクトことで担当デザイナーが決まっていたので、プロダクトごとにデザインデータの構造はバラバラです。</p><p>プロダクトごとにデザイナーが固定の場合はこの場合でも最速だと思いますが、デザイナーが変われば効率は一気に落ちるリスクがあります。サービスのフェーズが変わると、プロジェクトごとに最高の成果にコミットできる組織構造にするためにプロジェクトごとにデザイナーをアサインするように変更したくなる場合もあります。しかし、プロダクト間でデザインデータの構造が統一されていなければ作業効率が下がるため、組織構造にチームがついていけなくなります。</p><h3>デザインの負債要因７「デザインの評価ができない」</h3><p>デザインをリリースした後そのデザインの評価ができないこともデザインの負債の要因です。新しいデザインに対するユーザーからのフィードバックをリリースした後すぐにもらえるのは稀だと思います。大体の場合はフィードバックは遅れて開発者に届くものです。でもそうすると、リリースしたデザインが良いのか悪いのか分からない状態で次の開発に進むことになります。</p><p>遅れてフィードバックをもらえたとしても、矛盾するフィードバックやターゲットユーザーではない人からのフィードバックもあったりします。フィードバックを鵜呑みにしてもプロダクトデザインが改善されるとは限りません。</p><p>こういった状況でデザインの変更を積み重ねていくと、時間差で届いたフィードバックを効率的に取り入れることができなかったり、取り入れるべきでないフィードバックを間違って入れてしまう可能性があります。そうなればデザインの負債です。</p><p>ユーザーの直接的なフィードバック以外にも、Google Analytics などの解析ツールを使うことでファクト（事実）として自分たちのデザインを評価することはできます。しかも、ファクトはリリース後すぐに数字などの変化により収集することができます。ただし、ファクトが収集できるのは、ファクトが収集できるように考慮されたデザインのみです。解析することを何も考慮されていないデザインから正しいファクトを取り出すのはものすごく難しいです。</p><p>積極的に直接的なフィードバックを取得する方法としては「ユーザーテスト」などの手段もあります。しかし、ユーザーテストは解析などにより収集されたファクトがある前提で、そのファクトになっている理由を調査する方法であって、ファクト自体を収集する方法としては適していません。</p><p>「A/B テスト」などの手段でデザインを定量的に評価することもできますが、これもテスト対象のデザインがきちんと分離されていないと、正しい結果を導くことは困難です。</p><p>カリスマ的なデザイナーが全てのデザインを評価する、ということもできます。しかし、これはスケールしないので破綻も時間の問題です。</p><p>デザインを評価するためには、評価できるようにデザインすることが必要になります。エンジニアがテスタブルなコードを書くようにするのと同じです。</p><h3>デザインの負債要因８「デザイン改善の優先度が測れない」</h3><p>前述の「デザインの評価ができない」に似ていますが、デザイン改善の優先度が測れないためにデザインの改善速度が下がることがあります。リリース後もプロダクトは改善のために更新され続けますが、デザイン改善以外にもプロダクトの改善要素はたくさんあります。事業インパクトが大きい追加機能やプロモーションイベント、実装やメンテナンス効率を上げるためのリファクタリングやパフォーマンスチューニング、さまざまな種類の改善タスクがある中でデザイン改善に関するタスクが優先度でほかのタスクに負けて改善速度が下がってしまうのです。</p><p>事業インパクトが大きいことが分かっている追加機能やプロモーションイベントは優先度の高さが分かりやすいですが、リファクタリングやデザイン改善といった一見効果が目に見えずらい改善タスクは気にしている本人たち以外にはその優先度が理解できません。コードのリファクタリングなどはエンジニアが気にしていることなのでエンジニア自身が作業の合間を見て実施したりもしますが、デザイン改善はデザイナーが気にしていてもエンジニアが実装しなければプロダクトに反映されません。デザイン改善の優先度が気になっている本人以外にその優先度を伝えることができなければ、ほかのタスクの優先度に永遠に勝てなくなることもあります。</p><p>デザインの評価ができていれば、デザイン改善の優先度は高くなるかもしれません。しかし、既に評価が高いことが分かっていたら、逆に「これ以上改善することもない」と思われてしまうかもしれません。デザイン改善の優先度を伝えるには、改善の重要度が伝わるようにしなければいけません。</p><h2>課題を解決するためのデザインフロー</h2><p>これらのデザイン課題を解決するために Story-Assured Design では下記６つのことを行っています。</p><ol><li>定量評価するためにデザインに KPI を設定する</li><li>デザイン作業を分担できるように作業工程を分割する</li><li>事業利益とユーザー満足度各々に対するデザインを評価する工程を入れる</li><li>早期にユーザーテストできるようにモック開発までのデザイン工程を明確に分割する</li><li>デザインの負債を意識するためにユーザー・ストーリーを保証するデザイン工程を入れる</li><li>デザイン改善の優先度が伝わるように「Why? How? What?」の順で成果物を作る</li></ol><h2>デザインに KPI を設定する</h2><p>今回のプロジェクトで幸運だったのは、プロジェクト開始時に「 <strong>とにかくリモコンでボタンを押す回数を少なくしてほしい</strong> 」と明確に要望されたことでした。</p><p>皆さんもテレビを使ったことがあると思うのでイメージしてもらえると思いますが、多くのテレビのリモコンにはタッチパッドのようなインターフェースはないので、十字キーを押して操作します。画面上に見えていても端の方にある番組を選択するためには何度も同じ方向の十字キーを押すことになります。</p><p>ユーザーが少ないリモコン・ボタン操作で自分がやりたいことができるなら、それだけでもかなり使いやすい UI と言えるはずです。そこで、「プロダクトを使いやすいものにする」という KGI（Key Goal Indicator）に対して、「リモコンでボタンを押す回数」という KPI（Key Performance Indicator）を設定し、｢リモコンでボタンを押す回数を各画面３回以内｣になるように目指しました。</p><p>KPI を設定したことにより、チームの誰もが同じ目線でデザインを評価できるようになりました。</p><h2>作業工程を分割する</h2><p>デザイン作業の種類に得意・不得意がある場合でも作業自体を分担できるように、Story-Assured Design ではデザインの作業工程を分割します。冒頭に述べた通り３ステップに分割しました。</p><p>アプリケーションのデザイン作業は、ユーザーに意図した動作をしてもらいやすいストーリーを考え、そのストーリーを画面における情報要素の配置（レイアウト）を考え、魅力的な見た目を作り上げることをしなくてはいけません。しかし、そのうち、グラフィック能力に長けていないと作業できないのは、最後の魅力的な見た目を作り上げる工程で、そのほかの工程は意外とデザイナー以外も作業に参加できます。ただ、これらの一連の作業をデザインカンプの上で、一人のデザイナーが一気にやってしまうとチームのほかのメンバーが参加するのが難しくなってしまいます。</p><p>今回のプロジェクトでは、それぞれのデザイン工程でチーム全員でデザインを考え、レビューをし、時には作業自体をデザイナー以外にも分担しました。特にユーザーストーリーをデザインする作業はディレクターの方が得意なことも多く、その部分はデザイナーとディレクターが分担してデザイン作業しました。</p><h3>デザイン作業の細分化によりチーム全体のデザインへの理解度が上がる</h3><p>作業工程を分割して細分化したことにより、副産物としてデザインに対するチームの理解度が上がりました。後述しますが、作業工程自体が「Why? How? What?」の順で成果物を作るように分割されています。これによりなぜこのデザインの変更が重要なのかがチームメンバー全員に伝わりやすくなる効果もあります。</p><h2>事業利益に貢献するデザインとユーザー満足度に貢献するデザインを各々評価する</h2><p>従来のデザインワークフローでは、事業利益を上げるためのデザインとユーザー満足度を上げるためのデザインを一緒にレビューしていました。しかし、この形式だとレビュースコープが広すぎるため、レビューワーによって見ることができる問題に差ができてしまいます。レビューワーによってはユーザー体験に関わる問題は指摘できるけど、事業利益に関わる問題を指摘できない、などです。議論に発展しても収拾がつかないことも多く、最終的に決裁権を持つ人や声が大きな人の好みで方向性が決定してしまうリスクもあるでしょう。</p><p>当然ですが、どれだけユーザー満足度が高くても事業利益が上がらなければ、サービスは潰れます。逆にどれだけ短期の事業利益が上がっていてもユーザーが満足していないサービスはいづれユーザーが離れていくので、やはりサービスは潰れます。この両者を高い品質で成立させるようにデザインすることは難しいですが、サービスが大きく成長しながら長く生き残るためには必須です。</p><p>そこで Story-Assured Design では初期工程ではより事業利益に関わる要素にできるだけスコープを絞りデザインを評価し、後の工程でユーザー満足度に関わる要素に絞ってデザインを評価します。</p><h2>モック実装に必要なデザイン工程を分離する</h2><p>アジャイル開発の基本は「不確実性を取り除くこと」です。どんなに初期にデザインレビューをしても、考えたデザインは人の頭の中でシミュレーションされているだけなので多分に不確実性を含んでいます。しかし、実機でデザインに触れることができるようになると、不確実な要素は一気に具体的な体験として解消されます。それとともに具体的な課題も明らかになります。</p><p>不確実性をできる限り取り除くために、開発の早い段階からユーザビリティテストで評価できるようにモック実装に必要な要素から集中してデザインします。これによりプロダクトが完成に近い形になるかなり前から致命的なデザインの不具合を発見し、リリース前でも確実なデザインの改善を進めることができます。</p><h3>ユーザー満足度を上げるモックドリブンデザイン</h3><p>デザインにおいて特に不確実性が高いのは、ユーザー満足度に関わる要素だと思います。デザインされた細かな要素がユーザーの最終的な満足度を向上させます。理想を言えば、実装したデザインをさまざまなユースケースでテストしてからリリースしたいところですが、現実的には時間にも限りがあります。</p><p>Story-Assured Design では、事業利益に関わるベースデザインを作成した後は、モック実装しながらユーザー満足度を向上させるデザインを平行して進めます。これにより限られた時間内でできる限り不確実性を取り除いたデザインを実現します。</p><h2>ユーザーストーリーを保証するデザイン工程を入れる</h2><p>モックを作って、ユーザビリティを徐々にテストできるフェーズになると、具体的な改善案が出るようになります。このフェーズでは細かい改善案が多く出ます。細かいデザイン修正によってプロダクトのデザインはより洗練されていきます。</p><p>しかし、これら細かいデザイン修正は先述した直感的な改善案であったり、コンテキストに強く依存した改善案であることも多いため、目の前の気持ち悪さを改善した結果、最初にデザインしたユーザーストーリーに影響を与えてしまう場合もあります。更に悪いことに、この変更をテストするときは出した改善案が適用されていることをテストしがちなので、既存のユーザーストーリーがデグレードしてることに気付かないことも多いです。</p><p>「木を見て森を見ない」状態にならないように、変更が既存のデザイン構造に影響を与えていないかをテストする仕組みがあれば、デグレードは防ぐことができます。Story-Assured Design ではこの仕組みのためのデザイン工程があります。</p><h2>デザインの成果物を「Why? How? What?」の順で作る</h2><p>デザインは、考案され、実装され、リリースされたら初めてユーザーに届きます。これらの作業は１人では完結しません。複数の人の手を介することになります。あるデザインを考えたデザイナーはそのデザインの重要性を肌で感じていると思いますが、リリースまでに携わる人がその重要性が理解できるとは限りません。</p><p>ある機能をユーザーに届けるために全くデザインされていない状態ではリリースすることができないため、デザインの優先度は絶対的なものです。しかし、一度ある程度のデザインが実装されたりリリースされている場合は、改善するためのデザインの優先度はその重要度が考案者以外にも理解されていなければ下がります。そのため、ワークフローの途中で考案者が意図しない形で優先度が下げられてしまうリスクもあります。</p><p>デザイン改善の優先度を伝えやすく、リリースまでに携わるより多くの人を巻き込めるようなデザインワークフローであれば、そのリスクを下げることに貢献します。後述しますが、「Why? How? What?」の形式に沿って途中経過の成果物を残すことでデザイン改善の優先度をよりチーム全体で共有しやすくします。</p><h2>３ステップのデザインワークフロー</h2><p><img src="/images/story-assured-design/story-assured-design_hero-image.png" alt="Story-Assured Design のヒーローイメージ"></p><p>こうしてできあがったデザインワークフローが Story-Assured Design です。冒頭にお話した通り３ステップで UI デザインを作っていきます。</p><ol><li>ストーリーデザイン</li><li>デザインの構造化</li><li>視覚情報デザイン</li></ol><h3>Why? How? What?</h3><p>先程、Story-Assured Design では「Why? How? What?」の順で成果物が作られると書きました。これは Simon Sinek 氏が TED の「<a href="https://www.ted.com/talks/simon_sinek_how_great_leaders_inspire_action" target="_blank" rel="external">How great leaders inspire action</a>」というトークでも語っているゴールデンサークル理論です。この理論は人を動かすためには「Why? How? What?」の順に伝えることがとても重要だと言っています。Story-Assured Design の３ステップはまさに</p><ol><li><strong>ストーリーデザインで Why を作る</strong></li><li><strong>デザインの構造化で How を作る</strong></li><li><strong>視覚情報デザインが作られると What になる</strong></li></ol><p>というステップに呼応しています。</p><h2>ステップ１：ストーリーデザイン</h2><p>Story-Assured Design で一番重要なステップがストーリーデザインです。なので最初にデザインします。その名前の通り、ユーザーストーリーをデザインする工程です。先程のゴールデンサークル理論でいうところの <strong>Why をデザインする工程</strong> です。</p><p>このステップでは、 <strong>画面ごとにユーザーに得てもらう情報とその情報を得たことによって起こすアクション</strong> をデザインします。</p><h3>事業利益に繋がる情報とユーザーの行動をデザインする</h3><p>ほとんどのサービスは何らかの形で事業利益を生み出すために提供されていると思います。ストーリーデザインでは、ユーザー満足度に直接関わる部分というより、事業利益に貢献する部分に比重を置いてデザインします。つまり、使ってもらうことで事業利益を生む出すアクションまでのストーリーをデザインするのです。どんな情報をユーザーに与えれば次の情報に繋がるアクションを起こし、最終的に事業利益に繋がる行動や習慣に導きます。</p><p>このステップでストーリーを確立させた上で、以降のステップでより満足度高くストーリーに沿ってもらえるようにデザインしていきます。</p><h3>ストーリーデザインの成果物</h3><p>デザインしたものがデザイナーの頭の中だけで完結してしまっては、このステップを分割した意味がなくなってしまいます。アウトプットとして管理しましょう。このステップのアウトプットは、次のようにワイヤーフレームにとても近いものが良いです。</p><p><img src="/images/story-assured-design/story-design_mylist.png" alt="ストーリーデザインの成果物一例"></p><p>AbemaTV の開発ではデザインデータは Sketch で作られているので、今回のプロジェクトでもストーリーデザインのアウトプットは Sketch ファイルです。画面単位でワイヤーフレームのように画面に配置する要素をレイアウトしていくのですが、ユーザーストーリーが確実にデザインされていることを検証するために、このステップでは先述した KPI に対する数値も明記します。</p><p>例ではワイヤーフレーム図の下にユーザーストーリーに対するリモコンボタンの押下数を明記しています。これでデザインしたユーザーストーリーが KPI を達成しているかを確認します。</p><p><img src="/images/story-assured-design/story-design_mylist_counts.png" alt="ストーリーデザインにおける KPI の記述"></p><p>余談ですが、この KPI の表現方法は Google I/O 2018 でのセッション『<a href="https://www.youtube.com/watch?v=TAzkrXTGEOM" target="_blank" rel="external">An accessible process for inclusive design</a>』からヒントを得ています。</p><p><img src="/images/story-assured-design/google-io-2018_an_accessible-process_for_inclusive-design.jpg" alt="An accessible process for inclusive design セッションスライド"></p><p>とはいえ、画面にはいくつもの機能と選択肢があります。そこでストーリーデザインにおいてストーリーを作る手法としてオススメしたいのが、次に紹介する「プライマリーストーリーメソッド」です。</p><h3>プライマリーストーリーメソッド</h3><p>プライマリーストーリーメソッドは、１画面に１つだけ１番重要（プライマリー）なユーザーストーリーを設定することで、ストーリーデザインする手法です。とても単純明快なためチームメンバー全員が目線を合わせてデザインに参加することが容易なので新規プロダクトの初期デザインにオススメな手法です。</p><p><img src="/images/story-assured-design/story-design_mylist_primary-story.png" alt="プライマリーストーリー"></p><p>たとえば、この画面ではユーザーに過去に視聴した番組一覧を情報として表示して、そのうちの１つの詳細画面に遷移することをプライマリーストーリーに設定しています。この画面には視聴履歴とした記録されている番組を履歴から削除する機能やマイリストというお気に入りとして登録した番組を確認する機能を使うこともストーリーとして存在しますが、まずは１番多くのユーザーに良い体験を与えることができるストーリーを設定します。そしてそのストーリーに対して１番ボタン押下数が少ないカーソル移動経路をデザインします。</p><p><img src="/images/story-assured-design/story-design_mylist_counts.png" alt="ストーリーデザインにおける KPI の記述"></p><p>プライマリーストーリーメソッドは開発する側にとってもメリットがある手法ですが、ユーザーにとってもメリットがあります。ユーザーにやってもらいたいことが１画面に複数あるデザインは新規ユーザーを迷わせます。それでも、サービスを提供する側の心理としてはユーザーが離脱しないうちにできるだけいろいろなコンテンツや機能を知ってもらいたいので１画面に複数のストーリーを詰め込んでしまいがちです。プライマリーストーリーメソッドは１つの王道のストーリーを明確に優先することになるため、ユーザーは迷うことなくそのストーリーを選択することができます。</p><p>そして、ストーリーデザインの評価もしやすくなります。画面ごとに明確なストーリーがあるので、Google Analytics などを使ったユーザー行動計測との差分を確実に取ることができます。デザインの評価が難しいという話を先述しましたが、プライマリーストーリーメソッドによって、意図したデザインが数字として結果を出しているかがしっかり評価できます。</p><p>そして、意図したストーリーと違った結果が出たとしてもガッカリすることはないと考えています。ユーザーが想定と違う行動をしているのが事実だと確信できたら、自信を持って改善案を考えればいいのです。リリースする前のデザインはどんなものでも「ユーザーはそのように行動するはず」という仮定でしかありません。その仮定が肯定されればもちろん嬉しいですが、逆に完全に否定してくれれば、未練なく別アプローチでデザイン改善できます。</p><p>プライマリーストーリーがないと、画面においてユーザーに与えられた行動の選択肢が多すぎて、考えうる仮説も多くなりがちです。仮説が多いと考慮しなくてはいけないことが増え、ユーザーストーリーの設計も難しくなってしまいます。</p><h3>余計な視覚情報を省いてストーリーに集中する</h3><p>デザインを作成することになると、視覚的に美しく細部に拘ったデザインを作りがちです。しかし、ストーリーデザインではそれらの情報は邪魔になります。</p><p>Story-Assured Design では、チームメンバー全員でデザインを考えるので、作成したストーリーデザインも全員でレビューします。その際に視覚的に完成されたデザインを目の前にすると、色が見ずらさやレイアウト的な細かいズレなどの詳細に注意を奪われてしまい、ストーリー自体のデザインレビューに集中できなくなります。</p><p><img src="/images/story-assured-design/discussion_over_story-design.png" alt="見た目に関わる意見に寄ってしまうチャット上の会話のスクリーンショット"></p><p>ストーリーデザインでは、ユーザーがその画面で次のアクションを起こすために何の情報を得るように画面を構成していく必要があるかが分かるだけで十分です。情報がどのように伝えられるかがない方がレビューしやすくなります。</p><h3>デザインレビューのスコープを狭める</h3><p>ストーリーデザインという工程を明確に区切ることでデザインレビューのスコープを小さくすることができます。</p><p>現在は <a href="https://www.goabstract.com/" target="_blank" rel="external">Abstract</a> などのツールが一般的になってきて、デザイン工程の進捗を詳細に可視化することができます。</p><p><img src="/images/story-assured-design/abstract_commits.png" alt="Abstract によるデザイン工程の進捗可視化されている図"></p><p>これによりエンジニアが Git や GitHub などを使ったときのように、プロダクトに対する変更をブランチ単位で可視化することができるようになりました。エンジニアがプロダクトに変更を加えたい場合、コードを変更してマージリクエストやプルリクエストすると思いますが、基本的にレビュースコープが小さくなるように変更範囲を工夫することでマージまでの時間は短かくすることができます。Abstract でも同様にプロダクトのデザインデータに変更を加えてマージするときにレビューリクエストすることができます。このときのデザインレビューのスコープをストーリーに限定すれば、同様にマージまでの時間が短かくなります。</p><p><img src="/images/story-assured-design/abstruct_review-request.png" alt="Abstract の Review Request 機能のスクリーンショット"></p><p>また、複数人の目でデザインレビューをすることも可能になり、デザインの精度も上がります。しかも、ストーリーのデザインはデザイナーに限らずレビューできるので、より他面的に問題を指摘することができます。</p><h2>ステップ２：デザインの構造化</h2><p>チームで納得できるストーリーをデザインした後は、後のデザイン工程でそのストーリーが壊れないようにします。まさに Story-Assured Design の名前の由来である <strong>ストーリーを保証するステップ</strong> です。 <strong>How? の部分を作る</strong> ステップでもあります。</p><h3>ストーリーに手段を与える</h3><p>ストーリーデザインでは「ユーザーが画面からどんな情報を得ることで、次にどんな行動をするか」をデザインしました。デザインの構造化のステップでは「情報をどのように得るか」と「次にどんな手段で行動するか」をデザインします。</p><p><img src="/images/story-assured-design/structured-design_counter-programs_before_editted.png" alt="ストーリーに手段を与える前の画面"></p><p>たとえば、上図では、この「この番組の詳細情報へ（仮）」というボタンっぽいものが配置してありますが、実際に手段としてデザインされたのは下図です。</p><p><img src="/images/story-assured-design/structured-design_counter-programs_after_editted.png" alt="ストーリーに手段を与えた後の画面"></p><p>ストーリーデザインの段階では「ユーザーが番組タイトルという情報を受け取って、番組のことをもっと知りたいと思って詳細情報に遷移する」というストーリーにフォーカスを絞ってデザインを考えます。でも、どんな手段で番組タイトルという情報を知って、どんな手段で詳細情報に遷移するか、は詳細に詰める必要はありません。</p><p>デザインを構造化するこのステップで、どんな情報の提供方法が一番良いかを詰めます。</p><h3>ストーリーデザインが壊れる</h3><p>手段をデザインするとともに、このステップではストーリーを保証します。ストーリーを保証する、というのはストーリーが壊れていないことを保証する、ということです。デザインされたストーリーが壊れる、というのはどういうことかを説明します。これを説明するにはステップ３の視覚情報デザインについて少し話す必要があります。</p><p>視覚情報デザイン、というのは簡単に言うと、Sketch などのデザインツールでプロダクトの画面の見た目の最終形を作ることです。いわゆるデザインカンプです。たぶんデザインデータと言われて一番頭に思い浮かぶものだと思います。</p><p><img src="/images/story-assured-design/visual-modification_breaks_story-design.png" alt="ストーリーデザインが壊れたときの開発者のチャット上の会話"></p><p>いざデザインカンプを作っていく段階になると、視覚的なバランスを調整することになります。このとき、画面上で目に入る要素数が多いから、バランスを取るために UI 要素を減らしたり、バランスを保てる場所に要素を移動させるなどの調整することもあります。このとき視覚的な問題ばかりに気を取られていると、プライマリーストーリーとして決めた一番ユーザーにしてもらいたい行動までの距離が遠くなっていることに気付かないレイアウト修正を行ってしまうことがあります。</p><h3>ストーリーを構成する要素の構造化</h3><p>こういった意図しないストーリーデザインの破壊を防ぐため、ストーリーを構成する要素を構造化します。構造化というのは、そのものの構造を見て分かるようにすることです。つまり「デザインの意図を理解しやすくする」ための作業です。構造化によってデザインの意図が見えやすくなると、デザインに変更が入ったときに影響範囲も人目で分かるようになります。</p><p>Story-Assured Design では、ストーリーに対する影響と見た目（視覚情報）に対する影響を分離するようにデザインを構造化します。</p><p><img src="/images/story-assured-design/structured_design.png" alt="デザインの構造化成果物のスクリーンショット"></p><p>デザインの構造化の作業では、デザインを構成する要素を意味ある単位に分解して整理していきます。具体的な整理の仕方はどんな方法でも構わないのですが、Sketch などのデザインデータ上と実装コード上で表現できるものにします。この２つで表現可能なものでないと仕組みとして変更に対する保証を作ることが難しいからです。</p><h3>整理の大切さ</h3><p>引き出しの中の道具を整理するとき、仕切りを作って道具の種類ごとに分類すると思います。これはどこにどんな道具が入ってるか理解しやすくするための構造化です。そのように整理された引き出しは使いやすいはずです。</p><p>引き出しは整理されていなくても、文章は書けるし、絵も描けます。なので、作品作りに影響がないという人もいると思います。ただ、その引き出しを個人ではなく複数人で共用で使うことを考えると、整理されていないと道具を探すことに時間がかかりすぎて、何人かの制作作業に支障が出ているかもしれません。新しく引き出しを使う人は確実にすぐには作業に取り掛かれないでしょう。</p><h3>コンポーネント化による整理</h3><p>デザインの構造化も引き出しの整理と基本的な目的は同じです。複数人で作業しても制作作業に支障が出ないようにします。引き出しの中にある鉛筆や消しゴム、定規などの道具は個体として識別できるので、個々の配置を変えたり、分類したりすることで整理できますが、デザイン自体はそのままでは整理することができません。そこでデザインを構成する要素を識別可能な形でコンポーネント化すると整理がしやすくなります。</p><p>今は Sketch などのデザインツールがコンポーネント化を意識した機能を提供しているため、以前よりコンポーネントベースでデザインすることがかなり一般的になってきて多くの人がイメージしやすくなっています。</p><h3>デザインからデプロイまでのリードタイムを短くする構造</h3><p>そして、何よりソフトウェアのコード設計自体がコンポーネントベースであることが多いので、一番理に適っています。デザインにおける検証と実装を繰り返して改善していくのであれば、デザインの構造とコード設計の差をできる限り無くすことが１番デザインからデプロイまでのリードタイムを短くすることができます。</p><h3>UI コンポーネントに再利用性は必須ではない</h3><p>デザイン要素をコンポーネント化した、いわゆる UI コンポーネントの話とよくセットで話題に上がるのは、再利用性という言葉です。しかし、Story-Assured Design の中では再利用できるかどうかは UI コンポーネントの必須条件とは考えないようにします。デザインデータの構造化のためにコンポーネント化しているので、再利用できなくてもコンポーネントとして整理します。</p><h3>デザインにおける関心の分離</h3><p>デザイン要素をコンポーネント化しようとすると、どのような要素をどういう単位でまとめておくか悩むと思います。私のオススメは「関心の分離」を基準にコンポーネントにまとめるのが良いと思います。そのコンポーネントがどんなデザイン的な課題を解決することに関心（責任）を持たせたいか、という視点でまとめておくと、デザインの意図が構造により理解しやすくなります。</p><p>そして、ソフトウェアのコンポーネント化と同様に、単一責任原則に従うとデザインの変更がしやすい構造になるでしょう。「変更する理由が同じものは集める、変更する理由が違うものは分ける」ことで将来的なデザイン改善速度は加速するはずです。</p><p>デザインにおける関心の分離の例は、拙著『<a href="https://www.amazon.co.jp/dp/477419705X" target="_blank" rel="external">Atomic Design ~堅牢で使いやすいUIを効率良く設計する</a>』にも書きましたが、UI をコンポーネント化する基準として１番理に適っていると思っています。デザインの構造化に Atomic Design のような階層化された構造を採用するのも良いでしょう。</p><h3>ここまででモック実装に必要なデザインが完了</h3><p>データ構造デザインが完了した時点でエンジニアは UI 実装に着手できるようになります。今回のプロジェクトでは　Sketch のデータ構造どおりに UI をコードに実装していきました。</p><p>ここで実装された UI は視覚情報がまだデザインされていないので、実装されたアプリケーションはまだモックのようなものですが、デザインしたユーザーストーリーはそのまま反映されているはずです。なので、このモックではデザインされたユーザーストーリーが正しく機能しているかを評価することができます。</p><p>また、実装と平行して、次のステップで紹介する視覚情報デザインを進めることができます。これにより、実装においてデザインを待つ時間が短かくなります。そして、ユーザーストーリーを自分たちで先行して触って評価することもできるので、視覚情報のデザインを詰めすぎる前にフィードバックを得ながらユーザーストーリーに改善していき、最終的なデザインへと詰めていくことができます。</p><h2>ステップ３：視覚情報デザイン</h2><p>Story-Assured Design の最後のステップは視覚情報のデザインです。視覚情報のデザインというとまどろっこしいですが、一般的に多くの人が思い浮かべるであろうデザイン作業です。私たちのチームではよく「デザインカンプの作成」と言っていました。 <strong>ユーザーが見る画面に限りなく近い最終形のデザインを Sketch データとして作ります</strong> 。プロダクトデザインにおける <strong>What を作る</strong> 工程です。</p><p><img src="/images/story-assured-design/design-comp.png" alt="視覚情報デザイン成果物のスクリーンショット"></p><h3>ユーザーの満足度を決めるデザイン</h3><p>ストーリーデザインでは事業利益に貢献することに比重を置いてデザインしましたが、このステップでは、ユーザーの満足度を最大限高めることに比重を置いてデザインします。</p><p>視覚情報デザインはその名前の通り、ユーザーに視覚的に伝えるあらゆる情報をデザインすることを指します。ストーリーでデザインした情報の流れがユーザーにどのように見せられて、どう伝わるかが改めてデザインされます。細やかな工夫で直感的に情報が伝わり、ストレスない使用感に繋ります。この工程次第でユーザーの満足度は大きく変わります。</p><h3>構造を保ったまま見た目をデザインする</h3><p>Story-Assured Design において視覚情報をデザインする際は、前のステップで作った構造を保ったまま見た目だけをデザインしていきます。前述したとおり、構造デザインはデザインしたストーリーが壊れていないことを保証するためのステップです。その構造に変化を加えてしまうとストーリー自体を破壊してしまう可能性があります。Story-Assured Design では構造化されたデザイン自体をストーリーデザインに対するリグレッション（退行）テストだと捉えることができます。</p><p><img src="/images/story-assured-design/structured-design-comp.png" alt="視覚情報をデザインした後も構造が保たれている図"></p><h3>構造に変更が発生する場合はストーリーデザインから修正する</h3><p>とはいえ、視覚情報をデザインしていると、どうしても構造に変更を加える必要が出てくる場合はあります。そんなときは、構造に変更を加えます。ただし、先程構造化されたデザインはストーリーデザインに対するリグレッションテストだと書いた通り、構造に変更を加えた場合はストーリーデザインから見直しを行います。構造の変化により、デザインされたストーリーに矛盾があったり、成り立たなくなっていることが確認された場合はストーリーデザイン自体をやり直します。そして、デザインの構造化を再度行い、最後にデザインカンプに戻って修正を反映します。</p><h3>視覚情報デザインではデザイナーの意見を優先させる</h3><p>先述した通り、視覚情報デザインだけは作業にもレビューにも、どうしてもグラフィック能力に長けている必要がある場合が多いです。この領域はデザイナーが担保します。視覚情報デザイン以外のステップでは、チームメンバーの意見は常に平等に扱われることが大事です。明文化された KPI があるため、誰でも同じゴールを向いた意見を言うことが可能だからです。しかし、視覚情報デザインのステップだけはデザイナーの意見を優先させることが大事だと個人的には思っています。視覚情報デザインは非言語的な要素を扱うことが多く、言葉だけでレビュー観点を合わせることが困難です。</p><h3>デザイン原則の必要性</h3><p>言葉だけでレビュー観点を合わせることが困難だと言っても、視覚情報デザインをデザイナーだけに任せてしまうということではありません。視覚情報デザインにおいても言葉にしきれないギリギリのところまではチーム全員が良さを評価できる指針を作ります。</p><p>ユーザー満足を追求するときに一番身近なユーザーは自分です。そのため、このステップでは特にお互いが考える『良い』をぶつけ合いやすくなります。ぶつけ合いを防ぐために自分たちが考える良いユーザー体験をしっかり定義することが大事です。実際にユーザーがどういう体験を得ることを期待するのかを言語化します。</p><p>そのためには、自分たちが開発するプロダクトやサービスにとってのデザイン原則を作るのがオススメです。この原則を視覚情報デザインに限らず、全体のデザイン指針にします。</p><ul><li>最小限のボタン操作数でやりたい操作ができること</li><li>カーソルを一度移動させるなど直近の操作に依存することなく、常にカーソルの位置が明確であること</li><li>操作時に目線の移動が少ないこと</li><li>操作に対して行くときと戻るときの物理的、心理的な距離が常に一定であること</li></ul><p>上記は一部ですが、ユーザー体験を考える際に「Ａの案の方がユーザー体験が良い」というより「Ａの案はカーソルの移動距離が小さく、ユーザーは目線を移動させる必要がないため、楽に操作ができる」というように原則に沿っているかという目線で話し合いができる方がチームが考える『良い』への結論に早く導くことができます。</p><p>作って思いますが、最初から完璧なデザイン原則を作ることは難しいと思います。ただそれでも、何かを言葉にしてから先に進む、ということが大事です。決定が間違っていれば、少なくともどこかで間違いに気付くことができ、修正することもできます。修正すれば前進しています。しかし、難しいからと言って何も決めなければ、いろいろな人にとっての良いユーザー体験が詰め込まれ、結果的に、誰にとってもどのように使ってもそこそこな体験を提供するデザインになってしまいます。</p><h2>リリース後にストーリーデザインを定量評価</h2><p>ここまでストーリーを明確にしてデザインしてきたので、リリース後はそのデザインが本当にワークしているかが分かります。アクセス解析ツールでユーザーがストーリーデザイン通りに行動をしているかを定量的に評価することができるからです。今回のプロジェクトでは Google Analytics の「行動フロー」でユーザーの実際の行動とストーリーデザインとの差異を確認しました。</p><p><img src="/images/story-assured-design/story-design_and_google-analytics.png" alt="ストーリーデザインを Google Analytics を使って評価するイメージ図"></p><h2>ファクト（事実）を基にストーリーデザインを改善する</h2><p>ユーザーの行動を解析していくとストーリーデザインで描いたものと異なる結果も出てきます。解析ツールで確認できるユーザーの行動は紛れもないファクト（事実）なので、リリース後はこのファクトを明確に変化させるようにストーリーデザインを改善していきます。</p><p>効果的に意図する方向にファクトを変化させるためにはユーザーの行動理由を分析する必要がありますが、解析ツールで得られる数字だけでユーザー行動の全てを理解することは困難です。ある程度仮説を立てた後は、実験的にストーリーをリリースしてファクトの変化を観測しながら分析する方が間違いもなく確実です。ファクトからユーザーの行動理由を推測できるものもありますが、どうしても推測できないものもあると思います。ユーザーテストなどのより直接的な手段も活用していきます。</p><p>より分析しやすくなるようにデザインすることも重要です。｢デザインの構造化｣で触れた｢デザインにおける関心の分離｣がうまく設計されていると、分析したい行動に関わる要素だけを変更させることが簡単にできるため、有意な差異に辿り着きやすくなります。｢デザインの構造化｣によりコード側の構造もデザインの構造と同じになっているため、実装も容易なはずです。</p><h2>タスクをストーリー駆動で管理する</h2><p>組織やチームが大きくなってくると、大人数で分業するために作業を多数のタスクに分割して管理することになりますが、分割されたタスクが｢それをやる理由｣と切り離されて管理されてしまうことがあります。タスクには最低限｢何をやるか｣が記されていれば実行可能なため、｢なぜやるか｣までは記されずに担当者に渡されることがいつしか普通になってしまう現象です。</p><p>タスク自体が｢何をやるか｣だけ理解された上で実行されてしまうと、意図と異なった仕上がりになってしまうリスクがあります。担当者にとってもただの作業となってしまい工夫の余地もないため、せっかくチームに高い能力を持ったメンバーがいても、力を活かしきることができなくなります。</p><p>これを防ぐため、タスクは基本的にストーリー駆動で管理するようにします。プロジェクト管理ツールなどを使ってタスクをチケット管理している場合は、ストーリーチケットを常にタスクチケットの親として管理するのがオススメです。</p><p>ストーリーに紐付くタスクは、｢仕様化｣、｢ストーリーデザイン｣、｢デザインの構造化｣、｢視覚情報デザイン｣、｢実装｣、｢ログ設計｣、｢ログ実装｣などになります。｢ログ設計｣、｢ログ実装｣以外はストーリーをリリースするために常に必要なタスクです。ストーリーは常にユーザーの行動に変化を与えるために作られるため、KPI を持ちます。そのため、その KPI が新しいストーリーデザインによってどう変化したか計測する必要があるので、既存のログ設計で計測できない場合は｢ログ設計｣と｢ログ実装｣がタスクとして追加されます。</p><p>それぞれのタスクのレビューは、｢紐付いているストーリーが持つ KPI を効果的に改善できるように工夫されているか｣という視点でチーム全員が目線を合わせて行うことができます。</p><h2>実践してみて</h2><p>Story-Assured Design のワークフローを実践した結果、初期リリース直前のデザインのブラッシュアップ速度は凄まじいものになりました。ストーリーが構造化によって保証されている状態なので、ギリギリのタイミングまで細かいユーザビリティ改善を心理的安全性が高い状態で行うことができました。</p><p>また、構造化されたデザインがコード設計と同期しているため、どの要素をいじれば実装にどの程度影響があるかも分かるのも大きかったと思います。影響範囲が大きいことが分かった場合にすぐに同じ問題を解決する別のデザイン手段に切り替えることができます。</p><p>そして何より、チーム全員がデザインに取り組んでいる状態は、それぞれが事業利益とユーザー体験を向上するために考えて工夫することを可能にするため、相乗効果を生みました。初期リリース直前の KPT ではデザインに関する多くの Keep や Problem が出たことは、１つの成功体験になったと感じます。</p><p><img src="/images/story-assured-design/KPT.jpg" alt="KPT で出た付箋の写真"></p><p>またこのワークフローで作られたデザインデータも思わぬ副産物を生んでいます。ストーリーデザインの Sketch データは見ることでプロダクト全体のユーザーストーリーを把握できるため、テスト設計者やログ設計者もこれを参照してテスト設計やログ設計を行いました。ユーザーストーリーに対する理解があることで、テストやログ設計者も柔軟に設計しやすくなりました。</p><p>このデザインワークフローはプロダクトの成長に伴なって確実なデザインの改善スピードを上げていくことが目的です。ここからの道程が本番なので、品質が高い改善スピードを向上させられるように進めていきたいと思います。</p><h2>終わりに</h2><p>現在も Story-Assured Design のワークフローで改善を繰り返しています。しかし、サービスはどんどん成長していき、組織規模のスケールに伴なった課題の難易度も増していっています。そのため、次のアプローチとして <a href="https://www.designbetter.co/designops-handbook" target="_blank" rel="external">DesignOps</a> を模索しています。このまま組織が大きくなったとしても、デザインに関するオペレーションを正しく効率化でき、クリエイティビティを常に最大限にできたら最高です。その中で Story-Assured Design のようなワークフローもその１つの構成要素として更に上手く機能させることができたらなと思っています。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/story-assured-design/story-assured-design_hero-image.png&quot; alt=&quot;Story-Assured Design のヒーローイメージ&quot;&gt;&lt;/p&gt;
&lt;p&gt;現在開発担当している &lt;a hr
      
    
    </summary>
    
    
      <category term="design workflow agile" scheme="https://ygoto3.com/tags/design-workflow-agile/"/>
    
  </entry>
  
  <entry>
    <title>世界の動画技術動向を見据えた AbemaTV の向かう先</title>
    <link href="https://ygoto3.com/posts/abematv-moving-forward-with-global-video-technology-trends/"/>
    <id>https://ygoto3.com/posts/abematv-moving-forward-with-global-video-technology-trends/</id>
    <published>2018-10-13T23:19:39.000Z</published>
    <updated>2019-02-13T03:11:50.328Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://developer.abema.io/2018/" target="_blank" rel="external">AbemaTV Developer Conference 2018</a> の最終セッションにて『世界の動画技術動向を見据えた AbemaTV の向かう先』というお話をさせていただきました。</p><p><iframe src="//www.slideshare.net/slideshow/embed_code/key/1RyQilqlT7qKUh" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://developer.abema.io/2018/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AbemaTV Developer Conference 2018&lt;/a&gt; の最終セッションにて『世界の動画技術動向を見据えた
      
    
    </summary>
    
    
      <category term="video" scheme="https://ygoto3.com/tags/video/"/>
    
  </entry>
  
  <entry>
    <title>Atomic Design という名のデザイン整理術</title>
    <link href="https://ygoto3.com/posts/organizing-design-with-atomic-design/"/>
    <id>https://ygoto3.com/posts/organizing-design-with-atomic-design/</id>
    <published>2018-07-09T20:12:52.000Z</published>
    <updated>2019-02-13T03:11:50.328Z</updated>
    
    <content type="html"><![CDATA[<p>サイバーエージェントのデザインコミュニティ「AID アメーバ・イノベーション・デザイン室」向け勉強会にて『Atomic Design という名のデザイン整理術』という内容のお話をさせていただきました。</p><p><iframe src="//www.slideshare.net/slideshow/embed_code/key/5FVjxzZFxREeeA" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;サイバーエージェントのデザインコミュニティ「AID アメーバ・イノベーション・デザイン室」向け勉強会にて『Atomic Design という名のデザイン整理術』という内容のお話をさせていただきました。&lt;/p&gt;
&lt;p&gt;
&lt;iframe src=&quot;//www.slideshar
      
    
    </summary>
    
    
      <category term="Atomic Design" scheme="https://ygoto3.com/tags/Atomic-Design/"/>
    
  </entry>
  
  <entry>
    <title>既存のフローからアップデートするアジャイル・デザインフロー</title>
    <link href="https://ygoto3.com/posts/update-to-an-agile-design-flow/"/>
    <id>https://ygoto3.com/posts/update-to-an-agile-design-flow/</id>
    <published>2018-06-29T23:58:12.000Z</published>
    <updated>2019-02-13T03:11:50.332Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://devlove.doorkeeper.jp/events/75944" target="_blank" rel="external">DevLOVE</a> さん開催のイベントにて『既存のフローからアップデートするアジャイル・デザインフロー』という内容のお話をさせていただきました。</p><p><iframe src="//www.slideshare.net/slideshow/embed_code/key/GUC6MWj2yc1EIe" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://devlove.doorkeeper.jp/events/75944&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DevLOVE&lt;/a&gt; さん開催のイベントにて『既存のフローからアップデートするアジャイル・デザインフロー
      
    
    </summary>
    
    
      <category term="Agile Design Workflow" scheme="https://ygoto3.com/tags/Agile-Design-Workflow/"/>
    
  </entry>
  
  <entry>
    <title>UI 開発をアジャイルに行うための Atomic Design</title>
    <link href="https://ygoto3.com/posts/atomic-design-for-agile-ui-development/"/>
    <id>https://ygoto3.com/posts/atomic-design-for-agile-ui-development/</id>
    <published>2018-06-06T23:11:36.000Z</published>
    <updated>2019-02-13T03:11:50.328Z</updated>
    
    <content type="html"><![CDATA[<p>リクルートスタッフィングさん運営 <a href="http://www.itstaffing.jp/engineer/" target="_blank" rel="external">IT STAFFING エンジニアスタイル</a>開催のイベントにて『UI 開発をアジャイルに行うための Atomic Design』という内容でお話させていただきました。</p><p><iframe src="//www.slideshare.net/slideshow/embed_code/key/e4CUyx16ZWud0d" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;リクルートスタッフィングさん運営 &lt;a href=&quot;http://www.itstaffing.jp/engineer/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;IT STAFFING エンジニアスタイル&lt;/a&gt;開催のイベントにて『UI 開発をアジャ
      
    
    </summary>
    
    
      <category term="Atomic Design Agile" scheme="https://ygoto3.com/tags/Atomic-Design-Agile/"/>
    
  </entry>
  
  <entry>
    <title>フェーズに応じて育てるデザインシステム</title>
    <link href="https://ygoto3.com/posts/building-a-design-system-phase-by-phase/"/>
    <id>https://ygoto3.com/posts/building-a-design-system-phase-by-phase/</id>
    <published>2018-04-20T23:45:35.000Z</published>
    <updated>2019-02-13T03:11:50.328Z</updated>
    
    <content type="html"><![CDATA[<p>ヤフー株式会社さん主催「<a href="https://yj-meetup.connpass.com/event/83635/" target="_blank" rel="external">Bonfire Design #3</a>」にて『フェーズに応じて育てるデザインシステム』という内容のお話をさせていただきました。</p><p><iframe src="//www.slideshare.net/slideshow/embed_code/key/iJaDs1gFiT1DjP" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ヤフー株式会社さん主催「&lt;a href=&quot;https://yj-meetup.connpass.com/event/83635/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bonfire Design #3&lt;/a&gt;」にて『フェーズに応じて育てるデザイン
      
    
    </summary>
    
    
      <category term="design system" scheme="https://ygoto3.com/tags/design-system/"/>
    
  </entry>
  
  <entry>
    <title>Alexa アプリ（スキル）開発効率化メモ：ローカル開発／継続的インテグレーション／多言語対応</title>
    <link href="https://ygoto3.com/posts/alexa-skill-development-efficiency/"/>
    <id>https://ygoto3.com/posts/alexa-skill-development-efficiency/</id>
    <published>2017-10-08T09:05:02.000Z</published>
    <updated>2019-02-13T03:11:50.328Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/alexa-skill-development-efficiency/amazon-echo-devices.jpg" alt="Amazon Echo"></p><p>担当している <a href="https://abema.tv/" target="_blank" rel="external">AbemaTV</a> が <a href="https://www.cyberagent.co.jp/news/detail/id=20957" target="_blank" rel="external">Amazon Alexa に対応しました</a>。今回 Alexa スキル（Alexa に機能を追加するためのアプリをスキルと呼びます）の開発にあたって、課題感があったチームによる平行開発、継続的インテグレーションおよびデプロイ、多言語対応についてのメモを残したいと思います。</p><h2>Web 技術を使って開発できるけど動作確認が大変</h2><p>最近は Web で使われてきた技術がさまざまなデバイス用のプラットフォームでも利用できるようになり、Web エンジニアがこういった PC やスマートフォン以外のデバイス向けのアプリを開発することも多くなってきました。たとえば Amazon Echo などの Alexa 搭載端末や Google Chromecast 用アプリも Web 技術を使って開発できるので Web エンジニアが参入する障壁はかなり低いのですが、既存の Web アプリケーションと大きく違うのが、<strong>実機で動作確認するのが一苦労</strong>な点です。</p><p>Web アプリケーションであれば、実装している PC 上でビルドして同じ PC で Web サーバを立てるだけでほかの PC やスマートフォンからアクセスして動作確認できます。しかし、Amazon Echo や Google Chromecast のようなデバイスは、各々のアプリ開発者ポータルに登録されたアプリにしかアクセスできないようになっています。もちろん PC に直接デバイス接続するような機能もプラグもありません。両者とも物理的なインターフェースがシンプルすぎます。</p><p>実機で自作アプリの動作確認をするには毎回オンラインでアクセスできるどこかにデプロイする必要があります。アプリを実装する場所（PC）から動作テストを行える場所（オンラインのどこか）までがやたら遠いので、どうしても開発効率が悪くなりますし、複数人で平行して開発しようとすると人数分のテスト環境をどこかにホストする必要があり、そういった環境を別途管理するなど煩雑さも増します。</p><h2>Alexa スキルをチームで開発するときの課題</h2><p>そんな中、現在サービス開発を担当している AbemaTV で、いわゆるスマート・デバイス向けのアプリ開発を専門で担当するチームを立ち上げました。Alexa スキルをチームで開発するとなっても、平行開発しづらいこの環境ではマンパワーのメリットが活かせません。平行開発を可能にするために以下の要素を満たす必要があります。</p><ul><li>開発に使っているローカル PC 上である程度の動作確認が可能なこと</li><li>継続的インテグレーションが可能なこと</li></ul><p>この 2 点を実現する手段について紹介するのですが、Alexa スキルの開発が初めての方のために一般的な開発手順について認識がない方のために、まず Alexa スキルの概要と開発手順をざっくり説明します。</p><h2>Alexa スキルの開発手順</h2><p>Alexa スキルと呼ばれるものは、家電製品などを制御するためのスマートホームスキル、ニュースなどを読み上げるためのフラッシュブリーフィングスキルなど用途が特化しているものもありますが、今回は用途が汎用的なサービスを作ることができるカスタムスキルについてお話します。</p><p>カスタムスキルの開発手順は大まかに以下のようになります。</p><ol><li>Voice User Interface (VUI) 作成</li><li>サービス・ロジック実装</li><li>VUI からサービス・ロジックへの連携</li><li>実機やシミュレータによるテスト</li><li>申請</li><li>審査</li><li>公開</li></ol><p>具体的な実装手順自体は Amazon Alexa が公式に公開しているチュートリアル <a href="https://github.com/alexa/skill-sample-nodejs-fact" target="_blank" rel="external">Build An Alexa Fact Skill</a> を一通りやると大体分かります。あと、昨日クラスメソッドさんが投稿している <a href="https://dev.classmethod.jp/etc/first-step-of-making-alexa-custom-skills/" target="_blank" rel="external">【祝Alexa日本上陸】とりあえず日本語でスキルを作ってみる</a> もスキルの作り方がとても分かりやすいのでオススメです。</p><p>Alexa スキルを開発するには、普段聞き慣れない Alexa 特有の概念をいくつか理解する必要があります。個人的には最初分かりづらかったので、補足がてら簡単に説明します。</p><h3>Voice User Interface - VUI</h3><p>Voice User Interface（以後 VUI）というのは、その名前の通り、声で操作するユーザー・インターフェースです。PC デスクトップ・アプリやスマートフォン・アプリでいうところのボタンとかテキスト入力ボックスなどにあたります。PC やスマートフォン上のアプリケーションはマウスやタッチパッドで操作するので、ボタンがクリックされたりテキストが入力されたときにアプリは特定の処理を実行します。しかし、Alexa の場合は操作手段が声です。どのように話しかけたときにどんな処理につなげるかを橋渡しする存在が VUI です。</p><p>VUI の少し深い話は<a href="https://website-usability.info/2017/10/entry_171019.html" target="_blank" rel="external">こちらの記事</a>など参考になりますが、とても抽象性が高い概念なので、ここでは以下の Alexa の VUI を構成する具体的な要素 3 つがどのようにユーザーの声とサービスをつなげているかを見ていきます。</p><ul><li>Invocation Name（呼び出し名）</li><li>Intent（意図）</li><li>Sample Utterance（発話サンプル）</li></ul><h4>Invocation Name</h4><p>Invocation Name はいわゆる<strong>スキルの呼び出し名</strong>です。つまり、Alexa から特定のスキルを使いたいときに指定する名前です。スマホだとホームスクリーンでアプリを起動するときにアイコンをタップすると思いますが、Invocation Name に相当します。たとえば、AbemaTV スキルを呼び出したい場合であれば、<strong>AbemaTV</strong> が Invocation Name なので、「Alexa、<strong>AbemaTV</strong> を開いて」と話しかけると AbemaTV スキルが起動します。</p><h4>Sample Utterance</h4><p>Sample Utterance は、<strong>発話のサンプル</strong>です。ユーザーが実際に発話した文言をどんな意図（Intent）として受けるかを判断するための要素です。たとえばユーザーがランキングを知りたいときに、質問の仕方は何パターンもあります。ある人は「ランキングを教えてー」と言うかもしれませんし、別の人はランキングという言葉を使わず「いま人気の番組は何？」と尋くかもしれません。ただ、厳密な発話の仕方が異なってもユーザーが聞きたいことは結果同じだったりします。こういった異なる発話パターンをスキルがどんな意図として解釈するのかをマッピングするのが Sample Utterance の役割です。</p><p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">RankingIntent</span> ランキングを教えて</div><div class="line">RankingIntent ランキングが知りたい</div><div class="line">RankingIntent いま人気の番組は何</div></pre></td></tr></table></figure></p><p>上記のような Sample Utterance を書いた場合、<strong>「Alexa、AbemaTV のランキングを教えて」</strong> と言っても、 <strong>「Alexa、AbemaTV のランキングが知りたい」</strong> と話しかけても <strong>「Alexa、AbemaTV でいま人気の番組は何？」</strong> と訊いても全てランキングを知りたいという意図と解釈して処理するようになります。意図には名前が付けることができ、ここでは <code>RankingIntent</code> という名前にしています。この名前を指定することは、次に説明する Intent に処理を接続するために重要です。</p><h4>Intent</h4><p>Intent は Sample Utterance によってマッピングされたユーザーの意図に対して実際のどんな処理を行う部分です。例の <code>RankingIntent</code> の場合はユーザーがランキングを知りたいという意図に対する処理なので、実際に現在のランキング・データを取得して、それをユーザーに回答するための文章を作成します。</p><p>Amazon Echo などの Alexa 対応デバイスはユーザーの発話音声をクラウド上の Alexa サービスに送り音声からユーザーの意図を解釈した後は、具体的なサービス・ロジックの処理依頼を AWS Lambda のような別サービスにリクエストします。Alexa が Amazon のプロダクトなので、チュートリアルにあるように AWS Lambda 上に処理を実装すると連携も簡単ですし、Amazon が用意している SDK の恩恵にあずかることができます。このフローは Alexa 公式ブログの記事 <a href="https://developer.amazon.com/ja/blogs/alexa/post/6e716e5c-55b0-445b-b936-9cfac4712e7b/training-1" target="_blank" rel="external">Alexaスキル開発トレーニングシリーズ 第1回 初めてのスキル開発</a> の下記スキル実行仕組みの図が分かりやすいです。</p><p><img src="/images/alexa-skill-development-efficiency/alexa-skill-flow.png" alt="Alexa スキル実行仕組みの図"></p><h3>Intent に対するサービス・ロジックの実装</h3><p>Alexa サービスから Intent が指定されて AWS Lambda にリクエストが飛んできます。その Intent に対するサービス・ロジックを Lambda Function として実装します。Amazon が提供する <a href="https://github.com/alexa/alexa-skills-kit-sdk-for-nodejs" target="_blank" rel="external">Alexa Skills Kit SDK for Node.js</a> では、Alexa をトリガーに呼び出された AWS Lambda のイベント情報を SDK を通じて Intent ごとのハンドラに振り分けてくれます。</p><p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> Alexa = <span class="built_in">require</span>(<span class="string">'alexa-sdk'</span>);</div><div class="line"></div><div class="line"><span class="comment">// Intent ごとの処理を書いていく</span></div><div class="line"><span class="keyword">const</span> intentHandlers = &#123;</div><div class="line">  <span class="string">'RankingIntent'</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.response.speak(<span class="string">`本日のランキングは<span class="subst">$&#123;getRanking()&#125;</span>です。`</span>);</div><div class="line">    <span class="keyword">this</span>.emit(<span class="string">':responseReady'</span>);</div><div class="line">  &#125;,</div><div class="line">  <span class="string">'AMAZON.HelpIntent'</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; ... &#125;,</div><div class="line">  <span class="string">'AMAZON.CancelIntent'</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; ... &#125;,</div><div class="line">  <span class="string">'AMAZON.StopIntent'</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; ... &#125;,</div><div class="line">  <span class="string">'LaunchRequest'</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; ... &#125;,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// Lambda のイベントとコンテキスト情報を SDK に渡して、Intent のハンドラにつなげる</span></div><div class="line">exports.handler = <span class="function"><span class="keyword">function</span>(<span class="params">event, context, callback</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> alexa = Alexa.handler(event, context);</div><div class="line">  alexa.appId = APP_ID;</div><div class="line">  alexa.registerHandlers(intentHandlers);</div><div class="line">  alexa.execute();</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><p>この Lambda Function のエンドポイントを自作のスキルから接続するように設定することで Alexa にユーザーと対話させることができるようになります。</p><p>余談ですが、2017 年 11 月現在 AWS Lambda の Node.js サポート・バージョンが <code>v6.10</code> なので、本記事での JavaScript コードは全て <code>v6.10</code> 用になっています。</p><p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ n</div><div class="line">  ο node/6.10.0</div><div class="line">    node/9.0.0</div></pre></td></tr></table></figure></p><h3>Alexa スキルの開発手順を効率化したい</h3><p>ここまでが <a href="https://github.com/alexa/skill-sample-nodejs-fact" target="_blank" rel="external">Build An Alexa Fact Skill</a> チュートリアルに載っている内容です。この内容をカスタマイズすれば、Alexa スキルを開発することはできます。しかし、前述したように、このスキルを動作確認するには毎回 AWS Lambda 上にコードをデプロイする必要があります。これでは開発効率も悪いです。しかも Alexa スキルは Lambda Function に紐づけて管理するので、チームで開発するとなると人数分のスキル設定と Lambda Function も別途用意しておく必要があります。しばらく開発してると、少々手間がかかりすぎるのでちょっと辛くなり、次のようなことができる環境が欲しいなと思い始めます。</p><ul><li>Amazon Skills Kit やAWS Lambda にデプロイすることなくローカルで気軽にテストしたい</li><li>スキル設定と Lambda Function をまとめて継続的にインテグレーションしたい</li></ul><p>結論を言うと、前者は <strong>alexa-app というサードパーティーの Alexa スキル用フレームワークを利用することで解決</strong>して、後者は <strong>Amazon が提供する ASK-CLI という Alexa スキル管理のためのコマンドラインツールを CI ツールで走らせることで解決</strong>しました。</p><h3>ローカルで Alexa スキルを開発する</h3><p>ローカルで Alexa スキルを動作確認したいと思っている人は多いだろうなと思い、ネット上で記事を漁っていると、やはり同じことを考えている人がちょこちょこいるようです。書かれたのが 2016 年 3 月と少し古いですが、ローカルで Alexa スキルを開発するための詳しい手順が書かれた <a href="https://www.bignerdranch.com/" target="_blank" rel="external">Big Nerd Ranch</a> さんによる <a href="https://www.bignerdranch.com/blog/developing-alexa-skills-locally-with-nodejs-implementing-an-intent-with-alexa-app-and-alexa-app-server/" target="_blank" rel="external">Developing Alexa Skills Locally with Node.js: Implementing an Intent with Alexa-app and Alexa-app-server</a> という記事を見つけました。</p><h4>alexa-app</h4><p><a href="https://github.com/alexa-js/alexa-app" target="_blank" rel="external">alexa-app</a> は、Alexa スキルを開発するためのサードパーティ製のフレームワークです。基本機能としては Alexa からの JSON リクエストを簡単に扱うための API や Alexa へ返すレスポンスを簡単に生成するための API を提供してくれます。実装が少し楽になるにはなるのですが、ただそれだけのメリットだと、サードパーティ製ということもあり将来的なメンテナンスとか考慮すると使うのを躊躇するところです。しかし、これを使いたく一番大きな理由は、今回の課題である「ローカルでのスキル・テスト」と「スキル設定と Lambda Function の継続的インテグレーション」を実現するために必要な次の 2 つの機能を提供してくれるからです。</p><ul><li>実装したスキルを Express にも連結できる</li><li>Intent と Sample Utterance もフレームワークで管理できる</li></ul><h4>スキルを Express アプリとしてテスト可能</h4><p>実機である Alexa 端末から Intent 処理のリクエストを AWS Lambda で受ける必要があるので、alexa-app で実装したスキルを AWS Lambda のハンドラとして連結することは当然可能ですが、このフレームワークは同じ実装コードを任意の Express サーバに接続することも可能です。これで Alexa スキルを Express アプリのようにテストできます。</p><p>たとえば簡単な Alexa スキルを alexa-app で書いてみます。</p><p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> alexa = <span class="built_in">require</span>(<span class="string">'alexa-app'</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> alexa.app(<span class="string">'sample-alexa-skill'</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">LaunchRequest</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> prompt = <span class="string">'人気の番組は何？、と訊いてください'</span>;</div><div class="line"></div><div class="line">  res</div><div class="line">    .say(prompt)</div><div class="line">    .reprompt(prompt)</div><div class="line">    .shouldEndSession(<span class="literal">false</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">app.launch(LaunchRequest);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = app;</div></pre></td></tr></table></figure></p><p>これは「Alexa、AbemaTV を開いて」と話しかけたときに Alexa に「人気の番組は何？、と訊いてください」と答えさせる処理を alexa-app で書いたものです。このテストを Jasmine で書くと：</p><p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">'supertest'</span>);</div><div class="line"><span class="keyword">const</span> app = <span class="built_in">require</span>(<span class="string">'./app'</span>);</div><div class="line"></div><div class="line">describe(<span class="string">'Sample Alexa Skill'</span>, () =&gt; &#123;</div><div class="line">  <span class="keyword">var</span> server;</div><div class="line"></div><div class="line">  beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="comment">// alexa-app で書いたスキルを任意の Express アプリと接続する</span></div><div class="line">    <span class="keyword">const</span> expressApp = express();</div><div class="line">    app.express(&#123;</div><div class="line">      expressApp,</div><div class="line">      debug: <span class="literal">true</span>,</div><div class="line">      checkCert: <span class="literal">false</span>,</div><div class="line">    &#125;);</div><div class="line">    server = expressApp.listen(<span class="number">3000</span>);</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  afterEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    server.close();</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  it(<span class="string">'responds to a launch intent'</span>, () =&gt; &#123;</div><div class="line">    <span class="keyword">return</span> request(server)</div><div class="line">      .post(<span class="string">'/sample-alexa-skill'</span>)</div><div class="line">      .send(&#123;</div><div class="line">        request: &#123;</div><div class="line">          type: <span class="string">'LaunchRequest'</span>,</div><div class="line">        &#125;</div><div class="line">      &#125;)</div><div class="line">      .expect(<span class="number">200</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">const</span> actual = res.body.response.outputSpeech.ssml;</div><div class="line">        <span class="keyword">const</span> expected = <span class="string">'&lt;speak&gt;人気の番組は何？、と訊いてください&lt;/speak&gt;'</span>; </div><div class="line">        <span class="keyword">return</span> expect(actual).toBe(expected);;</div><div class="line">      &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p><code>const app = require('./app');</code> で読み込んでいるのが alexa-app のインスタンスです。これを Express に接続することで <a href="https://github.com/visionmedia/supertest" target="_blank" rel="external">SuperTest</a> などを使って通常の Express HTTP サーバをテストするのと同じ感覚でテストを書くことができます。</p><p>一点、注意なのですが、alexa-app インスタンスはそのままだと AWS Lambda に接続できないので、別途 <code>index.js</code> などのエントリーポイントを作成して以下のようにハンドラに渡すようにしておきます。</p><p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports.handler = <span class="built_in">require</span>(<span class="string">'./app'</span>).lambda();</div></pre></td></tr></table></figure></p><h4>alexa-app-server でデバッグ</h4><p>alexa-app の Express 用のインターフェースを利用すればローカルでのデバッグ作業もかなり楽になります。</p><p>任意のリクエストに対するデバッグを行うときに、毎回リクエストを生成するコードを書くのは手間です。そこで alexa-app で書いたスキル用の Web サーバ <a href="https://github.com/alexa-js/alexa-app-server" target="_blank" rel="external">alexa-app-server</a> を使うと Web ブラウザから GUI で簡単にリクエストを生成できます。</p><p><img src="/images/alexa-skill-development-efficiency/alexa-app-server.png" alt="alexa-app-server のスクリーンショット"></p><p>alexa-app-server の設定は簡単です。まずプロジェクトに alexa-app-server を <code>npm</code> か <code>yarn</code> でインストールします。</p><p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yarn add alexa-app-server</div></pre></td></tr></table></figure></p><p>プロジェクトのルート・ディレクトリ直下に <code>apps</code> というディレクトリを作成して、そこに作成した alexa-app アプリのプロジェクトを移動します。（シンボリックリンクでも構いません。）</p><p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mkdir apps &amp;&amp; mv ./somewhere/sample-alexa-skill apps</div></pre></td></tr></table></figure></p><p>alexa-app-server は alexa-app インスタンスのモジュールを探すときに <code>package.json</code> の <code>main</code> プロパティの値をパスとして確認します。もしプロジェクトに <code>package.json</code> がない場合や <code>main</code> プロパティの値が alexa-app インスタンスのファイル・パスを指していない場合は変更します。</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  ...</div><div class="line">  "main": "app.js",</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>サーバの設定を記述します。alexa-app-server をインストールした方のプロジェクトのルート・ディレクトリに <code>index.js</code> という名前でファイルを作成し次のように記述します。</p><p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> AlexaAppServer = <span class="built_in">require</span>(<span class="string">'alexa-app-server'</span>);</div><div class="line"></div><div class="line">AlexaAppServer.start(&#123;</div><div class="line">  server_root: __dirname,     <span class="comment">// サーバ・ルートへのパス</span></div><div class="line">  public_html: <span class="string">'public_html'</span>, <span class="comment">// 静的コンテンツ</span></div><div class="line">  app_dir: <span class="string">'apps'</span>,            <span class="comment">// alexa-app を置くディレクトリ。複数の alexa-app アプリを置くことができます</span></div><div class="line">  app_root: <span class="string">'/alexa/'</span>,        <span class="comment">// サービスのルート。これ以下に各 alexa-app のエンドポイントが作られる</span></div><div class="line">  port: <span class="number">8080</span>                  <span class="comment">// 使用するポート</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>保存したら起動してみます。</p><p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ node index.js</div></pre></td></tr></table></figure></p><p><a href="http://localhost:8080/alexa/sample-alexa-skill" target="_blank" rel="external">http://localhost:8080/alexa/sample-alexa-skill</a> にアクセスすると自分が作ったスキル向けの JSON リクエストを生成できるインターフェースが表示されます。ここでスキルに実装済のインテントをプルダウンで設定したり任意の値を入力できるので、ローカルで効率的にスキルをデバッグすることが可能です。</p><p><img src="/images/alexa-skill-development-efficiency/alexa-app-server-debug.png" alt="alexa-app-server でのデバッグ"></p><h3>多言語対応</h3><p>スキルを多言語対応する場合、Alexa からのリクエストにロケール情報が入っているので、それを使って地域／言語別にレスポンスを変更できます。</p><p><img src="/images/alexa-skill-development-efficiency/alexa-app-server-locale.png" alt="alexa-app-server のロケール別のリクエスト切り替え"></p><p>alexa-app-server はロケール別のリクエスト切り替えがとても簡単なため多言語対応に関しても重宝します。通常、ロケールを頻繁に変更しながらのテストは大変です。Amazon Echo などの端末は <a href="https://alexa.amazon.com/" target="_blank" rel="external">Alexa の管理コンソール</a> での登録時にしかロケールを変更できないように見えますし、Amazon 開発者コンソールのシミュレータも言語ごとに分けられているため、ロケールを頻繁に変更するテストには向いていません。</p><p>alexa-app-server のインターフェース上、まだ <code>ja-JP</code> ロケールがオプションから選択できません。<a href="https://github.com/ygoto3/alexa-app-server.git#feature/ja-jp" target="_blank" rel="external">フォーク</a>して <code>ja-JP</code> をオプションに追加したものを使っています。こちら<a href="https://github.com/alexa-js/alexa-app-server/pull/100" target="_blank" rel="external">プル・リクエスト中</a>。</p><h3>継続的インテグレーション</h3><p>alexa-app を使うことで Express に連結してローカルで擬似的にテスト・デバッグできる範囲が広がり、複数人での平行チーム開発も可能になりました。しかし、チームで平行開発できるようになると今度はインテグレーションが問題になってきます。特に Alexa スキルの場合、Lambda Function とは別にスキル設定を Amazon 開発者コンソールで管理しているので、Lambda Function 用の最新コードにスキル設定が一致しないことが発生します。そういった不一致を発生させないために：</p><ul><li>スキル情報と Lambda Function の最新コードを常に同期する</li><li>同期タイミングは開発コードがメイン・レポジトリへ統合するタイミング</li></ul><p>などが実現できれば嬉しいです。前者については、スキル情報とスキルに紐づいた Lambda をまとめて操作できるコマンドラインツールの <a href="https://developer.amazon.com/docs/smapi/ask-cli-command-reference.html" target="_blank" rel="external">Alexa Skill Kit Command-line Interface (ASK CLI)</a> を使うことで同期を取ることができます。後者については、ソースコードのバージョン管理に Git/GitHub を使っているのであれば、GitHub との連携が簡単な CI ツールで ASK CLI を走らせれば実現できます。本記事では、CircleCI を使います。</p><h4>ASK CLI を使うための認証</h4><p>ASK CLI を使うために Amazon Developer アカウント と AWS ユーザーの認証が必要です。今回は AWS Lambda 用のコードも含めてスキル管理したいので、ASK CLI から AWS を使える状態にする必要があります。</p><h4>AWS CLI のユーザー認証</h4><p>ASK CLI の認証時に AWS の認証情報を紐づけたいので、先に AWS ユーザーを認証します。（AWS CLI を既に使ったことがある方で認証済のプロファイルがある場合は、ここは読み飛ばしていただくのが良いでしょう。）</p><p>まず <a href="https://github.com/aws/aws-cli" target="_blank" rel="external">AWS CLI</a> をインストールします。Python パッケージで提供されているので、 <code>pip</code> などでインストールします。</p><p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pip install awscli</div></pre></td></tr></table></figure></p><p>インストール完了後、 <code>which aws</code> などでパスが表示されることを確認できたら、次に AWS のユーザー認証を行います。AWS のアカウントがまだない場合は <a href="https://aws.amazon.com/jp/about-aws/" target="_blank" rel="external">アマゾン ウェブ サービス（AWS）</a> で作成します。AWS のアカウントを持っている場合は、ログインして <a href="https://console.aws.amazon.com/iam/home#/home" target="_blank" rel="external">IAM Management Console</a> サービスの <a href="https://console.aws.amazon.com/iam/home#/users" target="_blank" rel="external">Users</a> で AWS CLI 用のユーザーを作成します。作成時に表示される <strong>AWS Access Key ID</strong> と <strong>AWS Secret Access Key</strong> をメモしておきます。</p><p>Alexa スキルに紐づける Lambda Function を作成したり、IAM の操作も許可する必要があるので、作成したユーザーに下記のポリシーを追加します。</p><p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"Version"</span>: <span class="string">"2012-10-17"</span>,</div><div class="line">    <span class="attr">"Statement"</span>: [</div><div class="line">        &#123;</div><div class="line">            <span class="attr">"Sid"</span>: <span class="string">"Stmt000001"</span>,</div><div class="line">            <span class="attr">"Effect"</span>: <span class="string">"Allow"</span>,</div><div class="line">            <span class="attr">"Action"</span>: [</div><div class="line">                <span class="string">"iam:CreateRole"</span>,</div><div class="line">                <span class="string">"iam:AttachRolePolicy"</span>,</div><div class="line">                <span class="string">"iam:PassRole"</span>,</div><div class="line">                <span class="string">"lambda:CreateFunction"</span>,</div><div class="line">                <span class="string">"lambda:AddPermission"</span>,</div><div class="line">                <span class="string">"lambda:GetFunction"</span>,</div><div class="line">                <span class="string">"lambda:UpdateFunctionCode"</span></div><div class="line">            ],</div><div class="line">            <span class="attr">"Resource"</span>: [</div><div class="line">                <span class="string">"*"</span></div><div class="line">            ]</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>作成した AWS CLI 用のユーザーで AWS CLI を認証します。認証は <code>aws configure</code> コマンドで行います。</p><p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ aws configure</div><div class="line">AWS Access Key ID [None]: メモした AWS Access Key ID</div><div class="line">AWS Secret Access Key [None]: メモした AWS Secret Access Key</div><div class="line">Default region name [None]: us-east-1</div><div class="line">Default output format [None]:</div></pre></td></tr></table></figure></p><p><code>Default region name</code> ですが、<a href="https://developer.amazon.com/docs/custom-skills/host-a-custom-skill-as-an-aws-lambda-function.html" target="_blank" rel="external">Alexa Skills Kit のドキュメント</a>に以下のように書いてあり、限られたリージョンでしか AWS Lambda の Alexa Skills Kit のサポートをしていないので注意が必要です。</p><blockquote><p>Lambda functions for Alexa skills can be hosted in either the US East (N. Virginia) or EU (Ireland) region. These are the only regions the Alexa Skills Kit supports.</p></blockquote><p>これで AWS CLI が認証できました。認証情報が <code>~/.aws/config</code> と <code>~/.aws/credentials</code> に保存されていれば OK です。</p><p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ cat ~/.aws/config</div><div class="line">[default]</div><div class="line">region = us-east-1</div></pre></td></tr></table></figure></p><p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ cat ~/.aws/credentials</div><div class="line">[default]</div><div class="line">aws_access_key_id = XXXX</div><div class="line">aws_secret_access_key = XXXXXXXX</div></pre></td></tr></table></figure></p><h4>ASK CLI のアカウント認証</h4><p>次に ASK CLI を Amazon Developer アカウントに認証します。 <code>ask init</code> コマンドを使って AWS CLI でユーザー認証したプロファイルと紐づけながら Amazon Developer アカウントへの認証手順が進みます。</p><p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ ask init</div><div class="line">-------------------- Initialize CLI --------------------</div><div class="line">Setting up ask profile: [default]</div><div class="line">? Please choose one from the following AWS profiles <span class="keyword">for</span> skill<span class="string">'s Lambda function deployment.</span></div><div class="line"><span class="string"> (Use arrow keys)</span></div><div class="line"><span class="string">❯ default</span></div><div class="line"><span class="string">  ──────────────</span></div><div class="line"><span class="string">  skip AWS credential for ask-cli</span></div><div class="line"><span class="string">  ──────────────</span></div></pre></td></tr></table></figure></p><p>初めて実行する場合は下記のようなダイアログが表示されますが、既にデフォルトのプロファイルがある場合は、新規プロファイルを作成するのか、既存プロファイルを上書くのかを尋かれるダイアログが表示されます。</p><p>ここで紐づけたい AWS のプロファイルを選択します。例では、先程 <code>aws configure</code> でユーザー認証したときプロファイル指定をしていないので、 <code>default</code> という名前で保存されているので、 <code>default</code> を選択します。</p><p>Web ブラウザが起動し、「Login with Amazon」のページで表示されるのでログインします。</p><p><img src="/images/alexa-skill-development-efficiency/amazon-sign-in.png" alt="Login with Amazon のスクリーンショット"></p><p>次に権限の確認をされるので、問題なければ「Okay」ボタンをクリックします。</p><p><img src="/images/alexa-skill-development-efficiency/amazon-consent.png" alt="Amazon 権限確認画面のスクリーンショット"></p><p>無事ログインが成功すると、Sign in was successful. Close this browser and return to the command line interface. というメッセージでブラウザを閉じろと言われるので閉じます。</p><p>ASK CLI の認証情報に関しては <code>~/.ask/cli_config</code> に保存されています。</p><p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$ cat ~/.ask/cli_config</div><div class="line">&#123;</div><div class="line">  <span class="string">"profiles"</span>: &#123;</div><div class="line">    <span class="string">"default"</span>: &#123;</div><div class="line">      <span class="string">"aws_profile"</span>: <span class="string">"default"</span>,</div><div class="line">      <span class="string">"token"</span>: &#123;</div><div class="line">        <span class="string">"access_token"</span>: “XXXXXXX”,</div><div class="line">        <span class="string">"refresh_token"</span>: “XXXXXXX”,</div><div class="line">        <span class="string">"token_type"</span>: <span class="string">"bearer"</span>,</div><div class="line">        <span class="string">"expires_in"</span>: 3600,</div><div class="line">        <span class="string">"expires_at"</span>: <span class="string">"20XX-XX-XXTXX:XX:XX.XXXZ"</span></div><div class="line">      &#125;,</div><div class="line">      <span class="string">"vendor_id"</span>: <span class="string">"XXXXXXXXXXXXXX"</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4>ASK プロジェクトを作成</h4><p>ユーザー認証が通ったので、ASK CLI でスキル全体を管理できるようにプロジェクトを新規作成します。</p><p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ask new --skill-name sample-alexa-skill --lambda-name sample-alexa-skill</div></pre></td></tr></table></figure></p><p>これで新規の Alexa スキル・プロジェクトの雛形が作成されます。tree コマンドを実行すると次のようなディレクトリ・ツリーが表示されるはずです。</p><p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ tree</div><div class="line">.</div><div class="line">└── sample-alexa-skill</div><div class="line">    ├── lambda</div><div class="line">    │   └── custom</div><div class="line">    │       ├── index.js</div><div class="line">    │       ├── node_modules</div><div class="line">    │       │   └── ...</div><div class="line">    │       ├── package-lock.json</div><div class="line">    │       └── package.json</div><div class="line">    ├── models</div><div class="line">    │   └── en-US.json</div><div class="line">    └── skill.json</div></pre></td></tr></table></figure></p><p>この中で重要な各要素の役割はざっくりと次の通りです。</p><table><thead><tr><th>要素</th><th>役割</th></tr></thead><tbody><tr><td>lambda</td><td>Lambda 用のコードを格納するディレクトリ</td></tr><tr><td>models</td><td>Intent Schema や Sample Utterance などを格納するディレクトリ</td></tr><tr><td>skill.json</td><td>スキルの申請に必要な情報を記述するファイル</td></tr></tbody></table><p>雛形ができたので、スキルに必要な情報を設定していきます。</p><p>まず Alexa は Apple の App Store などと同様にスキルを公開するのに申請が必要なので、<code>skill.json</code> にこのスキルの名前やこのスキルを使うためのフレーズ例など、申請に必要な情報を記述します。</p><p>次に <code>lambda</code> ディレクトリには、今回 alexa-app で作った AWS Lambda 用モジュールを格納します。生成された <code>lambda</code> ディレクトリ以下の雛形は必要ないので <code>custom</code> ディレクトリごと削除してしまい、代わりに AWS Lambda 用モジュールのディレクトリを <code>custom</code> という名前でここに移動します。</p><p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ rm -rf lambda/custom</div><div class="line">$ mv somewhere/sample-alexa-skill lambda/custom</div></pre></td></tr></table></figure></p><p>最後に <code>models</code> ディレクトリにスキルの Intent のデータ構造を示した Intent Schema と Sample Utterance の情報を格納する必要があるのですが、これらは alexa-app フレームワーク上の実装コード内に記述されています。なので、フレームワークの API を使って JSON ファイルとして出力するスクリプトを書きます。</p><p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> app = <span class="built_in">require</span>(<span class="string">'../index'</span>);</div><div class="line"></div><div class="line"><span class="comment">// alexa-app で実装したアプリ・オブジェクトは schemas.askcli で</span></div><div class="line"><span class="comment">// ASK プロジェクト用の Interaction Model JSON を出力できる</span></div><div class="line"><span class="comment">// 引数に Invocation Name 呼び出し名を渡す</span></div><div class="line"><span class="keyword">const</span> interactionModel = app.schemas.askcli(<span class="string">'Sample Alexa Skill'</span>);</div><div class="line"></div><div class="line"><span class="comment">// JSON を標準出力に流します</span></div><div class="line">process.stdout.write(interactionModel);</div></pre></td></tr></table></figure></p><p>このスクリプトを実行した出力をロケール ID をファイル名にした JSON にパイプします。日本語であれば <code>models/ja-JP.json</code> にパイプします。</p><p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ node ./scripts/gen-interaction-model.js &gt; ./models/ja-JP.json</div></pre></td></tr></table></figure></p><p><code>ja-JP.json</code> の中身はこんな感じです。</p><p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">   <span class="attr">"interactionModel"</span>: &#123;</div><div class="line">      <span class="attr">"languageModel"</span>: &#123;</div><div class="line">         <span class="attr">"intents"</span>: [</div><div class="line">            &#123;</div><div class="line">               <span class="attr">"name"</span>: <span class="string">"SayNumber"</span>,</div><div class="line">               <span class="attr">"samples"</span>: [</div><div class="line">                  <span class="string">"数字の &#123;number&#125; を言って"</span></div><div class="line">               ],</div><div class="line">               <span class="attr">"slots"</span>: [</div><div class="line">                  &#123;</div><div class="line">                     <span class="attr">"name"</span>: <span class="string">"number"</span>,</div><div class="line">                     <span class="attr">"type"</span>: <span class="string">"AMAZON.NUMBER"</span>,</div><div class="line">                     <span class="attr">"samples"</span>: []</div><div class="line">                  &#125;</div><div class="line">               ]</div><div class="line">            &#125;</div><div class="line">         ],</div><div class="line">         <span class="attr">"types"</span>: [],</div><div class="line">         <span class="attr">"invocationName"</span>: <span class="string">"Sample Alexa Skill"</span></div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>多言語対応する場合は、必要な分、別のロケール ID の JSON ファイルにパイプします。ロケール ID をファイル名にした JSON ファイルを複数 <code>models</code> ディレクトリに入れておくことにより、ASK CLI が言語別のスキル情報として登録してくれます。ここでは日本語と英語に対応するために <code>ja-JS.json</code> とは別に <code>en-US.json</code> を書き出します。</p><p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ APP_LOCALE=en-US node ./scripts/gen-interaction-model.js &gt; ./models/en-US.json</div></pre></td></tr></table></figure></p><p>ここでは、環境変数 <code>APP_LOCALE</code> に応じて Sample Utterance が切り替わるように alexa-app の Intent を実装しました。 <code>en-US.json</code> の Sample Utterance 部分などが差し替わって出力されます。</p><p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">   <span class="attr">"interactionModel"</span>: &#123;</div><div class="line">      <span class="attr">"languageModel"</span>: &#123;</div><div class="line">         <span class="attr">"intents"</span>: [</div><div class="line">            &#123;</div><div class="line">               <span class="attr">"name"</span>: <span class="string">"SayNumber"</span>,</div><div class="line">               <span class="attr">"samples"</span>: [</div><div class="line">                  <span class="string">"say the number &#123;number&#125;"</span></div><div class="line">               ],</div><div class="line">               <span class="attr">"slots"</span>: [</div><div class="line">                  &#123;</div><div class="line">                     <span class="attr">"name"</span>: <span class="string">"number"</span>,</div><div class="line">                     <span class="attr">"type"</span>: <span class="string">"AMAZON.NUMBER"</span>,</div><div class="line">                     <span class="attr">"samples"</span>: []</div><div class="line">                  &#125;</div><div class="line">               ]</div><div class="line">            &#125;</div><div class="line">         ],</div><div class="line">         <span class="attr">"types"</span>: [],</div><div class="line">         <span class="attr">"invocationName"</span>: <span class="string">"Sample Alexa Skill"</span></div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>言語に関する設定は <code>models</code> ディレクトリのほかに <code>skill.json</code> ファイルにも記述する必要があるので、必要に応じてロケール情報を追加しましょう。</p><p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"skillManifest"</span>: &#123;</div><div class="line">    <span class="attr">"publishingInformation"</span>: &#123;</div><div class="line">      <span class="attr">"locales"</span>: &#123;</div><div class="line">        <span class="attr">"en-US"</span>: &#123;</div><div class="line">          <span class="attr">"summary"</span>: <span class="string">"Sample Alexa Skill's Short Description"</span>,</div><div class="line">          <span class="attr">"examplePhrases"</span>: [</div><div class="line">            <span class="string">"Alexa open Sample Alexa Skill"</span>,</div><div class="line">            <span class="string">"Alexa tell Sample Alexa Skill say the number 1"</span>,</div><div class="line">            <span class="string">"Alexa tell Sample Alexa Skill say the number 3"</span></div><div class="line">          ],</div><div class="line">          <span class="attr">"name"</span>: <span class="string">"sample-alexa-skill"</span>,</div><div class="line">          <span class="attr">"description"</span>: <span class="string">"Sample Alexa Skill's Full Description"</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">"ja-JP"</span>: &#123;</div><div class="line">          <span class="attr">"summary"</span>: <span class="string">"Sample Alexa Skill の説明"</span>,</div><div class="line">          <span class="attr">"examplePhrases"</span>: [</div><div class="line">            <span class="string">"アレクサ、Sample Alexa Skill を開いて"</span>,</div><div class="line">            <span class="string">"アレクサ、Sample Alexa Skill で数字の1を言って"</span>,</div><div class="line">            <span class="string">"アレクサ、Sample Alexa Skill で数字の3を言って"</span></div><div class="line">          ],</div><div class="line">          <span class="attr">"name"</span>: <span class="string">"sample-alexa-skill"</span>,</div><div class="line">          <span class="attr">"description"</span>: <span class="string">"Sample Alexa Skill の詳細な説明"</span></div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">"isAvailableWorldwide"</span>: <span class="literal">true</span>,</div><div class="line">      <span class="attr">"testingInstructions"</span>: <span class="string">"Sample Alexa Skill's Testing Instructions."</span>,</div><div class="line">      <span class="attr">"category"</span>: <span class="string">"EDUCATION_AND_REFERENCE"</span>,</div><div class="line">      <span class="attr">"distributionCountries"</span>: []</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">"apis"</span>: &#123;</div><div class="line">      <span class="attr">"custom"</span>: &#123;</div><div class="line">        <span class="attr">"endpoint"</span>: &#123;</div><div class="line">          <span class="attr">"sourceDir"</span>: <span class="string">"lambda/custom"</span></div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">"manifestVersion"</span>: <span class="string">"1.0"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>これで alexa-app で実装した多言語対応スキルを ASK プロジェクトとして管理できるようになりました。</p><h4>Alexa スキルをデプロイする</h4><p>作成した ASK プロジェクトを Amazon Echo などの実機で試すためには、Alexa スキルとしてデプロイする必要があります。ASK CLI の <code>deploy</code> コマンドを使うだけです。</p><p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ask deploy</div></pre></td></tr></table></figure></p><p>Alexa スキルがデプロイされたことを確認するため、<a href="https://developer.amazon.com/" target="_blank" rel="external">Amazon 開発者コンソール</a> に行き、Alexa Skills Kit のスキル・リストに <code>sample-alexa-skill</code> が登録されているか確認します。</p><p><img src="/images/alexa-skill-development-efficiency/amazon-apps-developer-portal.png" alt="Alexa Skills Kit のスキル・リスト"></p><h4>GitHub 連携で CI</h4><p>ASK CLI で Alexa スキルをデプロイできるところまで来たので、あとはこの手順を CI ツールに設定すれば継続的にテストしたりデプロイしたりすることができます。もちろん CI ツールは何でも構いませんが、ここでは GitHub に簡単に連携ができる CircleCI を使って、GitHub Flow ベースで単純で DevOps な感じの運用ができればいいなというイメージ。</p><h4>デプロイ時に必要な処理の依存関係を Makefile にまとめる</h4><p>CircleCI に処理を書いていく前に、スクリプトの実行手順に若干の依存関係ができてしまったので、明示的に手順を示す意味で Makefile にまとめます。</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.PHONY: interaction_model</div><div class="line">interaction_model:</div><div class="line">node ./lambda/custom/scripts/gen-interaction-model.sh &gt; models/ja-JS.json</div><div class="line">APP_LOCALE=en-US node ./lambda/custom/scripts/gen-interaction-model.sh &gt; models/en-US.json</div><div class="line"></div><div class="line">.PHONY: deploy</div><div class="line">deploy: interaction_model</div><div class="line">ask deploy</div></pre></td></tr></table></figure></p><p>先程も説明した通り、多言語対応する場合は、環境変数別に <code>gen-interaction-model.sh</code> を走らせて言語別の Model を書き出す処理もまとめておきます。</p><h4>CircleCI にインテグレーション／デプロイ処理を追加する</h4><p>デプロイ時に必要な処理もまとまったので、CircleCI プロジェクト用にインテグレーション処理とデプロイ処理を書いていきます。ASK プロジェクト・ディレクトリ直下に <code>.circleci/config.yml</code> ファイルを作り、以下のような YAML でジョブを記述します。</p><p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div></pre></td><td class="code"><pre><div class="line"><span class="attr">defaults:</span> <span class="meta">&amp;defaults</span></div><div class="line"><span class="attr">  working_directory:</span> <span class="string">~/repo</span></div><div class="line"><span class="attr">  docker:</span></div><div class="line">      <span class="comment"># Use the same Node version as that of AWS Lambda's</span></div><div class="line"><span class="attr">    - image:</span> <span class="string">circleci/node:6.10</span></div><div class="line"></div><div class="line"><span class="attr">version:</span> <span class="number">2</span></div><div class="line"><span class="attr">jobs:</span></div><div class="line"><span class="attr">  build:</span></div><div class="line">    <span class="string">&lt;&lt;:</span> <span class="meta">*defaults</span></div><div class="line"><span class="attr">    steps:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">checkout</span></div><div class="line"></div><div class="line"><span class="attr">      - restore_cache:</span></div><div class="line"><span class="attr">          key:</span> <span class="string">v1-dependencies-&#123;&#123;</span> <span class="string">checksum</span> <span class="string">"package.json"</span> <span class="string">&#125;&#125;</span></div><div class="line"></div><div class="line"><span class="attr">      - restore_cache:</span></div><div class="line"><span class="attr">          key:</span> <span class="string">v1-dependencies-&#123;&#123;</span> <span class="string">checksum</span> <span class="string">"lambda/custom/package.json"</span> <span class="string">&#125;&#125;</span></div><div class="line"></div><div class="line"><span class="attr">      - run:</span></div><div class="line"><span class="attr">          name:</span> <span class="string">Install</span> <span class="string">dependencies</span></div><div class="line"><span class="attr">          command:</span> <span class="string">yarn</span> <span class="string">install</span></div><div class="line"></div><div class="line"><span class="attr">      - run:</span></div><div class="line"><span class="attr">          name:</span> <span class="string">Install</span> <span class="string">dependencies</span> <span class="string">for</span> <span class="string">Lambda</span> <span class="string">function</span></div><div class="line"><span class="attr">          working_directory:</span> <span class="string">lambda/custom</span></div><div class="line"><span class="attr">          command:</span> <span class="string">yarn</span> <span class="string">install</span></div><div class="line"></div><div class="line"><span class="attr">      - save_cache:</span></div><div class="line"><span class="attr">          paths:</span></div><div class="line"><span class="bullet">            -</span> <span class="string">node_modules</span></div><div class="line"><span class="attr">          key:</span> <span class="string">v1-dependencies-&#123;&#123;</span> <span class="string">checksum</span> <span class="string">"package.json"</span> <span class="string">&#125;&#125;</span></div><div class="line"></div><div class="line"><span class="attr">      - save_cache:</span></div><div class="line"><span class="attr">          paths:</span></div><div class="line"><span class="bullet">            -</span> <span class="string">lambda/custom/node_modules</span></div><div class="line"><span class="attr">          key:</span> <span class="string">v1-dependencies-&#123;&#123;</span> <span class="string">checksum</span> <span class="string">"lambda/custom/package.json"</span> <span class="string">&#125;&#125;</span></div><div class="line"></div><div class="line"><span class="attr">      - persist_to_workspace:</span></div><div class="line"><span class="attr">          root:</span> <span class="string">.</span></div><div class="line"><span class="attr">          paths:</span></div><div class="line"><span class="bullet">            -</span> <span class="string">node_modules</span></div><div class="line"><span class="bullet">            -</span> <span class="string">lambda/custom/node_modules</span></div><div class="line"></div><div class="line"><span class="attr">  test:</span></div><div class="line">    <span class="string">&lt;&lt;:</span> <span class="meta">*defaults</span></div><div class="line"><span class="attr">    steps:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">checkout</span></div><div class="line"><span class="attr">      - attach_workspace:</span></div><div class="line"><span class="attr">          at:</span> <span class="string">.</span></div><div class="line"></div><div class="line"><span class="attr">      - run:</span></div><div class="line"><span class="attr">          name:</span> <span class="string">Run</span> <span class="string">tests</span></div><div class="line"><span class="attr">          command:</span> <span class="string">|</span></div><div class="line"><span class="string">            yarn test</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string"></span><span class="attr">      - run:</span></div><div class="line"><span class="attr">          name:</span> <span class="string">Report</span> <span class="string">code</span> <span class="string">coverage</span></div><div class="line"><span class="attr">          command:</span> <span class="string">$(yarn</span> <span class="string">bin)/codecov</span></div><div class="line"></div><div class="line"><span class="attr">  deploy:</span></div><div class="line">    <span class="string">&lt;&lt;:</span> <span class="meta">*defaults</span></div><div class="line"><span class="attr">    steps:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">checkout</span></div><div class="line"><span class="attr">      - attach_workspace:</span></div><div class="line"><span class="attr">          at:</span> <span class="string">.</span></div><div class="line"></div><div class="line"><span class="attr">      - deploy:</span></div><div class="line"><span class="attr">          name:</span> <span class="string">Deploy</span> <span class="string">Skill</span></div><div class="line"><span class="attr">          command:</span> <span class="string">|</span></div><div class="line"><span class="string">            sudo apt-get -y -qq install python3-pip gettext</span></div><div class="line"><span class="string">            sudo pip3 install awscli</span></div><div class="line"><span class="string">            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID</span></div><div class="line"><span class="string">            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY</span></div><div class="line"><span class="string">            aws configure set default.region us-east-1</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">            sudo npm i ask-cli -g</span></div><div class="line"><span class="string">            mkdir -p ~/.ask</span></div><div class="line"><span class="string">            echo $&#123;ASK_CLI_CONFIG&#125; | base64 -d &gt; ~/.ask/cli_config</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">            make deploy </span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string"></span><span class="attr">workflows:</span></div><div class="line"><span class="attr">  version:</span> <span class="number">2</span></div><div class="line"><span class="attr">  test_and_deploy:</span></div><div class="line"><span class="attr">    jobs:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">build</span></div><div class="line"><span class="attr">      - test:</span></div><div class="line"><span class="attr">          requires:</span></div><div class="line"><span class="bullet">            -</span> <span class="string">build</span></div><div class="line"><span class="attr">      - deploy:</span></div><div class="line"><span class="attr">          requires:</span></div><div class="line"><span class="bullet">            -</span> <span class="string">build</span></div><div class="line"><span class="bullet">            -</span> <span class="string">test</span> </div><div class="line"><span class="attr">          filters:</span></div><div class="line"><span class="attr">            branches:</span></div><div class="line"><span class="attr">              only:</span> <span class="string">master</span></div></pre></td></tr></table></figure></p><p>テストの実行やらコード・カバレッジの取得やらしていますが、前述したようにデプロイに関しては</p><ul><li>スキル情報と Lambda Function の最新コードを常に同期する</li><li>同期タイミングは開発コードがメイン・レポジトリへ統合するタイミング</li></ul><p>のように自動化したかったので、CircleCI で GitHub の <code>master</code> ブランチへのマージのタイミングで下記 3 点の処理を実行するようにタスクを記述しています。</p><ul><li>AWS CLI のインストールおよび設定</li><li>ASK CLI のインストールおよび設定</li><li>スキル設定と AWS Lambda コードのデプロイ</li></ul><p>ローカル同様、CircleCI 上でも AWS と ASK の認証が必要です。それぞれ CircleCI 上でインストールして認証情報を設定します。</p><p>まず ASK CLI で AWS Lambda をデプロイするために必要なので AWS CLI をインストールします。AWS CLI を認証するために環境変数 <code>AWS_ACCESS_KEY_ID</code> と <code>AWS_SECRET_ACCESS_KEY</code> を参照しています。なので、CircleCI 側の環境変数に両者を登録しておきます。</p><p>ASK CLI に関しては、先程の認証情報が <code>~/.ask/cli_config</code> に記述してあるので Base64 にエンコードしてクリップボードにコピーします。Mac 系の OS なら <code>pbcopy</code> できるのでこんな感じです。</p><p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ base64 ~/.ask/cli_config | pbcopy</div></pre></td></tr></table></figure></p><p>クリップボードの中身を CircleCI 側の環境変数 <code>ASK_CLI_CONFIG</code> として設定します。これで GitHub にホストした <code>master</code> ブランチに変更をマージする度に Amazon 開発者コンソールの Alexa スキル情報と紐づいた AWS Lambda Function コードが最新状態に更新されるようになりました。</p><p>Alexa スキルを実際に公開するためには、スキルを申請して審査を通過する必要があります。ASK CLI は申請もコマンドラインで送信できるので、それも自動化したい人は <code>ask api submit</code> コマンドなど必要な手順を CI プロセスに追加してもいいかもしれません。</p><h3>まとめ</h3><p>Alexa スキルは Web 技術を使って簡単に開発を始めることができます。新しいデバイスなので勝手が掴めず、動作確認等々が大変な部分もあって最初はちょっととまどいましたが、探せば開発を助けるツールの恩恵を受けることができ、少しずつ開発しやすい環境を構築できるようになってるなと感じます。本記事がこれから Alexa スキルを開発をする人の効率化の参考になれば幸いです。</p><p>本記事の内容のサンプルコードは下記に上げてあります。</p><ul><li><a href="https://github.com/ygoto3/sample-alexa-skill" target="_blank" rel="external">ygoto3/sample-alexa-skill</a></li><li><a href="https://github.com/ygoto3/alexa-app-workspace" target="_blank" rel="external">ygoto3/alexa-app-workspace</a></li></ul><h3>参照</h3><ul><li><a href="https://developer.amazon.com/docs/smapi/ask-cli-command-reference.html" target="_blank" rel="external">ASK CLI Command Reference</a></li><li><a href="https://github.com/dblock/alexa-parrot" target="_blank" rel="external">Alexa Parrot</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/alexa-skill-development-efficiency/amazon-echo-devices.jpg&quot; alt=&quot;Amazon Echo&quot;&gt;&lt;/p&gt;
&lt;p&gt;担当している &lt;a href=&quot;https://abema.tv/
      
    
    </summary>
    
      <category term="smart speaker" scheme="https://ygoto3.com/categories/smart-speaker/"/>
    
    
      <category term="Alexa smart speaker VUI AWS" scheme="https://ygoto3.com/tags/Alexa-smart-speaker-VUI-AWS/"/>
    
  </entry>
  
  <entry>
    <title>Web ブラウザで DRM</title>
    <link href="https://ygoto3.com/posts/drm-in-web-browsers/"/>
    <id>https://ygoto3.com/posts/drm-in-web-browsers/</id>
    <published>2016-11-05T23:43:50.000Z</published>
    <updated>2019-02-13T03:11:50.328Z</updated>
    
    <content type="html"><![CDATA[<p>Forkwell さん主催の「<a href="https://forkwell.connpass.com/event/42527/" target="_blank" rel="external">Front Line of Frontend − Forkwell Meetup #2</a>」にて『Web ブラウザで DRM』という内容のお話をさせていただきました。</p><p><iframe src="//www.slideshare.net/slideshow/embed_code/key/ntc8BU2SKqaP0Q" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Forkwell さん主催の「&lt;a href=&quot;https://forkwell.connpass.com/event/42527/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Front Line of Frontend − Forkwell Meet
      
    
    </summary>
    
    
      <category term="DRM HTML5 Media Source Extensions Encrypted Media Extensions CDM PlayReady Widevine FairPlay" scheme="https://ygoto3.com/tags/DRM-HTML5-Media-Source-Extensions-Encrypted-Media-Extensions-CDM-PlayReady-Widevine-FairPlay/"/>
    
  </entry>
  
  <entry>
    <title>リニア放送型動画サービスの Web フロントエンド</title>
    <link href="https://ygoto3.com/posts/web-frontend-engineering-for-linear-video-streaming-service/"/>
    <id>https://ygoto3.com/posts/web-frontend-engineering-for-linear-video-streaming-service/</id>
    <published>2016-10-15T23:58:35.000Z</published>
    <updated>2019-02-13T03:11:50.332Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://developer.abema.io/2016/" target="_blank" rel="external">AbemaTV Developer Conference 2016</a> にて『リニア放送型動画サービスの Web フロントエンド』というお話をさせていただきました。</p><p><iframe src="//www.slideshare.net/slideshow/embed_code/key/JQB0WEFF4JhMnQ" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://developer.abema.io/2016/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AbemaTV Developer Conference 2016&lt;/a&gt; にて『リニア放送型動画サービスの Web フロント
      
    
    </summary>
    
    
      <category term="video" scheme="https://ygoto3.com/tags/video/"/>
    
      <category term="HTML5" scheme="https://ygoto3.com/tags/HTML5/"/>
    
      <category term="streaming" scheme="https://ygoto3.com/tags/streaming/"/>
    
      <category term="HLS" scheme="https://ygoto3.com/tags/HLS/"/>
    
      <category term="MPEG-DASH" scheme="https://ygoto3.com/tags/MPEG-DASH/"/>
    
  </entry>
  
  <entry>
    <title>フロントエンドエンジニアのための生放送と RTMP 通信基礎</title>
    <link href="https://ygoto3.com/posts/live-streaming-and-rtmp-for-frontend-engineers/"/>
    <id>https://ygoto3.com/posts/live-streaming-and-rtmp-for-frontend-engineers/</id>
    <published>2016-10-11T09:05:02.000Z</published>
    <updated>2019-02-13T03:11:50.328Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/live-streaming-and-rtmp-for-frontend-engineers/obs-sc.png" alt="生放送と RTMP 通信基礎"></p><p>前回「<a href="/posts/streaming-technology-basics-for-frontend-engineers/">フロントエンドエンジニアのための動画ストリーミング技術基礎</a>」では HTTP ベースのストリーミング技術に関して勉強会を実施しました。視聴者に映像を届けるためのストリーミング技術に関してのお話でした。</p><p>本記事は、<a href="https://abema.tv/" target="_blank" rel="external">AbemaTV</a> の生放送番組で撮影機材から送られた映像がエンコーダーを介してリアルタイムに放送する部分について勉強会を実施した際の資料です。</p><h2>生放送における動画データの通信</h2><p>AbemaTV では生放送で撮影した動画データのやりとりに <strong>RTMP</strong> というプロトコルを利用しています。</p><p><img src="/images/live-streaming-and-rtmp-for-frontend-engineers/live-streaming.png" alt="生放送の配信構成"></p><h2>RTMP とは</h2><p>RTMP は <strong>Real-Time Message Protocol</strong> の略で、その名前の通りリアルタイムにコミュニケーションを行うためのプロトコルです。Web 業界では Photoshop などでお馴染の <a href="http://www.adobe.com/" target="_blank" rel="external">Adobe Systems</a> 社が開発しています。<a href="http://www.adobe.com/software/flash/about/" target="_blank" rel="external">Adobe Flash Player</a> がメディア配信サーバーとの間で音声や動画などのデータをやりとりするためのストリーミングのためのプロトコルとして開発されました。</p><p><a href="/posts/streaming-technology-basics-for-frontend-engineers/">前回</a>紹介した HLS や MPEG-DASH もストリーミングプロトコルでしたが、RTMP はこれらと異なり、<strong>HTTP ベースではありません</strong>。ですので、HLS や MPEG-DASH のように通常の Web サーバーでコンテンツを配信できるわけではなく、専用の RTMP サーバーが必要になります。</p><p><img src="/images/live-streaming-and-rtmp-for-frontend-engineers/http-and-rtmp.png" alt="RTMP 専用サーバー"></p><h2>HTTP に対する優位性</h2><p>HTTP における通信は必ずクライアントのリクエストから始まります。そのため、動画をストリーミングしようとする際、クライアントはサーバーに対して任意のインターバルで動画のセグメントをリクエストし続ける必要があります。HLS や MPEG-DASH におけるストリーミングはこの方式ですが、クライアントのタイミングで動画データをリクエストするため、本当の意味でのリアルタイム性はありません。動画データを生成しているサーバー側が送信したいタイミングでクライアントにデータをプッシュできる方が遅延が発生することがなく、効率的です。</p><p>それに対して、RTMP におけるデータ通信は持続的に接続した状態で双方向に行われます。そのため、サーバーがクライアントに送信したいタイミングでプッシュ送信することができ、遅延が発生しません。</p><p>また HTTP の場合、HTTP レスポンスヘッダーは冗長で一般的に数百バイトになります。返したいペイロードサイズに対してのオーバーヘッドを大きくしてしまっています。それに対し、RTMP パケットのヘッダーは固定長で 12 / 8 / 4 / 1 バイトのうちどれかになり、ペイロードサイズに対するオーバーヘッドは小さいです。</p><h2>生放送の現場ではリアルタイム性を重視</h2><p><img src="/images/live-streaming-and-rtmp-for-frontend-engineers/live-streaming-wirecast.png" alt="生放送の配信構成"></p><p>AbemaTV の生放送の現場では撮影機材で撮れた映像を Wirecast などのエンコーダーでエンコードし、それを RTMP 通信で Wowza などのメディアストリーミングサーバーに届けています。そして、メディアストリーミングサーバーに届けられた映像を確認しながら、生で撮影しているその映像に対して遅延を極力少ない状態で CM 入りや視聴者参加型コンテンツなどのトリガーとなるシグナルを通信できる環境を構築しています。</p><h2>RTMP の種類</h2><p>RTMP にはいくつかの派生種があります。</p><ul><li><strong>RTMPT</strong> - HTTP でカプセル化した RTMP</li><li><strong>RTMPS</strong> - TLS/SSL で暗号化して HTTPS でカプセル化した RTMP</li><li><strong>RTMPE</strong> - こちらも暗号化された RTMP ですが、設計に欠陥があり RTMPS の使用が推奨されている</li><li><strong>pRTMP</strong> - Adobe Primetime DRM がかかった RTMP</li></ul><p>RTMP は一般的に <code>1935</code> ポートを使用します。しかし、セキュリティの厳しい環境ではこの <code>1935</code> ポートが使えないこともしばしばあります。そのため、HTTP（ <code>80</code> ポート）や HTTPS（ <code>443</code> ポート）を装って通信するという手段を取ることが可能です。それが <strong>RTMPT</strong> と <strong>RTMPS</strong> になります。</p><h2>更にリアルタイム性を重視したデータ通信</h2><p>RTMP は <strong>TCP</strong> を利用したプロトコルですが、別に <strong>RTMFP</strong> という <strong>UDP</strong> を利用したプロトコルもあります。UDP を利用するプロトコルは TCP を利用するプロトコルと比べて通信速度面において利点があります。TCP はパケット・ロストに対して再送する仕組みですが、UDP はパケット・ロストに対して再送することはありません。その分再送のオーバーヘッドなく通信することができます。</p><h2>データ量の大きな双方向データ通信</h2><p>RTMP は双方向のデータ通信が可能なプロトコルですが、両方向とも送信するデータ量が大きな通信サービスを構築する場合は UDP ベースの RTMFP が好まれます。たとえばテレビ会議やビデオチャットなどは双方が送信するデータが動画のため、データサイズが大きいにも関わらず、スムーズなコミュニケーションのためにリアルタイム性が求められます。</p><p>TCP で パケット・ロストによる再送で遅延の頻度が高まると、音声や映像が遅れた状態になる可能性が高くなります。特にテレビ会議やビデオチャットなどはデータの抜け落ちが発生したとしてもノイズ程度の劣化として許容できる場合がほとんどなため、UDP での通信が向いています。</p><h2>RTMP をサポートするメディアストリーミングサーバ</h2><p>RTMP でストリーミング配信するには、専用の RTMP サーバーが必要です。ここでは RTMP をサポートする代表的なメディアストリーミングサーバーを３つ紹介します。</p><h3>Adobe Media Server</h3><p><img src="/images/live-streaming-and-rtmp-for-frontend-engineers/adobe-media-server.png" alt="Adobe Media Server"></p><p>Adobe Systems 社が開発しているメディアストリーミングサーバーです。Flash 技術の総本山である Adobe が開発しているだけあり、ここで紹介するメディアサーバーの中で一番知名度が高く、機能も豊富です。そしてその分ライセンス料も高いです。（RTMFP のサポート有無など機能数に応じて複数のエディションに別れています。）</p><p>参照：<a href="http://www.adobe.com/jp/products/adobe-media-server-family/buying-guide-comparison.html" target="_blank" rel="external">Adobe Media Serverファミリー</a></p><h3>Wowza Media Server</h3><p><img src="/images/live-streaming-and-rtmp-for-frontend-engineers/wowza.png" alt="Wowza Media Systems"></p><p><a href="https://www.wowza.com/" target="_blank" rel="external">Wowza Media Systems</a> 社によって開発されているメディアストリーミングサーバーです。元 Adobe Systems の社員がスピンアウトして立ち上げたこともあり、Adobe Media Server との互換性が高く、ほぼ同等の機能を持っています。それにも関わらずライセンス価格は Adobe Media Server と比較するとかなり安価なこともあり、AbemaTV でも生放送のストリーミングサーバーには Wowza Media Server を使用しています。</p><h3>Red5</h3><p><img src="/images/live-streaming-and-rtmp-for-frontend-engineers/red5.png" alt="Red5"></p><p>Java で実装されたオープンソースの RTMP プロトコルをサポートするメディアストリーミングサーバーです。Adobe Media Server にかなり似せて作られていて、単体のサーバーとしては同等の機能を提供してくれますが、クラスタリング構成にあまり対応していないため、大規模な配信サービスを構築する場合には注意が必要です。</p><h2>RTMP を使用するためのクライアントサイド</h2><p>Web ブラウザは RTMP をネイティブでは対応していません。ブラウザ上で RTMP を使用するためには、プラグインとして Adobe Flash Player を使用する必要があります。</p><h2>簡単な RTMP ストリーミング配信を実装してみる</h2><p>まずは RTMP ストリーミングサーバーを構築します。先述したメディアサーバーを使用したいところですが、今回は単純なストリーミング機能のみを提供できれば良いので、NGINX をメディアストリーミングサーバーとして使うことができる <a href="https://github.com/arut/nginx-rtmp-module" target="_blank" rel="external">nginx-rtmp-module</a> を使います。</p><h3>Docker で NGINX を立てる</h3><p>nginx-rtmp-module を追加してコンパイルした NGINX の Docker イメージを作ります。ベースイメージには Alpine Linux を使います。ここでは RTMP 用に <code>1935</code> ポートと Flash アプリケーションを読み込むための HTML を返すために HTTP <code>80</code> ポートを開けるようにします。</p><h4>Dockerfile を作成する</h4><p>下記の Dockerfile では、コンパイルに必要なパッケージを <code>apk</code> でインストールして、任意のバージョンの NGINX と nginx-rtmp-module の Tarball をダウンロードし、コンパイルしています。 <code>./configure</code> のパラメータがやたら多いですが、必要ないモジュールを除外しているだけです。</p><p><figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div></pre></td><td class="code"><pre><div class="line">FROM alpine:3.4</div><div class="line">ENV NGINX_VERSION nginx-1.11.4</div><div class="line">ENV NGINX_RTMP_MODULE_VERSION 1.1.7.10</div><div class="line"></div><div class="line">ENV USER nginx</div><div class="line">RUN adduser -s /sbin/nologin -D -H $&#123;USER&#125;</div><div class="line"></div><div class="line">RUN apk --update --no-cache \</div><div class="line">    add ca-certificates \</div><div class="line">        build-base \</div><div class="line">        openssl \</div><div class="line">        openssl-dev \</div><div class="line">        pcre-dev \</div><div class="line">    &amp;&amp; \</div><div class="line">    update-ca-certificates &amp;&amp; \</div><div class="line">    rm -rf /var/cache/apk/*</div><div class="line"></div><div class="line">RUN mkdir -p /tmp/build/nginx &amp;&amp; \</div><div class="line">    cd /tmp/build/nginx &amp;&amp; \</div><div class="line">    wget -O $&#123;NGINX_VERSION&#125;.tar.gz https://nginx.org/download/$&#123;NGINX_VERSION&#125;.tar.gz &amp;&amp; \</div><div class="line">    tar -zxf $&#123;NGINX_VERSION&#125;.tar.gz</div><div class="line"></div><div class="line">RUN mkdir -p /tmp/build/nginx-rtmp-module &amp;&amp; \</div><div class="line">    cd /tmp/build/nginx-rtmp-module &amp;&amp; \</div><div class="line">    wget -O nginx-rtmp-module-$&#123;NGINX_RTMP_MODULE_VERSION&#125;.tar.gz https://github.com/sergey-dryabzhinsky/nginx-rtmp-module/archive/v$&#123;NGINX_RTMP_MODULE_VERSION&#125;.tar.gz &amp;&amp; \</div><div class="line">    tar -zxf nginx-rtmp-module-$&#123;NGINX_RTMP_MODULE_VERSION&#125;.tar.gz &amp;&amp; \</div><div class="line">    cd nginx-rtmp-module-$&#123;NGINX_RTMP_MODULE_VERSION&#125; &amp;&amp; \</div><div class="line">    wget -O - https://raw.githubusercontent.com/gentoo/gentoo/6241ba18ca4a5e043a97ad11cf450c8d27b3079f/www-servers/nginx/files/rtmp-nginx-1.11.0.patch | patch</div><div class="line"></div><div class="line">RUN cd /tmp/build/nginx/$&#123;NGINX_VERSION&#125; &amp;&amp; \</div><div class="line">    ./configure \</div><div class="line">      -<span class="ruby">-sbin-path=<span class="regexp">/usr/local</span><span class="regexp">/sbin/nginx</span> \</span></div><div class="line"><span class="ruby">      --conf-path=<span class="regexp">/etc/nginx</span><span class="regexp">/nginx.conf \</span></span></div><div class="line"><span class="ruby">      --error-log-path=<span class="regexp">/var/log</span><span class="regexp">/nginx/error</span>.log \</span></div><div class="line"><span class="ruby">      --pid-path=<span class="regexp">/var/run</span><span class="regexp">/nginx/nginx</span>.pid \</span></div><div class="line"><span class="ruby">      --lock-path=<span class="regexp">/var/lock</span><span class="regexp">/nginx/nginx</span>.lock \</span></div><div class="line"><span class="ruby">      --user=$&#123;USER&#125; --group=$&#123;USER&#125; \</span></div><div class="line"><span class="ruby">      --http-log-path=<span class="regexp">/var/log</span><span class="regexp">/nginx/access</span>.log \</span></div><div class="line"><span class="ruby">      --http-client-body-temp-path=<span class="regexp">/tmp/nginx</span>-client-body \</span></div><div class="line"><span class="ruby">      --with-http_ssl_module \</span></div><div class="line"><span class="ruby">      --with-http_gzip_static_module \</span></div><div class="line"><span class="ruby">      --without-http_userid_module \</span></div><div class="line"><span class="ruby">      --without-http_access_module \</span></div><div class="line"><span class="ruby">      --without-http_auth_basic_module \</span></div><div class="line"><span class="ruby">      --without-http_autoindex_module \</span></div><div class="line"><span class="ruby">      --without-http_geo_module \</span></div><div class="line"><span class="ruby">      --without-http_map_module \</span></div><div class="line"><span class="ruby">      --without-http_split_clients_module \</span></div><div class="line"><span class="ruby">      --without-http_referer_module \</span></div><div class="line"><span class="ruby">      --without-http_proxy_module \</span></div><div class="line"><span class="ruby">      --without-http_fastcgi_module \</span></div><div class="line"><span class="ruby">      --without-http_uwsgi_module \</span></div><div class="line"><span class="ruby">      --without-http_scgi_module \</span></div><div class="line"><span class="ruby">      --without-http_memcached_module \</span></div><div class="line"><span class="ruby">      --without-http_limit_conn_module \</span></div><div class="line"><span class="ruby">      --without-http_limit_req_module \</span></div><div class="line"><span class="ruby">      --without-http_empty_gif_module \</span></div><div class="line"><span class="ruby">      --without-http_browser_module \</span></div><div class="line"><span class="ruby">      --without-http_upstream_hash_module \</span></div><div class="line"><span class="ruby">      --without-http_upstream_ip_hash_module \</span></div><div class="line"><span class="ruby">      --without-http_upstream_least_conn_module \</span></div><div class="line"><span class="ruby">      --without-http_upstream_keepalive_module \</span></div><div class="line"><span class="ruby">      --without-http_upstream_zone_module \</span></div><div class="line"><span class="ruby">      --without-http-cache \</span></div><div class="line"><span class="ruby">      --without-mail_pop3_module \</span></div><div class="line"><span class="ruby">      --without-mail_imap_module \</span></div><div class="line"><span class="ruby">      --without-mail_smtp_module \</span></div><div class="line"><span class="ruby">      --without-stream_limit_conn_module \</span></div><div class="line"><span class="ruby">      --without-stream_access_module \</span></div><div class="line"><span class="ruby">      --without-stream_upstream_hash_module \</span></div><div class="line"><span class="ruby">      --without-stream_upstream_least_conn_module \</span></div><div class="line"><span class="ruby">      --without-stream_upstream_zone_module \</span></div><div class="line"><span class="ruby">      --with-threads \</span></div><div class="line"><span class="ruby">      --with-ipv6 \</span></div><div class="line"><span class="ruby">      --add-<span class="class"><span class="keyword">module</span>=/<span class="title">tmp</span>/<span class="title">build</span>/<span class="title">nginx</span>-<span class="title">rtmp</span>-<span class="title">module</span>/<span class="title">nginx</span>-<span class="title">rtmp</span>-<span class="title">module</span>-$&#123;<span class="title">NGINX_RTMP_MODULE_VERSION</span>&#125; &amp;&amp; \</span></span></div><div class="line"><span class="ruby">    make -j $(getconf _NPROCESSORS_ONLN) &amp;&amp; \</span></div><div class="line"><span class="ruby">    make install &amp;&amp; \</span></div><div class="line"><span class="ruby">    mkdir /var/lock/nginx &amp;&amp; \</span></div><div class="line"><span class="ruby">    mkdir /tmp/nginx-client-body &amp;&amp; \</span></div><div class="line"><span class="ruby">    rm -rf /tmp/build</span></div><div class="line"><span class="ruby"></span></div><div class="line"><span class="ruby">RUN apk del build-base openssl-dev &amp;&amp; \</span></div><div class="line"><span class="ruby">    rm -rf /var/cache/apk/*</span></div><div class="line"><span class="ruby"></span></div><div class="line"><span class="ruby">RUN ln -sf /dev/stdout /var/log/nginx/access.log &amp;&amp; \</span></div><div class="line"><span class="ruby">    ln -sf /dev/stderr /var/log/nginx/error.log</span></div><div class="line"><span class="ruby"></span></div><div class="line"><span class="ruby">COPY nginx/nginx.conf /etc/nginx/nginx.conf</span></div><div class="line"><span class="ruby">COPY build /var/www/build</span></div><div class="line"><span class="ruby"></span></div><div class="line"><span class="ruby">RUN chmod <span class="number">444</span> /etc/nginx/nginx.conf &amp;&amp; \</span></div><div class="line"><span class="ruby">    chown $&#123;USER&#125;<span class="symbol">:</span>$&#123;USER&#125; /var/log/nginx /var/run/nginx /var/lock/nginx /tmp/nginx-client-body &amp;&amp; \</span></div><div class="line"><span class="ruby">    chmod -R <span class="number">770</span> /var/log/nginx /var/run/nginx /var/lock/nginx /tmp/nginx-client-body</span></div><div class="line"><span class="ruby"></span></div><div class="line"><span class="ruby">EXPOSE <span class="number">80</span></span></div><div class="line"><span class="ruby">EXPOSE <span class="number">1935</span></span></div><div class="line"><span class="ruby">CMD [<span class="string">"nginx"</span>]</span></div></pre></td></tr></table></figure></p><h4>NGINX の configuration を設定する</h4><p>イメージにコピーする <code>nginx.conf</code> は下記のように設定します。 <code>http</code> コンテキストに加えて <code>nginx-rtmp-module</code> で使用できるようになった <code>rtmp</code> コンテキストに設定を追加しています。</p><p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">user nginx;</div><div class="line">worker_processes 1;</div><div class="line">daemon off;</div><div class="line"></div><div class="line">events &#123;</div><div class="line">  <span class="built_in">..</span>.</div><div class="line">&#125;</div><div class="line"></div><div class="line">http &#123;</div><div class="line">  <span class="built_in">..</span>.</div><div class="line">&#125;</div><div class="line"></div><div class="line">rtmp &#123;</div><div class="line"> <span class="built_in"> server </span>&#123;</div><div class="line">    listen 1935;</div><div class="line">    listen [::]:1935 <span class="attribute">ipv6only</span>=on;</div><div class="line"></div><div class="line">    application live &#123;</div><div class="line">      live on;</div><div class="line">      record off;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>この <code>rtmp</code> コンテキストの設定により、ローカルに Docker コンテナを立ち上げたとき <code>rtmp://localhost:1935/live</code> という URL で RTMP サーバに接続が可能になります。</p><h3>RTMP プレイヤーを実装する</h3><p>次に RTMP プレイヤーとそれを表示する HTML を作成します。RTMP プレイヤーは Flash アプリケーションとして実装するので ActionScript で書きます。まず新規ファイル <code>Player.as</code> を作成します。</p><p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ touch Player.as</div></pre></td></tr></table></figure></p><p><code>Player.as</code> に <code>Player</code> クラスを作成します。動画を表示するための <code>Video</code> オブジェクトも追加したいので、 <code>Sprite</code> クラスを継承しておきます。</p><p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">package</span> &#123;</span></div><div class="line"></div><div class="line">  <span class="meta"><span class="meta-keyword">import</span> flash.display.Sprite;</span></div><div class="line">  <span class="meta"><span class="meta-keyword">import</span> flash.display.StageScaleMode;</span></div><div class="line">  <span class="meta"><span class="meta-keyword">import</span> flash.display.StageAlign;</span></div><div class="line">  <span class="meta"><span class="meta-keyword">import</span> flash.events.Event;</span></div><div class="line">  <span class="meta"><span class="meta-keyword">import</span> flash.events.NetStatusEvent;</span></div><div class="line">  <span class="meta"><span class="meta-keyword">import</span> flash.net.NetConnection;</span></div><div class="line">  <span class="meta"><span class="meta-keyword">import</span> flash.net.NetStream;</span></div><div class="line">  <span class="meta"><span class="meta-keyword">import</span> flash.media.Video;</span></div><div class="line">  <span class="meta"><span class="meta-keyword">import</span> flash.external.ExternalInterface;</span></div><div class="line"></div><div class="line">  [SWF(backgroundColor=<span class="string">"0x000000"</span>)]</div><div class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Player</span> <span class="keyword">extends</span> <span class="title">Sprite</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">var</span> nc: NetConnection;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">var</span> ns: NetStream;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">var</span> video: Video;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Player</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>次に <code>Stage</code> の設定します。Flash コンテンツを左上に整列する設定だけします。</p><p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Player</span><span class="params">()</span> </span>&#123;</div><div class="line">  setupStage();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">setupStage</span><span class="params">()</span>: void </span>&#123;</div><div class="line">  stage.scaleMode = StageScaleMode.NO_SCALE;</div><div class="line">  stage.align = StageAlign.TOP_LEFT;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><code>NetConnection</code> クラスを使い、クライアントとサーバー間の双方向の接続を作成するための準備をします。 <code>NetConnection</code> オブジェクトのステータスが変化したタイミングで、メディアサーバーからのデータを再生できるように、 <code>NetStream</code> クラスを使ってストリームチャネルを開きます。開いた後ライブストリームを再生するために <code>ns.play()</code> メソッドを実行します。このときストリーム名として <code>&quot;test&quot;</code> を渡していますが、これは後程ライブストリームを作成する際にも使う名前になります。</p><p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Player</span><span class="params">()</span> </span>&#123;</div><div class="line">  ...</div><div class="line">  setupNetConnection();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">setupNetConnection</span><span class="params">()</span>: void </span>&#123;</div><div class="line">  nc = <span class="keyword">new</span> NetConnection();</div><div class="line">  nc.addEventListener(NetStatusEvent.NET_STATUS, onChangeNCStatus);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">onChangeNCStatus</span><span class="params">(e: NetStatusEvent)</span>: void </span>&#123;</div><div class="line">  <span class="keyword">const</span> code: String = e.info.code;</div><div class="line">  <span class="keyword">if</span> (code === <span class="string">"NetConnection.Connect.Success"</span>) &#123;</div><div class="line">    setupNetStream();</div><div class="line">    ns.play(<span class="string">"test"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>作成したストリームチャネルからの動画を表示するために <code>Video</code> オブジェクトに取り付けます。</p><p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">setupNetStream</span><span class="params">()</span>: void </span>&#123;</div><div class="line">  ns = <span class="keyword">new</span> NetStream(nc);</div><div class="line">  ns.addEventListener(NetStatusEvent.NET_STATUS, onChangeNSStatus);</div><div class="line"></div><div class="line">  video.attachNetStream(ns);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>この <code>Video</code> オブジェクトもコンストラクト時に作成し、ステージに追加してきます。</p><p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Player</span><span class="params">()</span> </span>&#123;</div><div class="line">  ...</div><div class="line">  ssetupVideo();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">setupVideo</span><span class="params">()</span>: void </span>&#123;</div><div class="line">  video = <span class="keyword">new</span> Video(stage.width, stage.height);</div><div class="line">  addChild(video);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><code>NetConnection</code> の準備が整ったので、最後にメディアサーバーに接続します。URL は先程の NGINX の RTMP メディアサーバーの <code>live</code> application に向けています。</p><p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Player</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  ...</div><div class="line">  nc.connect(<span class="string">"rtmp://localhost:1935/live"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3>ActionScript のコンパイル</h3><p>これで RTMP サーバーの実装はできたので、次は ActionScript をコンパイルします。コンパイルには Apache/Adobe Flex SDK の Node.js モジュール版である <a href="https://github.com/JamesMGreene/node-flex-sdk" target="_blank" rel="external">node-flex-sdk</a> を使用します。まずは NPM でインストールします。</p><p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm i flex-sdk --save-dev</div></pre></td></tr></table></figure></p><p>無事インストールできたら、<code>mxmlc</code> というコマンドを使って、 <code>Player.as</code> から <code>Player.swf</code> をコンパイルします。</p><p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ $(npm bin)/mxmlc --output=Player.swf Player.as</div></pre></td></tr></table></figure></p><h3>HTML の作成</h3><p>作成された <code>Player.swf</code> を表示する HTML を作成します。</p><p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">object</span> <span class="keyword">data</span>=<span class="string">"./Player.swf"</span> type=<span class="string">"application/x-shockwave-flash"</span>&gt;&lt;/<span class="keyword">object</span>&gt;</div></pre></td></tr></table></figure></p><h3>Docker コンテナの起動</h3><p>Docker コンテナの構成に必要なファイルが揃ったので、これでイメージを作成します。</p><p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker build -t rtmp .</div></pre></td></tr></table></figure></p><p>イメージが作成できたか確認しましょう。</p><p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ docker images</div><div class="line">REPOSITORY                   TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">rtmp                         latest              ************        About a minute ago          180.7 MB</div></pre></td></tr></table></figure></p><p>無事に作成できたら、そのイメージから Docker コンテナを起動します。</p><p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker run -p 1935:1935 -p 80:80 --name rtmp -t rtmp</div></pre></td></tr></table></figure></p><p>Web ブラウザで <a href="http://localhost/" target="_blank" rel="external">http://localhost/</a> にアクセスしてみましょう。</p><p><img src="/images/live-streaming-and-rtmp-for-frontend-engineers/browser-sc-black.png" alt="RTMP プレイヤー"></p><p>黒いボックスが表示されたと思います。このボックスが RTMP プレイヤーなのですが、今は配信するストリームが存在していないため、何も再生できず黒い状態です。ですので、次は再生するストリームを作成します。</p><h3>ストリームの作成</h3><p>ここでは、<a href="https://obsproject.com/" target="_blank" rel="external">Open Broadcaster Software</a> （OBS）というオープンソースのライブストリーミング用のツールを使用してストリームを作成します。</p><p>OBS を起動して、「Settings」ボタンをクリックします。</p><p><img src="/images/live-streaming-and-rtmp-for-frontend-engineers/obs-sc-settings.png" alt="OBS"></p><p>「Settings」ダイアログが表示されるので、左側のペインから「Stream」を選択します。すると「URL」と「Stream key」を入力する画面に切り替わりますので、「URL」に NGINX の RTMP サーバーの <code>live</code> application の URL を入力し、「Stream key」には先程 RTMP プレイヤーを実装したときにストリーム名として指定した <code>test</code> を入力します。</p><p><img src="/images/live-streaming-and-rtmp-for-frontend-engineers/obs-sc-stream.png" alt="OBS Settings"></p><p>「Settings」ダイアログで「OK」をクリックしたら、次に「 Sources」の「+」をクリックして適当なメディアソースを追加します。プルダウンメニューが表示されるので「Media Source」を選択して任意の動画ファイルを追加します。</p><p>メディアソースが追加されたら、「Start Streaming」ボタンをクリックしてストリーミングを開始します。</p><p><img src="/images/live-streaming-and-rtmp-for-frontend-engineers/obs-sc-start.png" alt="OBS Sources"></p><p>ストリーミングが開始されたら、Web ブラウザに戻ります。すると OBS でストリームしている動画がブラウザの方でも再生されていることが確認できます。</p><p><img src="/images/live-streaming-and-rtmp-for-frontend-engineers/browser-sc.png" alt="RTMP 再生"></p><h2>RTMP でメディアサーバーのメソッドを呼ぶ</h2><p>ここまでで RTMP でサーバー側からプッシュされたデータをクライアントで再生する実装をしてきました。しかし、RTMP は双方向のデータ通信が可能なので、クライアント側からサーバー側のメソッドを呼ぶことも可能です。 <code>nginx-rtmp-module</code> では難しいですが、メディアサーバーに Adobe Media Server や Wowza Media Server を利用して開発をした場合、クライアント側からサーバー側のメソッドを呼ぶことが可能です。</p><p>ActionScript の場合、クライアントとサーバー間の双方向の接続が作成した後（ <code>NetConnection</code> オブジェクトが <code>nc.connect()</code> して、 <code>NetStatusEvent</code> が <code>&quot;NetConnection.Connect.Success&quot;</code> になった後）であれば、 <code>nc.call()</code> でサーバー側のメソッドを呼ぶことができます。 <code>nc.call()</code> の第１引数がメソッド名なので、 <code>nc.call(&quot;doSomething&quot;)</code> のようにクライアントから実行した場合、メディアサーバーに実装した該当のメソッドが実行されます。</p><p><img src="/images/live-streaming-and-rtmp-for-frontend-engineers/call.png" alt="NetConnection.call"></p><p>たとえば Wowza Media Server の場合であれば、実装は Java なので下記のようなメソッドを実装することで、クライアントから Wowza Media Server のコンソールに <code>doSomething is called</code> と表示させることが可能です。</p><p><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span>(<span class="params">IClient client, RequestFunction function, AMFDataList <span class="keyword">params</span></span>) </span>&#123;  </div><div class="line">  getLogger().info(<span class="string">"doSomething is called"</span>);  </div><div class="line">  <span class="comment">// do something</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>AbemaTV の生放送番組では、RTMP の双方向通信を利用して、Web ブラウザから Wowza Media Server のメソッドを呼ぶことで、番組の進行具合に合わせて CM 入りのタイミングや視聴者参加型のインタラクションコンテンツのトリガーを最小限の遅延で放送に挿し込んでいます。</p><h2>RTMP で受け取った動画を HLS でもストリーミング</h2><p>メディアサーバーはエンコーダーから RTMP 通信で送られた動画をそのまま RTMP でクライアントにプッシュ送信する以外に HLS や MPEG-DASH でストリーミングできるように変換することも可能です。たとえが nginx-rtmp-module の場合は先程作成した <code>nginx.conf</code> を編集して、 <code>application live</code> コンテキストに HLS に関する以下のディレクティブを追加します。</p><p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">application</span> live &#123;</div><div class="line">  <span class="attribute">live</span> <span class="literal">on</span>;</div><div class="line">  <span class="attribute">record</span> <span class="literal">off</span>;</div><div class="line"></div><div class="line">  <span class="attribute">hls</span> <span class="literal">on</span>;</div><div class="line">  <span class="attribute">hls_path</span> /usr/local/nginx/html/hls;</div><div class="line">  <span class="attribute">hls_fragment</span> <span class="number">1s</span>;</div><div class="line">  <span class="attribute">hls_type</span> live;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>すると、Live セッションの m3u8 プレイリストと 1 秒感覚のセグメントファイルを <code>/usr/local/nginx/html/hls/live</code> に出力してくれます。この <code>nginx.conf</code> を反映した Docker コンテナが起動している状態で、<a href="http://localhost/hls/test.m3u8" target="_blank" rel="external">http://localhost/hls/test.m3u8</a> に Safari でアクセスすると HLS でストリーミング再生ができます。（Safari でアクセスする理由は<a href="/posts/streaming-technology-basics-for-frontend-engineers/">前回</a>書いた通り、HLS をネイティブサポートしている Web ブラウザが Safari だけだからです。）</p><p><img src="/images/live-streaming-and-rtmp-for-frontend-engineers/safari-hls.png" alt="HLS を Safari で再生"></p><h2>まとめ</h2><p>普段の Web フロントエンドの開発では、RTMP や ActionScript を扱う必要があることはあまりありません。しかし、こと動画やストリーミング領域となるとまだ Flash テクノロジーの安定性にお世話になることも多いように思います。WebRTC や WebSocket などの技術の組み合わせでこのあたりの事情もどんどん変化していきそうです。</p><h2>参考</h2><ul><li><p><a href="http://joy2world.tistory.com/attachment/ek8.pdf" target="_blank" rel="external">RTMP Protocol [DRAFT]</a></p></li><li><p><a href="http://www.streamingmedia.com/Articles/Editorial/Featured-Articles/RTMP-in-the-Age-of-HTTP-Video-Streaming-Dont-Count-it-Out-100909.aspx" target="_blank" rel="external">RTMP in the Age of HTTP Video Streaming: Don't Count it Out</a></p></li><li><p><a href="http://www.programming-knowledge.com/Adobe_Media_Server%E6%A6%82%E8%A6%81" target="_blank" rel="external">Adobe Media Server概要</a></p></li><li><p><a href="http://www.itoyanagi.name/temp/fuck/d20071109.html" target="_blank" rel="external">各種 RTMP サーバーでのライブストリーミングの実現</a></p></li><li><p><a href="https://en.wikipedia.org/wiki/Red5_(media_server)" target="_blank" rel="external">Red5 (media server)</a></p></li><li><p><a href="https://gist.github.com/voluntas/076fee77f30a0ca7a9b9" target="_blank" rel="external">リアルタイム動画配信コトハジメ</a></p></li><li><p><a href="http://flashcafe.jp/kazari/k_m_clo/real.html" target="_blank" rel="external">RTMFPとRTMP</a></p></li><li><p><a href="https://ja.wikipedia.org/wiki/Real_Time_Media_Flow_Protocol" target="_blank" rel="external">Real Time Media Flow Protocol</a></p></li><li><p><a href="http://www.neotys.com/blog/testing-tips-for-todays-tech-html5-websockets-rtmp-adaptive-bitrate-streaming/" target="_blank" rel="external">Testing Tips For Today’s Tech: HTML5, WebSockets, RTMP, Adaptive Bitrate Streaming</a></p></li><li><p><a href="http://coelacanth.heteml.jp/site/flash_wowza/article_5" target="_blank" rel="external">5-1.クライアントからサーバーのメソッドを呼び出す</a></p></li><li><p><a href="https://github.com/DvdGiessen/nginx-rtmp-docker" target="_blank" rel="external">DvdGiessen/nginx-rtmp-docker</a></p></li><li><p><a href="http://www.slideshare.net/chintal75/building-next-generation-realtime-web-applications" target="_blank" rel="external">Building Next Generation Real-Time Web Applications using Websockets</a></p></li><li><p><a href="http://www.slideshare.net/mawarimichi/websocketwebrtc" target="_blank" rel="external">WebSocket / WebRTCの技術紹介</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/live-streaming-and-rtmp-for-frontend-engineers/obs-sc.png&quot; alt=&quot;生放送と RTMP 通信基礎&quot;&gt;&lt;/p&gt;
&lt;p&gt;前回「&lt;a href=&quot;/posts/streaming-te
      
    
    </summary>
    
      <category term="video" scheme="https://ygoto3.com/categories/video/"/>
    
    
      <category term="RTMP ActionScript" scheme="https://ygoto3.com/tags/RTMP-ActionScript/"/>
    
  </entry>
  
  <entry>
    <title>フロントエンドエンジニアのための動画ストリーミング技術基礎</title>
    <link href="https://ygoto3.com/posts/streaming-technology-basics-for-frontend-engineers/"/>
    <id>https://ygoto3.com/posts/streaming-technology-basics-for-frontend-engineers/</id>
    <published>2016-09-29T16:22:53.000Z</published>
    <updated>2019-02-13T03:11:50.332Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://abema.tv/" target="_blank" rel="external">AbemaTV</a> という動画サービスをリリースしてから半年経ち、新しくサービスのフロントエンドに関わる人数が少し増えてきたため、動画に関して社内で勉強会を行いました。本記事はその勉強会資料です。</p><h2>Web でメディアを見るためにはデータのダウンロードが必要</h2><p><img src="/images/streaming-technology-basics-for-frontend-engineers/hls.png" alt="Download via HTTP"></p><p>Web サービスが HTML を介して提供するコンテンツはテキスト、画像、音声、動画などいろいろありますが、テキスト以外のデータは HTML にインラインで返したりせず、基本的には外部ファイルとして非同期に取得されることがほとんどだと思います。</p><h3>画像の場合</h3><p>HTML 内の <code>img</code> 要素の <code>src</code> 属性に表示したい画像ファイルのパスを指定することで、Web ブラウザはその画像をリクエストし、ダウンロードしたデータをデコードして画像として表示します。</p><p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"sample.jpg"</span> /&gt;</span></div></pre></td></tr></table></figure></p><p><img src="https://placekitten.com/g/300/300" alt="https://placekitten.com/g/300/300"></p><h3>動画の場合</h3><p>動画の場合も同じです。<code>video</code> 要素を使って <code>img</code> 要素と同様に <code>src</code> 属性に動画ファイルのパスを指定します。</p><p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">"sample.mp4"</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></div></pre></td></tr></table></figure></p><h3>動画はデータ容量が大きい</h3><p>画像と違い、動画コンテンツはデータ容量がとても大きいため、データをダウンロードして再生するまでに待ち時間が発生します。</p><p><img src="/images/streaming-technology-basics-for-frontend-engineers/video-dl.png" alt="動画のダウンロード"></p><p>動画のデータ容量が大きい理由はとても単純で、動画は画像データが集合したものだからです。静止画像を人間の目が滑らかに感じられる速さで切り替えて表示することで絵を動かすという表現を実現しています（よくパラパラマンガに例えられますが、そんな感じです）。この人間の目が滑らかに感じる速さというのが 1 秒間に 30 枚だったり 24 枚を切り替えることになります。29.97 (≒30) fps とか 24 fps とかの数字を耳にしたことがあるかと思いますが、24 fps の場合は 1 秒間（s）の間（p）に 24 フレーム（f）を切り替えることを意味します。</p><p>データを全て自分の端末にダウンロードしてから再生しようとすると、かなり長い待ち時間が発生してしまいます。もし 2 時間の映画を見ようと思ったら 172,800 (= 24 フレーム * 60 秒 * 60 分 * 2 時間) 枚の画像をダウンロードするのを待つことになります。しかも動画を構成する要素は画像だけではなく、音声データも含まれるため、純粋な情報量としてはそれ以上になります。</p><h2>ストリーミング</h2><p>動画データを全てダウンロードしてから再生するのではなく、ダウンロードしたデータで再生できる部分から再生を始め、同時に残りのデータをダウンロードしていく方式を、ストリーミング再生といいます。長時間の動画でもダウンロードしながら再生することができるので、再生するまでの待ち時間を短かくすることができます。</p><p>また、ストリーミングでは動画を途中から再生することも可能にします。2 時間映画のたとえば 1 時間経ったあたりから見たいとき、1 時間経過した部分からデータをダウンロードし始め、再生を始めることができます。</p><p><img src="/images/streaming-technology-basics-for-frontend-engineers/seek.png" alt="シーク"></p><h2>AbemaTV で使用しているストリーミングプロトコル</h2><p>ストリーミング再生は、映像を配信する側と映像を再生する側で、データをどのような手順で通信するかをあらかじめ決めて、その手順通りに両者がデータを処理することによって実現します。その通信手順のことをストリーミングプロトコルと呼びます。ここでは AbemaTV で使用しているはストリーミングプロトコルを 2 つ説明します。</p><h3>HTTP Live Streaming</h3><p>HTTP Live Streaming はアップル社が自社プロダクトである QuickTime、OS X、iOS、Safari 向けに開発したストリーミングプロトコルです。略して HLS と呼ばれるので、この記事でも HLS と表記します。その名前の通り、通信は HTTP で行われます。専用のプロトコルが必要ないため、通常の Web サーバーを用意するだけで配信ができてしまいます。</p><p><img src="/images/streaming-technology-basics-for-frontend-engineers/hls.png" alt="HLS"></p><p>HLS を配信するために必要なファイルは、動画を数秒ごとの「MPEG-2 TS」形式のファイルに分割したセグメントファイル、それらをどの順番で再生するかを記したプレイリストだけです。</p><p><img src="/images/streaming-technology-basics-for-frontend-engineers/m3u8-ts.png" alt="m3u8 ファイルと ts ファイル"></p><h4>簡単な HLS の配信を試してみる</h4><p>まず、プレイリストとセグメントファイルを作成します。ここでは ffmpeg というツールを使い、 <code>input.mp4</code> というファイル名で保存されている動画から <code>output.m3u8</code> というプレイリストと分割されたセグメントファイルを作成します。</p><p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ ffmpeg -i input.mp4 \</div><div class="line">  -vcodec libx264 \</div><div class="line">  -s 1280x720 \</div><div class="line">  -acodec aac -b:a 256k\</div><div class="line">  -flags +loop-global_header \</div><div class="line">  -bsf h264_mp4toannexb \</div><div class="line">  -f segment -segment_format mpegts \</div><div class="line">  -segment_time 10 \</div><div class="line">  -segment_list output.m3u8 output_%04d.ts</div></pre></td></tr></table></figure></p><p>すると、 <code>output.m3u8</code> と <code>output_****.ts</code> というファイルが作成されます。 <code>output.m3u8</code> の内容は下記のようになります。</p><p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">#EXTM3U</div><div class="line"><span class="selector-id">#EXT-X-VERSION</span>:<span class="number">3</span></div><div class="line"><span class="selector-id">#EXT-X-MEDIA-SEQUENCE</span>:<span class="number">0</span></div><div class="line"><span class="selector-id">#EXT-X-ALLOW-CACHE</span>:YES</div><div class="line"><span class="selector-id">#EXT-X-TARGETDURATION</span>:<span class="number">18</span></div><div class="line"><span class="selector-id">#EXTINF</span>:<span class="number">10.500000</span>,</div><div class="line">output_0000.ts</div><div class="line"><span class="selector-id">#EXTINF</span>:<span class="number">12.625000</span>,</div><div class="line">output_0001.ts</div><div class="line"><span class="selector-id">#EXTINF</span>:<span class="number">10.416667</span>,</div><div class="line">output_0002.ts</div><div class="line"><span class="selector-id">#EXTINF</span>:<span class="number">10.416667</span>,</div><div class="line">output_0003.ts</div><div class="line">...略</div><div class="line">output_0058.ts</div><div class="line"><span class="selector-id">#EXTINF</span>:<span class="number">5.125000</span>,</div><div class="line">output_0059.ts</div><div class="line">#EXT-X-ENDLIST</div></pre></td></tr></table></figure></p><p>Web サーバーを起動します。ここでは Mac OS X にプリインストールされている Python2 を使用します。</p><p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ python -m SimpleHTTPServer</div></pre></td></tr></table></figure></p><p>Python2 の SimpleHTTPServer モジュールはデフォルトで <code>8000</code> 番ポートを使用するので、Safari で <a href="http://localhost:8000/output.m3u8" target="_blank" rel="external">http://localhost:8000/output.m3u8</a> にアクセスします。</p><p><img src="/images/streaming-technology-basics-for-frontend-engineers/hls-playing.png" alt="Safari で HLS を再生"></p><p>ここでアクセスする Web ブラウザに Safari を指定しているのは、Safari 以外のメジャーブラウザでは HLS をネイティブサポートしていないためです。Safari 以外のブラウザで HLS を再生するには、Flash などのプラグインを使用するか、後述する Media Source API を使用して、JavaScript で追加実装する必要があります。HLS はアップル社が開発したということもあり、Safari だけは m3u8 をロードしてそのまま再生することができます。</p><h3>MPEG-DASH</h3><p>MPEG-DASH は HLS と同様に通信に HTTP を使用したストリーミングプロトコルです。DASH は Dynamic Adaptive Streaming over HTTP の略です。Apple 社が開発した HLS のほかに Microsoft 社が開発した Smooth Streaming や Adobe が開発した HTTP Dynamic Streaming など HTTP ベースのストリーミングプロトコルがいくつかありますが、残念ながら各々互換性がありません。MPEG-DASH は ISO 国際標準規格 (ISO/IEC 23001-6) としてリリースされています。</p><p>MPEG-DASH も HLS 同様、通常の Web サーバーと動画のセグメントファイルとプレイリストを用意するだけで配信ができてしまいます。MPEG-DASH ではセグメントファイルは fragmented mp4 もしくは ts 形式、プレイリストは MPD（Media Presentation Description）と呼ばれる XML で記述されたファイルを用意します。</p><p><img src="/images/streaming-technology-basics-for-frontend-engineers/mpd.png" alt="MPD"></p><h4>簡単な MPEG-DASH の配信を試してみる</h4><p>MPEG-DASH 用のセグメントファイルとプレイリストを用意します。今回はセグメントファイルは fragmented mp4 を使用することにします。まず、ffmpeg を使って動画を fragmented mp4 で映像の圧縮に使う「H.264/AVC」と音声の圧縮に使う「AAC」というコーデックでリエンコードします。コーデックについては後述します。</p><p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ ffmpeg -i ./input.mp4 \</div><div class="line">  -vcodec libx264 \</div><div class="line">  -vb 500k \</div><div class="line">  -r 30 \</div><div class="line">  -x264opts no-scenecut \</div><div class="line">  -g 15 \</div><div class="line">  -acodec aac \</div><div class="line">  -ac 2 \</div><div class="line">  -ab 128k \</div><div class="line">  -frag_duration 5000000 \</div><div class="line">  -movflags frag_keyframe+empty_moov \</div><div class="line">  ./encoded.mp4</div></pre></td></tr></table></figure></p><p>次に MP4Box というツールを使って、動画を分割してセグメントファイルとプレイリストを作成します。</p><p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ MP4Box -frag 4000 \</div><div class="line">  -dash 4000 \</div><div class="line">  -rap \</div><div class="line">  -segment-name sample \</div><div class="line">  -out ./output.mp4 \</div><div class="line">  ./encoded.mp4</div></pre></td></tr></table></figure></p><p>プレイリスト <code>output.mpd</code> と <code>output.m4s</code> と連番になったセグメントファイル郡が作成されます。 <code>output.mpd</code> は下のようになっています。</p><p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="comment">&lt;!-- MPD file Generated with GPAC version 0.6.1-revrelease  at 2016-09-29T12:57:43.136Z--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">MPD</span> <span class="attr">xmlns</span>=<span class="string">"urn:mpeg:dash:schema:mpd:2011"</span> <span class="attr">minBufferTime</span>=<span class="string">"PT1.500S"</span> <span class="attr">type</span>=<span class="string">"static"</span> <span class="attr">mediaPresentationDuration</span>=<span class="string">"PT0H9M56.466S"</span> <span class="attr">maxSegmentDuration</span>=<span class="string">"PT0H0M4.000S"</span> <span class="attr">profiles</span>=<span class="string">"urn:mpeg:dash:profile:full:2011"</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">ProgramInformation</span> <span class="attr">moreInformationURL</span>=<span class="string">"http://gpac.sourceforge.net"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">Title</span>&gt;</span>./output.mpd generated by GPAC<span class="tag">&lt;/<span class="name">Title</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">ProgramInformation</span>&gt;</span></div><div class="line"></div><div class="line"> <span class="tag">&lt;<span class="name">Period</span> <span class="attr">duration</span>=<span class="string">"PT0H9M56.466S"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">AdaptationSet</span> <span class="attr">segmentAlignment</span>=<span class="string">"true"</span> <span class="attr">maxWidth</span>=<span class="string">"320"</span> <span class="attr">maxHeight</span>=<span class="string">"180"</span> <span class="attr">maxFrameRate</span>=<span class="string">"30"</span> <span class="attr">par</span>=<span class="string">"16:9"</span> <span class="attr">lang</span>=<span class="string">"und"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">ContentComponent</span> <span class="attr">id</span>=<span class="string">"1"</span> <span class="attr">contentType</span>=<span class="string">"video"</span> /&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">ContentComponent</span> <span class="attr">id</span>=<span class="string">"2"</span> <span class="attr">contentType</span>=<span class="string">"audio"</span> /&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">Representation</span> <span class="attr">id</span>=<span class="string">"1"</span> <span class="attr">mimeType</span>=<span class="string">"video/mp4"</span> <span class="attr">codecs</span>=<span class="string">"avc3.640014,mp4a.40.2"</span> <span class="attr">width</span>=<span class="string">"320"</span> <span class="attr">height</span>=<span class="string">"180"</span> <span class="attr">frameRate</span>=<span class="string">"30"</span> <span class="attr">sar</span>=<span class="string">"1:1"</span> <span class="attr">audioSamplingRate</span>=<span class="string">"48000"</span> <span class="attr">startWithSAP</span>=<span class="string">"1"</span> <span class="attr">bandwidth</span>=<span class="string">"631708"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">AudioChannelConfiguration</span> <span class="attr">schemeIdUri</span>=<span class="string">"urn:mpeg:dash:23003:3:audio_channel_configuration:2011"</span> <span class="attr">value</span>=<span class="string">"2"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">SegmentList</span> <span class="attr">timescale</span>=<span class="string">"1000"</span> <span class="attr">duration</span>=<span class="string">"4000"</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">Initialization</span> <span class="attr">sourceURL</span>=<span class="string">"outputinit.mp4"</span>/&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">SegmentURL</span> <span class="attr">media</span>=<span class="string">"output1.m4s"</span>/&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">SegmentURL</span> <span class="attr">media</span>=<span class="string">"output2.m4s"</span>/&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">SegmentURL</span> <span class="attr">media</span>=<span class="string">"output3.m4s"</span>/&gt;</span></div><div class="line">     ...略</div><div class="line">     <span class="tag">&lt;<span class="name">SegmentURL</span> <span class="attr">media</span>=<span class="string">"output149.m4s"</span>/&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">SegmentURL</span> <span class="attr">media</span>=<span class="string">"output150.m4s"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">SegmentList</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">Representation</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">AdaptationSet</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">Period</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">MPD</span>&gt;</span></div></pre></td></tr></table></figure></p><p>再び Web サーバーを起動します。</p><p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ python -m SimpleHTTPServer</div></pre></td></tr></table></figure></p><p>HLS とは違い、残念ながら MPEG-DASH をネイティブでサポートしている Web ブラウザはありません。後程 Media Source Extensions を説明するときに MPEG-DASH プレイヤーを作成するので、そこで確認したいと思います。</p><h2>HTML5 で扱うストリーミング</h2><p>HLS と MPEG-DASH は HTML5 用の JavaScript API である Media Source Extensions を利用することで追加でプラグインをインストールすることなく、ストリーミング再生が可能です。</p><h3>Media Source Extensions</h3><p>Media Source Extensions は MSE と呼ばれていますので、本記事でも MSE と表記します。MSE は W3C によって標準化されている HTTP ダウンロードを利用してストリーミング再生するために作られた JavaScript API です。</p><p>MSE で扱うメディアデータは、W3C で定められている仕様に従って、短い時間で区切ったデータ構造にセグメント化されている必要があります。MSE では、セグメントを 2 種類に分けて扱います。</p><ul><li>初期化に必要なヘッダ情報である初期化セグメント</li><li>短い時間で区切られたメディアデータ本体が含まれるメディアセグメント</li></ul><p>MSE は最初に初期化セグメント、その後にメディアセグメントを順番にソース・バッファに渡すと、そのメディアセグメントの順番で再生していきます。</p><h3>MSE で簡単な MPEG-DASH プレイヤーを作成してみる</h3><p>ここでは <code>XMLHttpRequest</code> と <code>MediaSource</code> API を使用して簡単な MPEG-DASH プレイヤーを作成して、先程 ffmpeg と MP4Box で作った MPEG-DASH コンテンツを再生してみます。</p><p>最初に <code>id</code> をつけた <code>video</code> 要素を用意します。</p><p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;video id=<span class="string">"video"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span></div></pre></td></tr></table></figure></p><p>次に <code>XMLHttpRequest</code> で MPD を取得します。MPD は XML ファイルなので、パースして <code>Representation</code> 要素から MIME タイプやコーデックの情報を取得しておきます。</p><p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> type, mpd;</div><div class="line"></div><div class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">xhr.open(<span class="string">"GET"</span>, <span class="string">"http://localhost:8000/output.mpd"</span>, <span class="literal">true</span>);</div><div class="line">xhr.responseType = <span class="string">"document"</span>;</div><div class="line">xhr.overrideMimeType(<span class="string">"text/xml"</span>);</div><div class="line">xhr.onload = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">const</span> mpd = xhr.responseXML;</div><div class="line">  <span class="keyword">const</span> representation = mpd.getElementsByTagName(<span class="string">"Representation"</span>)[<span class="number">0</span>];</div><div class="line">  <span class="keyword">const</span> mimeType = representation.getAttribute(<span class="string">"mimeType"</span>);</div><div class="line">  <span class="keyword">const</span> codecs = representation.getAttribute(<span class="string">"codecs"</span>);</div><div class="line">  type = <span class="string">`<span class="subst">$&#123;mimeType&#125;</span>; codecs="<span class="subst">$&#123;codecs&#125;</span>"`</span></div><div class="line">  mpd = mpd;</div><div class="line">  initializeVideo(); <span class="comment">// 次の関数へ</span></div><div class="line">&#125;;</div><div class="line">xhr.send(<span class="literal">null</span>);</div></pre></td></tr></table></figure></p><p>次に <code>MediaSource</code> API で最初に用意した <code>video</code> 要素を拡張し、ソースとしてダウンロードした動画のセグメントを追加できるようにします。</p><p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mediaSource;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">initializeVideo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  mediaSource = <span class="keyword">new</span> MediaSource();</div><div class="line">  <span class="keyword">const</span> video = <span class="built_in">document</span>.getElementById(<span class="string">"video"</span>);</div><div class="line"></div><div class="line">  mediaSource.addEventListener(<span class="string">"sourceopen"</span>, initializeSourceBuffer, <span class="literal">false</span>); <span class="comment">// mediaSource が開いたらソース・バッファを作成する</span></div><div class="line">  video.src = URL.createObjectURL(mediaSource);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>ソース・バッファを作成し、初期化情報が入ったセグメントとメディア本体のセグメントを追加できるように準備します。</p><p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> sourceBuffer;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">initializeSourceBuffer</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  sourceBuffer = mediaSource.addSourceBuffer(<span class="keyword">this</span>.type);</div><div class="line">  sourceBuffer.addEventListener(<span class="string">"updateend"</span>, appendMediaSegment, <span class="literal">false</span>);</div><div class="line">  appendInitializationSegment(); <span class="comment">// 次の関数へ</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>先に取得した <code>mpd</code> から <code>Initialization</code> 要素の <code>sourceURL</code> の値を取得し、 <code>XMLHttpRequest</code> で取得します。セグメントファイルはバイナリデータなので、 <code>responseType</code> を<code>arraybuffer</code> に指定しておきます。</p><p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">appendInitializationSegment</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">  <span class="keyword">const</span> url = mpd.getElementsByTagName(<span class="string">"Initialization"</span>)[<span class="number">0</span>].getAttribute(<span class="string">"sourceURL"</span>);</div><div class="line">  xhr.open(<span class="string">"GET"</span>, <span class="string">`http://localhost:8000/media/<span class="subst">$&#123;url&#125;</span>`</span>, <span class="literal">true</span>);</div><div class="line">  xhr.responseType = <span class="string">"arraybuffer"</span>;</div><div class="line">  xhr.onload = appendSegment;</div><div class="line">  xhr.send(<span class="literal">null</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>そしてセグメントをロードしたタイミングでソース・バッファに追加します。</p><p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">appendSegment</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">  sourceBuffer.appendBuffer(e.target.response);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>初期化情報がバッファに追加されソースが更新されたら、続けてメディア本体のセグメントファイルを取得し、ソース・バッファに追加します。この処理をメディアセグメントの数だけ繰り返します。</p><p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> segmentIndex = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">appendMediaSegment</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">  <span class="keyword">const</span> url = mpd.getElementsByTagName(<span class="string">"SegmentURL"</span>)[segmentIndex++].getAttribute(<span class="string">"media"</span>);</div><div class="line">  xhr.open(<span class="string">"GET"</span>, <span class="string">`http://localhost:8000/media/<span class="subst">$&#123;url&#125;</span>`</span>, <span class="literal">true</span>);</div><div class="line">  xhr.responseType = <span class="string">"arraybuffer"</span>;</div><div class="line">  xhr.onload = appendSegment;</div><div class="line">  xhr.send(<span class="literal">null</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2>メディアセグメント - 動画とは何か</h2><p>HLS や MPEG-DASH などのストリーミング配信では、セグメントファイルが実際の動画データになります。本記事の最初に書いた通り、動画データの容量は大きいです。ストリーミング配信の仕組みだけでは、動画の再生開始までの待ち時間は短かくすることはできても、再生を続けるために必要な１秒あたりのデータ量は減らすことはできません。ストリーミング再生では 1 秒あたりに必要なデータ量を少なくとも 1 秒以内に取得し続ける必要があります。でないと再生を継続できません。</p><p>同じ情報量を表現するデータの容量を小さくしたい場合、データに圧縮処理をかけます。圧縮のアルゴリズムはいくつもありますが、動画は映像と音声で構成されているため、映像の圧縮に適したアルゴリズムと音声の圧縮に適したアルゴリズムは異なることを考慮する必要があります。映像圧縮に適したアルゴリズムで処理した映像ファイルと音声圧縮に適したアルゴリズムで処理した音声ファイルを１つのファイルとしてまとめたものが動画ファイルです。</p><h2>コンテナとコーデック</h2><p>動画ファイルは映像ファイルと音声ファイルをまとめたものと説明しましたが、このまとめ方の形式のことをコンテナフォーマットといいます。また、映像データや音声データを圧縮するアルゴリズムのことをコーデックといいます。</p><p><img src="/images/streaming-technology-basics-for-frontend-engineers/containers-codecs.png" alt="コンテナとコーデック"></p><h3>コンテナ</h3><p>コンテナフォーマットは一般的にコンテナと略します。コンテナと呼ぶと難しそうですが、コンテナはファイルフォーマットの１種なので、私たちが普段動画ファイルとして意識している単位と一致します。ファイルフォーマットとはファイルの保存形式のことです。以下にリストしたものが代表的なコンテナですが、聞いたことがある名前が多いと思います。</p><ul><li>AVI</li><li>MP4</li><li>MOV</li><li>MPEG</li><li>MKV</li><li>WMV</li><li>FLV</li><li>ASF</li></ul><p>コンテナは映像と音声データがどのように格納されるのかを定義しています。また動画は映像と音声を同時に再生する必要があるため、両者の同期を取るための情報もコンテナが格納しています。ほかにも動画タイトルや説明などのメタ情報、字幕などの情報もコンテナが格納されている場合があります。</p><p>コンテナは対応しているコーデックの映像と音声データのみ格納することができます。１つのコンテナがいくつかのコーデックに対応している場合も多々あるので、コンテナの種類が分かっても格納されているコーデックの種類は分かりません。そのため、動画プレイヤーが同じコンテナで保存された２つの動画ファイルのうち、片方だけ再生できるということもあります。</p><p>たとえば Flash 動画のコンテナである FLV は映像コーデックとして「Sorenson Spark」と「H.264/AVC」を格納できます。もし動画プレイヤーが「Sorenson Spark」には対応していても 「H.264/AVC」には対応していなかった場合、「Sorenson Spark」を格納している FLV ファイルは再生できても、「H.264/AVC」を格納している FLV ファイルはコーデックエラーが発生して再生できません。</p><h3>コーデック</h3><p>映像や音声は圧縮する必要があります。特にストリーミング再生などのデータ通信と再生を同時に行うような場合は必須です。コーデックはその圧縮のアルゴリズムです。</p><p>なぜ映像を圧縮する必要があると言うと、映像はたくさんの静止画をパラパラマンガのようにめくって人間の目に物体や背景が動いているように見せているので、このたくさんの静止画は情報量として膨大なのです。</p><p>映像を構成する画像データはラスタという色のついたピクセルの集合で表現します。1 ピクセルの情報量は 24 bit で表現できます（24bit フルカラーの場合、R -赤- G -緑- B -青- の各色成分につき 256 段階の指定ができるため、1 ピクセルは <code>Math.log2(256 * 256 * 256) = 24 bit</code> の情報量が必要）。</p><p>そうすると例えば、フル HD の 1 フレームを構成する 1920 * 1080 ピクセルの情報量は 49,766,400 (= 24 * 1920 * 1080) bit になります。これはまだ 1 フレームなので、24 fps の動画の場合、1 秒間に 1,194,393,600 (= 49,766,400 * 24) bit が必要になります。</p><p>これは 1 秒間に 1,194 Mbit のデータを通信を介して取得する必要があるということになります。しかし、例えば受信実効速度が 76.6Mbps と記載されているソフトバンク提供の超高速データ通信サービス <a href="http://www.softbank.jp/mobile/network/explanation/4glte/" target="_blank" rel="external">SoftBank 4G LTE</a> でデータ通信をした場合でも、 1 秒間に取得できるデータ量は 76.6 Mbit なので、先程の 1,194 Mbit に遠く及びません。</p><p>しかし、この 1,194 Mbit の映像データは「H.264/AVC」というコーデックで圧縮した場合、典型的な圧縮率としては 1/100 のデータ量に圧縮することができます。すると 12 Mbit 程度になるので、76.6 Mbps のデータ通信速度でも視聴が可能になります。</p><p>この「H.264/AVC」は AbemaTV でも映像コーデックとして使用していますが、映像コーデックにはほかにも以下のような種類があります。</p><ul><li>H.265</li><li>VP8</li><li>VP9</li><li>MPEG-4</li><li>WMV9</li></ul><p>ここでは映像コーデックしか取り上げませんが、音声コーデックは代表的なものに「AAC」や「MP3」があり、AbemaTV では「AAC」を使用しています。</p><p>コーデックはデータ量を圧縮するものですが、ただデータ量を減らせればいいのではなく、人間が知覚できる範囲の画質や音質を落とすことなく圧縮しなくてはいけません。なので、選択するコーデックが悪いと画質や音質を落とすことになります。</p><h2>AbemaTV で使用しているコンテナ MPEG-2 TS</h2><p>「MPEG-2 TS」は MPEG-2 システムのうち放送・通信用のコンテナです。地上波デジタル放送でも使用されているコンテナですが、HLS でも「MPEG-2 TS」を使用します。DevTools の Network パネルを開いた状態で AbemaTV の動画を視聴しているとたくさんの <code>**.ts</code> という拡張子のデータがリクエストされるのが確認できます。これが「MPEG-2 TS」のファイルです。</p><p>「MPEG-2 TS」は放送・通信用に作られたコンテナのため、通信途中でデータが途切れたとしてもちゃんと再生できるように設計されています。「MPEG-2 TS」では動画を 184 バイト単位のデータに分割し、それに 4 バイトの TS ヘッダと呼ばれるデータを付加して計 188 バイト固定長のパケットを連続で転送することでデータ伝送を行います。4 バイトの TS ヘッダのうち最後の 4bit は巡回カウンターと呼ばれるデータを持っていて、これがパケットごとに 1 ずつカウンターするため、これを検査することでパケットの欠落がないかを確認できるようになっています。</p><p><img src="/images/streaming-technology-basics-for-frontend-engineers/ts-packet.png" alt="TS パケット"></p><p>MPEG-2 システムには蓄積メディア用のコンテナとして別に「MPEG-2 PS」がありますが、こちらはデータが連続していることが前提なので、ランダムアクセスなどに優れた設計になっています。</p><h2>AbemaTV で使っている映像コーデック H.264/AVC</h2><p>AbemaTV では「MPEG-2 TS」コンテナに「H.264/AVC」コーデックで圧縮した映像データを格納しています。「H.264/AVC」は正式名称を「H.264」もしくは「MPEG-4 Part 10 Advanced Video Coding」といいます。（正式名称が２つあるのは ITU-T と ISO/IEC という２つの組織が共同で策定したものをそれぞれの名称をつけているだけです。）「MPEG-4」という名前が付けられている通り、その圧縮アルゴリズムの原理は、従来方式の「MPEG-1」、「MPEG-2」を継承しています。ここでは「MPEG」の圧縮アルゴリズムの原理を学んでいきます。</p><h3>圧縮の基本</h3><p>データを圧縮する基本は</p><ul><li>出現するデータパターンに偏りを持たせること</li><li>出現頻度が高いパターンを短く表現すること</li></ul><p>です。単純な例で見ていきます。</p><h4>出現頻度が高いパターンを短く表現する</h4><p>たとえば、文字 a-d があったとき、それらを識別する符号を下記のように表現できます。</p><table><thead><tr><th>文字</th><th>符号</th></tr></thead><tbody><tr><td>a</td><td>00</td></tr><tr><td>b</td><td>01</td></tr><tr><td>c</td><td>10</td></tr><tr><td>d</td><td>11</td></tr></tbody></table><p>文字列「bbabcbdbaacba」は「01 01 00 01 10 01 11 01 00 00 10 01 00」という符号で表現されます。この文字列を表現するのに必要なデータ量は 26(=2*13)bit です。この文字列にて、各々の文字の出現回数は均一ではありません。</p><table><thead><tr><th>文字</th><th>出現回数</th><th>出現率</th></tr></thead><tbody><tr><td>a</td><td>4</td><td>0.31</td></tr><tr><td>b</td><td>7</td><td>0.54</td></tr><tr><td>c</td><td>2</td><td>0.15</td></tr><tr><td>d</td><td>1</td><td>0.08</td></tr></tbody></table><p>そこで出現回数が 1 番多い b に 1 番短い符号、2 番目に多い a に次に短い符号を割り当ててみます。</p><table><thead><tr><th>文字</th><th>符号</th></tr></thead><tbody><tr><td>a</td><td>10</td></tr><tr><td>b</td><td>0</td></tr><tr><td>c</td><td>110</td></tr><tr><td>d</td><td>111</td></tr></tbody></table><p>すると先程の文字列「bbabcbdbaacba」は「0 0 10 0 110 0 111 0 10 10 110 0 10」と表現されますが、データ量が 23bit に減りました。このように、データの出現頻度が均一ではなく偏りがあると、異なる長さの符号を割り当てることによりデータ量を圧縮することができます。</p><p>このように可変長の符号を出現頻度に応じて割り当てることエントロピー符号といいますが、その割り当てパターンを作成する方法の 1 つに<strong>ハフマン符号</strong>があります。</p><p><img src="/images/streaming-technology-basics-for-frontend-engineers/huffman.png" alt="ハフマン符号"></p><p>この図のように出現確立が高いものからツリー上に符号を割り当てていきます。これにて全ての文字が一意かつ瞬時に解読できる少ないデータ量の符号を作成することができます。</p><h4>出現するデータパターンに偏りを持たせる</h4><p>一見出現率に偏りがない場合でも情報の表現方法を変えることでデータの出現頻度に偏りを持たせることができます。</p><p>たとえば、「1 2 3 2 1 0 -1 -2」のような数列はそのままだと下記のような出現回数ですが、</p><table><thead><tr><th>数字</th><th>出現回数</th><th>出現率</th></tr></thead><tbody><tr><td>-2</td><td>1</td><td>0.125</td></tr><tr><td>-1</td><td>1</td><td>0.125</td></tr><tr><td>0</td><td>1</td><td>0.125</td></tr><tr><td>1</td><td>2</td><td>0.25</td></tr><tr><td>2</td><td>2</td><td>0.25</td></tr><tr><td>3</td><td>1</td><td>0.125</td></tr></tbody></table><p>これを前の数字との差分として表現すると「1 2 3 2 1 0 -1 -2」→「0 +1 +1 -1 -1 -1 -1 -1」となり、データの出現頻度に大きな偏りを作ることができました。</p><table><thead><tr><th>差分</th><th>出現回数</th><th>出現率</th></tr></thead><tbody><tr><td>0</td><td>1</td><td>0.125</td></tr><tr><td>+1</td><td>2</td><td>0.25</td></tr><tr><td>-1</td><td>5</td><td>0.625</td></tr></tbody></table><p>これをハフマン符号することでデータを圧縮することができます。</p><h3>MPEG の圧縮</h3><p>文字列や数列データの圧縮の例について見てきましたが、動画圧縮の場合も基本的な考え方は同様です。しかし、MPEG の場合は動画特有の性質を利用して圧縮率を高める工夫をしています。</p><p>MPEG の圧縮アルゴリズムは静止画の圧縮と映像の圧縮で構成されています。</p><ul><li>静止画自体のデータサイズを圧縮する</li><li>連続する映像フレームのデータの差分だけを記録する</li></ul><h3>静止画の圧縮</h3><p>MPEG の静止画の圧縮アルゴリズムの基礎は画像圧縮規格である「JPEG」です。<code>**.jpg</code> の拡張子で馴染のアレです。</p><p>静止画の圧縮アルゴリズムは簡単に以下のようなことを行います。</p><ul><li>画像は隣り合うピクセルが似ているという特徴を利用して差分情報だけで表現する</li><li>人間の目が変化に鈍感な情報を省略する</li><li>エントロピー符号する</li></ul><h4>画像は隣り合うピクセルが似ている</h4><p>たとえば空の写真を撮影した場合、その画像を構成するピクセルの多くは空の青色と雲の白色の微妙な色味の変化になると思います。空ほど色数が少なくない写真や絵の場合でも、基本的に画像は色が段階的にしか変化していないピクセルの方が出現頻度が圧倒的に多く、急な変化の頻度は少ないはずです。</p><p><img src="/images/streaming-technology-basics-for-frontend-engineers/xsky_00001.jpg" alt="空"></p><p>この画像の性質を利用して、画像データの出現頻度に偏りを作って符号化することを <strong>DPCM 符号化</strong>といいます。</p><h4>人間の目が変化に鈍感な情報を省略する</h4><p>MPEG は<strong>離散コサイン変換</strong>という演算を行うことで、人間の目にあまり目立たない細かい情報をデータから取り除いてしまうことで圧縮率を上げています。離散コサイン変換は英語では Discrete Cosine Transform というので DCT と略されます。</p><p>DCT では画像を波形として扱い、フーリエ変換のように周波数ごとの波の強度で画像を表現します。ここで高い周波数の波は人間の目にあまり目立たない情報となるので、省略してしまうことで画質への影響を最小限に抑えながら圧縮率を高めることが可能になります。</p><p><img src="/images/streaming-technology-basics-for-frontend-engineers/DCT.png" alt="DCT"></p><h4>エントロピー符号</h4><p>ここまで静止画の圧縮について、DPCM 符号化と DCT の処理を見てきましたが、これらで求められた値をエントロピー符号することで更に圧縮効率を高めます。</p><h3>映像の圧縮</h3><p>静止画の圧縮では、映像における 1 枚 1 枚のフレームのデータ量を削減しました。映像の圧縮では、時間の流れを利用してデータの圧縮率を高める工夫をしています。</p><h4>画素の省略</h4><p>MPEG では画素情報を RGB ではなく、<strong>輝度信号（Y）</strong>、 <strong>色差信号（Cr）（Cb）</strong> で表現します。RGBの各成分、輝度信号（Y）、色差信号（Cr）（Cb）の関係は下記です。</p><p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Y = <span class="number">0.299</span>*R + <span class="number">0.587</span>*G + <span class="number">0.114</span>*B</div><div class="line">Cr = <span class="number">0.500</span>*R - <span class="number">0.419</span>*G - <span class="number">0.081</span>*B</div><div class="line">Cb = <span class="number">-0.169</span>*R - <span class="number">0.332</span>*G + <span class="number">0.500</span>*B</div></pre></td></tr></table></figure></p><p>人間の目は明るさの変化に対しての方が色の変化に対してより敏感です。MPEG ではその人間の視覚の癖を利用し、フレームごとに Cr と Cb 信号を画素の情報から省いています。Cr と Cb が少々省かれたとしても 明るさの情報である Y が省かれていなければ、人はそれ程違和感を感じないのです。</p><p><img src="/images/streaming-technology-basics-for-frontend-engineers/y-cr-cb.png" alt="CrCb の省略"></p><h4>フレーム間予測</h4><p>静止画の場合と似ていますが、映像の場合も時間的に隣合うフレームが持つ画像は似ているはずです。MPEG はその映像の特徴を利用して、映像のフレームにその画像を表示するための全ての情報を持たせません。MPEG には 3 種類のフレームがあります。</p><ul><li>I ピクチャ</li><li>P ピクチャ</li><li>B ピクチャ</li></ul><p><strong>I ピクチャ</strong>を除いて、他のフレームが持ってる情報と自身が持ってる情報を合わせて画像を表示することができるようになります。この 3 種類はそれぞれ役割りが違います。<strong>I ピクチャ</strong>は画像を表示するための全ての情報を持っています。<strong>P ピクチャ</strong>は過去に表示した<strong>I ピクチャ</strong>もしくは<strong>P ピクチャ</strong>が持っていたデータとその差分データを使用して画像を表示します。<strong>B ピクチャ</strong>は過去だけではなく未来の<strong>I ピクチャ</strong>もしくは<strong>P ピクチャ</strong>が持っているデータを利用することでより圧縮率を高めます。</p><p><img src="/images/streaming-technology-basics-for-frontend-engineers/ipb-pictures.png" alt="I/P/B ピクチャ"></p><h2>まとめ</h2><p>動画は昔からある技術分野ですが、Web のフロントエンドエンジニアだった自分には足を踏み込んだら分からないことだらけの難しい分野だと感じました。しかし、最近はストリーミング関連の技術も進み、Web においても動画を扱った事業に関わることが増えてきています。本記事は社内勉強会向けですが、フロントエンドエンジニア視点から動画を学んでいくスタートポイントになればと思います。</p><h2>参考</h2><p><strong>HTTP Live Streaming</strong></p><p><a href="https://en.wikipedia.org/wiki/HTTP_Live_Streaming" target="_blank" rel="external">https://en.wikipedia.org/wiki/HTTP_Live_Streaming</a></p><p><strong>H.264</strong></p><p><a href="https://ja.wikipedia.org/wiki/H.264" target="_blank" rel="external">https://ja.wikipedia.org/wiki/H.264</a></p><p><strong>MPEG-2システム</strong></p><p><a href="https://ja.wikipedia.org/wiki/MPEG-2%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0" target="_blank" rel="external">https://ja.wikipedia.org/wiki/MPEG-2%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0</a></p><p><strong>HLSとは</strong></p><p><a href="http://qiita.com/STomohiko/items/eb223a9cb6325d7d42d9" target="_blank" rel="external">http://qiita.com/STomohiko/items/eb223a9cb6325d7d42d9</a></p><p><strong>ffmpeg で mp4 をiPhone用のストリーミング（HLS）に対応させる。</strong></p><p><a href="http://takuya-1st.hatenablog.jp/entry/2016/04/06/034906" target="_blank" rel="external">http://takuya-1st.hatenablog.jp/entry/2016/04/06/034906</a></p><p><strong>MPEG DASHを知る</strong></p><p><a href="http://qiita.com/gabby-gred/items/c1a3dbe026f83dd7e1ff" target="_blank" rel="external">http://qiita.com/gabby-gred/items/c1a3dbe026f83dd7e1ff</a></p><p><strong>MPEG-DASH content generation with MP4Box and x264</strong></p><p><a href="https://bitmovin.com/mp4box-dash-content-generation-x264/" target="_blank" rel="external">https://bitmovin.com/mp4box-dash-content-generation-x264/</a></p><p><strong>Media Source Extensionsを使ってみた (MP4編)</strong><a href="http://qiita.com/tomoyukilabs/items/54bd151aba7d3edf8946" target="_blank" rel="external">http://qiita.com/tomoyukilabs/items/54bd151aba7d3edf8946</a></p><p><strong>動画・音声の規格について ~コーデック・コンテナ~</strong></p><p><a href="http://michisugara.jp/archives/2011/video_and_audio.html" target="_blank" rel="external">http://michisugara.jp/archives/2011/video_and_audio.html</a></p><p><strong>VIDEO-ITを取り巻く市場と技術</strong></p><p><a href="http://www.mpeg.co.jp/libraries/video_it/index.html" target="_blank" rel="external">http://www.mpeg.co.jp/libraries/video_it/index.html</a></p><p><strong>動画形式の種類と違い（AVI･MP4･MOV･MPEG･MKV･WMV･FLV･ASF等）【コンテナ】</strong></p><p><a href="http://aviutl.info/dougakeisiki-konntena/" target="_blank" rel="external">http://aviutl.info/dougakeisiki-konntena/</a></p><p><strong>【動画が再生できない!?】そんなときに必ず役立つ5つの知識</strong></p><p><a href="http://smarvee.com/column/can-not-play/" target="_blank" rel="external">http://smarvee.com/column/can-not-play/</a></p><p><strong>「映像がH.264/AVCでエンコードされたFLV」を「FLV5」と呼ぶのは間違い</strong></p><p><a href="http://goldenhige.cocolog-nifty.com/blog/2009/10/h264avcflvflv5-.html" target="_blank" rel="external">http://goldenhige.cocolog-nifty.com/blog/2009/10/h264avcflvflv5-.html</a></p><p><strong>量子化行列のナゾ～その１</strong></p><p><a href="http://www.nnet.ne.jp/~hi6/lab/quantize/" target="_blank" rel="external">http://www.nnet.ne.jp/~hi6/lab/quantize/</a></p><p><strong>モニタ解像度 図解チャート＆一覧 / monitor resolution data sheet&amp;chart</strong></p><p><a href="http://www.quel.jp/etc/monitor-size/" target="_blank" rel="external">http://www.quel.jp/etc/monitor-size/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://abema.tv/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AbemaTV&lt;/a&gt; という動画サービスをリリースしてから半年経ち、新しくサービスのフロントエンドに関わる人数が少し増えてきたため、動画に関して社内で勉強
      
    
    </summary>
    
      <category term="Video" scheme="https://ygoto3.com/categories/Video/"/>
    
    
      <category term="HLS MPEG-DASH MSE video" scheme="https://ygoto3.com/tags/HLS-MPEG-DASH-MSE-video/"/>
    
  </entry>
  
  <entry>
    <title>フロントエンド視点：デザイナーと協業して作るスタイルガイドの難易度を下げる</title>
    <link href="https://ygoto3.com/posts/make-style-guide-easy/"/>
    <id>https://ygoto3.com/posts/make-style-guide-easy/</id>
    <published>2016-05-18T03:28:51.000Z</published>
    <updated>2019-02-13T03:11:50.328Z</updated>
    
    <content type="html"><![CDATA[<p>前回 <a href="/posts/atomic-design-on-actual-project/">Atomic Design を実案件に導入した話</a>で触れたコンポーネントリストを作り始めたとき、個人的にいろいろと学びがありました。</p><p>コンポーネントリストやスタイルガイドは、フロントエンドエンジニアとデザイナーが協業して作る必要がありますが、この協業がなかなかうまくいかず、スタイルガイド運用をワークさせるのは難易度が高い印象がありました。</p><p>自分自身、今まで携ってきた開発プロジェクトにおいて、うまくワークしたと思えるスタイルガイド作りができなかったのですが、<a href="https://abema.tv/" target="_blank" rel="external">現在のプロジェクト</a>で開発初期からスタイルガイドを作り、リリース後、運用フェーズまでワークさせることができました。</p><p>本記事ではフロントエンドエンジニアとデザイナーが協業してスタイルガイドを作り始めるにあたって気をつけたことについて書いていきます。</p><h2>共通言語としてのスタイルガイド</h2><p>開発において、スタイルガイドが欲しい理由は、開発中のコミュニケーションにおいて、デザインを言語化できないことが多いからです。スタイルガイドの役割はデザイナー以外の職種にも通じる（デザイン要素に関する）共通言語として働くことです。そしてたぶんメインデザイナーとそれ以外のデザイナー間での共通言語としても働いてくれると思います。</p><p>１つの作業を２者で行う場合、２者の間に共通言語がないと、コミュニケーションコストは一気に高くなります。今の職場では、基本的にデザインとフロントエンドエンジニアリングは分業しているので、デザイナーがエンジニアリングを理解するか、エンジニアがデザインを理解するか、いずれかの状況でない限り（もしくはその状況であったとしても）、コミュニケーションコストは高いです。それを下げる意味でスタイルガイドを作ることは開発において大きな意味を持ちます。</p><h2>スタイルガイドは死にやすい</h2><p>しかし、たとえ本格的に開発が始まる前にスタイルガイドを作ったとしても、スタイルガイドがプロダクトのデザインで使えるものになっていなければ、いずれ誰からも参照されない状態になってしまいます。</p><p>過去に別のサービスを作っていた際、開発速度を上げるため最初にスタイルガイド／コンポーネントリストを定義し、 それを PSD ファイルで管理するようにしました。以降、画面デザインはそのコンポーネントを使って行う手法を試みました。しかし、残念ながらそのコンポーネントをそのまま使うことは少なかったです。</p><p>デザイナーがプロダクトの画面デザインを先に行うことなく、プロダクトの画面上で実際に起こる問題に対して、デザイン的な解決を汎用的なコンポーネントに落とし込むことができなかったからです。実際に画面上に定義したコンポーネントを置いたときに、解決すべき問題が解決できないことが頻発しました。</p><p>問題の解決を行うに足りるコンポーネントがないと、新しいコンポーネントを別途作るしかないので、コンポーネントは延々と増え続け、管理できなくなり、そのサービスをリリースする頃には誰もスタイルガイドを見ることはなくなっていました。</p><h2>予想以上に開発初期にスタイルガイドを作ることは難しい</h2><p>タイトなスケジュールでスタイルガイドを見直す時間もなかったのと、見直すこと自体を開発フローに組み込んでいなかったため、スタイルガイドは作っただけで意味のないものになってしまいました。</p><p>レギュレーションをしっかり決めた方が今後のデザインにブレがなくなるだろうという想いもあり、最初からスタイルガイドにいろいろと定義をつめこみすぎたために（そしてその定義が完璧とは程遠いため）、デザイナーも窮屈になってしまったのだと思います。デザイナーが早々にスタイルガイドを参照することをやめてしまっていました。</p><p>自分たちが思っていた以上にスタイルガイドを最初から完璧に作ることは難しかったのです。</p><h2>エンジニア主導だったスタイルガイド作り</h2><p>そしてエンジニア主導でスタイルガイドを作った点もスタイルガイドが死んでいった要因だったように思います。そのときのデザイナーはスタイルガイドを作ることにあまり利点を感じていなかったように思います。今思えば、自分たちエンジニアも、デザイナーにスタイルガイドの利点を伝えきれていなかったと思うので、当然かもしれません。スタイルガイドがある開発フローに対して成功体験がなかったので、伝えきれるわけもないとも思います。</p><p>特に開発初期は、エンジニアが主導になってスタイルガイドを完璧に作ることはほぼ無謀に近いでしょう。これから実際にデザインを考えていくのはデザイナーです。しかし、スタイルガイドを作るというモチベーションはエンジニア側にあることが（少なくとも自分の周りでは）多いように感じます。</p><p>スタイルガイドを作るモチベーションがデザイナーよりエンジニア側にある場合、エンジニアは主導になるのではなく、ファシリテーターとして動くように意識すべきだったなと思います。</p><p>もろもろの後悔もあって、今のプロジェクトで開発を開始した時、なんとかリリースまで生き続けるスタイルガイドを作ろうと思いました。とりあえずちょっとした成功体験があるだけでも今後の視野が変わりそうだなと。</p><h2>デザイナー以外でもデザインを判断できる状況を目指す</h2><p>フロントエンドエンジニアの視点で言うと、デザインに関して、デザイナーしか判断できない事柄が多すぎるのは大きなツラミです。デザイナーしか判断できない状況は、Photoshop や Sketch のデータから読み取れない事柄において、全てデザイナーに判断を仰ぐ必要がある状態です。それはとてつもなくコミュニケーションコストが高いのです。コミュニケーションコストが高いからと言って、エンジニアが勝手に解釈して実装してしまえば、デザイナーに意図に沿わず、結局実装後に修正することになり、更に工数が膨れます。</p><p>コミュニケーションコストを下げるためにも、デザイナーの頭の中がプロジェクト全体に共有され、簡単なことであれば徐々にエンジニアでもデザインに関する判断を下せるようになっていけるのが理想です。生きたスタイルガイドがあれば、デザイン要素に関する最低限の判断は誰でもできる状態にすることができます。仕組みによって、判断しなくて良い状況を増やすからです。</p><p>そしてスタイルガイドを作る過程では、デザインを論理的な言葉に置き替えていく必要もあるため、その作業をエンジニアが一緒に行うことでデザイナーがビジュアルを通じてユーザーに伝えようとしている意図を言葉で理解する手助けになります。</p><h2>箱だけスタイルガイドを作る</h2><p>過去の後悔を踏まえつつ、デザイナーとエンジニアが無理なく協業できる方法を工夫しようと考えました。特にデザイナーに負担が少ないように、できるだけ最初は既存のデザインフローを変えないように心掛けました。</p><ul><li>スタイルガイドは最初から定義しすぎないようにする</li><li>作りながら定義を追加していく</li></ul><p>開発開始時はスタイルガイドには何も定義がされていない状態にしました。ただ、これから定義していく項目だけ決めておくことにしました。中身がない箱だけ用意したイメージです。決める項目というのは、一般的な Web アプリケーションに最低限必要そうな要素です。</p><ul><li>アプリケーションの基本的な背景色や文字色、ボタン色などのカラーコードを今後決める</li><li>要素感の余白のサイズやフォントサイズ、ボーダーの幅、角丸の大きさを今後決める</li><li>ＵＩアニメーションの長さやイージングを今後決める</li></ul><p>などです。今後決める、となっているのは、背景色やフォントサイズなどの値はこの時点で決めないからです。この時点では今後決める項目だけを決めます。</p><p>このタイミングで挙げた項目のほかにも必要になる項目は出てくるとは思いますが、必要になったときに追加すれば良いと割り切りました。定義する項目の粒度がパターンとして分かる程度にしておきます。こうしておくことで後から追加する項目の粒度も揃いやすくなります。</p><h2>スタイルガイドのたたきを Sketch で作る</h2><p>上記の項目を箱として用意し、実際の値としては定義していない状態で、スタイルガイドを Sketch データにします。</p><p><img src="/images/make-style-guide-easy/style-guide-sketch.png" alt="スタイルガイド Sketch データ"></p><p>上の画像で <code>NO SET</code> となっているところが実際の値が定義されていない項目です。この時点で決まっている値があれば定義し、決まっていない、分からない値については無理に決めず、 <code>NO SET</code> としておきます。</p><p>そして、Sketch で設定した値を CSS のカスタムプロパティとして設定します。（今回のプロジェクトでは cssnext を使用しているため、カスタムプロパティとして設定しました。Sass や Stylus などでも変数で設定しても良いかもしれません。）</p><p><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">:root &#123;</div><div class="line"></div><div class="line">  <span class="comment">/* background */</span></div><div class="line">  --bg-regular: <span class="number">#000000</span>;</div><div class="line">  --bg-highlight: <span class="number">#f0163a</span>;</div><div class="line">  --bg-hover: <span class="number">#191919</span>;</div><div class="line">  --bg-active: none;</div><div class="line"></div><div class="line">  <span class="comment">/* background - light */</span></div><div class="line">  --lt-bg-regular: <span class="number">#ffffff</span>;</div><div class="line">  --lt-bg-highlight: <span class="number">#f0163a</span>;</div><div class="line">  --lt-bg-hover: <span class="number">#fafafa</span>;</div><div class="line">  --lt-bg-active: <span class="number">#fafafa</span>;</div><div class="line"></div><div class="line">  <span class="comment">/* font size */</span></div><div class="line">  --<span class="attribute">font-size</span>-xxl: <span class="number">22px</span>;</div><div class="line">  --<span class="attribute">font-size</span>-xl: <span class="number">18px</span>;</div><div class="line">  --<span class="attribute">font-size</span>-l: <span class="number">16px</span>;</div><div class="line">  --<span class="attribute">font-size</span>-m: <span class="number">14px</span>;</div><div class="line">  --<span class="attribute">font-size</span>-s: <span class="number">13px</span>;</div><div class="line">  --<span class="attribute">font-size</span>-xs: <span class="number">12px</span>;</div><div class="line">  --<span class="attribute">font-size</span>-xxs: <span class="number">11px</span>;</div><div class="line"></div><div class="line">  <span class="comment">/* font color */</span></div><div class="line">  --<span class="attribute">font</span>-<span class="attribute">color</span>-regular: <span class="number">#eeeeee</span>;</div><div class="line">  --<span class="attribute">font</span>-<span class="attribute">color</span>-success: none;</div><div class="line">  --<span class="attribute">font</span>-<span class="attribute">color</span>-danger: <span class="number">#f0163a</span>;</div><div class="line">  --<span class="attribute">font</span>-<span class="attribute">color</span>-warning: <span class="number">#f0163a</span>;</div><div class="line">  --<span class="attribute">font</span>-<span class="attribute">color</span>-info: <span class="number">#8c8c8c</span>;</div><div class="line">  --<span class="attribute">font</span>-<span class="attribute">color</span>-<span class="selector-tag">link</span>: <span class="number">#6fb900</span>;</div><div class="line">  --<span class="attribute">font</span>-<span class="attribute">color</span>-<span class="selector-tag">link</span>-hover: <span class="number">#c5c5c5</span>;</div><div class="line">  --<span class="attribute">font</span>-<span class="attribute">color</span>-active: none;</div><div class="line"></div><div class="line">  <span class="comment">/* font color - light */</span></div><div class="line">  --lt-<span class="attribute">font</span>-<span class="attribute">color</span>-regular: <span class="number">#1a1a1a</span>;</div><div class="line">  --lt-<span class="attribute">font</span>-<span class="attribute">color</span>-success: none;</div><div class="line">  --lt-<span class="attribute">font</span>-<span class="attribute">color</span>-danger: <span class="number">#f0163a</span>;</div><div class="line">  --lt-<span class="attribute">font</span>-<span class="attribute">color</span>-warning: <span class="number">#f0163a</span>;</div><div class="line">  --lt-<span class="attribute">font</span>-<span class="attribute">color</span>-info: <span class="number">#8c8c8c</span>;</div><div class="line">  --lt-<span class="attribute">font</span>-<span class="attribute">color</span>-<span class="selector-tag">link</span>: <span class="number">#6fb900</span>;</div><div class="line">  --lt-<span class="attribute">font</span>-<span class="attribute">color</span>-<span class="selector-tag">link</span>-hover: <span class="number">#c5c5c5</span>;</div><div class="line">  --lt-<span class="attribute">font</span>-<span class="attribute">color</span>-active: none;</div><div class="line"></div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>上のコードで <code>none</code> となっているところは、Sketch で <code>NO SET</code> としたところと同じ意味です。定義できている値のみ設定して、定義できていないものはプロパティ名だけ用意しておいて <code>none</code> を設定しておきます。</p><p>プロダクトの UI コンポーネントにあてる CSS は基本的にこのカスタムプロパティを参照し、特別な理由がない限り、値をハードコードすることを避けるようにします。</p><p>ここで、最初に Sketch でスタイルガイドを作るのは、Sketch から始める方がデザイナーが心理的な障壁なく作業に入りやすいためです。最終的にスタイルガイドは HTML で管理する方がプロダクトのコードと同期しやすいので、本当は Sketch を介さず、最初から CSS のカスタムプロパティと HTML でドキュメント化できると、効率は良さそうにも思います。ただ、ステップをファシリテートするという意味では、Sketch や Photoshop などから始める方が良いように個人的には思い、今回のプロジェクトでは Sketch から始めました。</p><h2>Interface Inventory を実践しながら箱を埋めていく</h2><p>ここまでで、今後決める項目は決めることができたので、ここからは項目に実際の値を入れていきます。箱を埋めていく作業です。箱を埋める作業は各画面のデザインカンプを作りながら、必要に応じて進めていきます。</p><p><a href="/posts/atomic-design-on-actual-project/">前回の投稿</a>で、<a href="http://bradfrost.com/blog/post/interface-inventory/" target="_blank" rel="external">Interface Inventory</a> をゆるく実践したと書きましたが、このように、デザイナーにはデザインカンプを通常通り作ってもらいながら、カンプ上で使用した色やフォントサイズなどで、定義していない値を使うたびに適切な項目への値として埋めていくようにしてもらいました。</p><p>フロントエンドエンジニアもカスタムプロパティを参照して CSS を書くので、定義されていない値がカンプに出現した場合は、デザイナーと話してその値をどの項目として定義するかを決めてから実装することにします。これを繰り返してスタイルガイドに定義する値を徐々に埋めていくことになります。</p><p>デザイナーの中には画面上に色などのデザイン要素を配置するとき、感覚で配置されている方もいると思います。そういったデザイナーとの協業だった場合でも、最初に埋めるべき箱がデザイン要素としての意味を持った名前とともに用意されているので、名前の意味と異なるカラーコードが出てきたら、そのカラーコードを見直すきっかけになります。</p><p>そして、既存のどの箱にも適切に入らない値が出てきたタイミングにのみ、新しい箱を用意します。</p><h2>新規の箱は既存の箱と十分と向き合ってから作る</h2><p>新しい箱に入れる必要がある新規の値がデザインカンプ上に出現した時に意識したいのが、箱を本当に新規で追加する価値があるのかを再度デザイナーと考えてみることです。今回も、既存の箱に入っている値では本当に画面上の問題を解決することができないのかということをデザイナーと時間をかけて一緒に考えました。</p><p>箱が増えるということは、プロダクトを通してのトンマナがブレるリスクがあるだけでなく、UI を通して送るユーザーへのメッセージの種類が増えることになります。基本的にユーザーへのメッセージの種類はシンプルな方が良いので、増やさなくて良いのであれば、それに越したことはありません。意図したメッセージが適切に伝わりづらくなるというリスクが増すからです。</p><h2>箱は適切な抽象度を意識する</h2><p>それでも新規の箱が必要になった場合、箱の名前は適切な抽象度を保っているかを注意します。新規の箱は、それが必要になったデザインカンプの画面のコンテキストにすごく影響されて命名してしまうことが多いです。例えば、コメント一覧 UI の画面デザインで新規に必要になった背景色のカラーコードに対する箱の名前を <code>--bg-comment</code> と命名するなどです。</p><p>「コメントの背景」という名前では画面の UI 上でどんなデザイン的にどんな働きをするのかが分かりません。もちろん、コメント系モジュールの背景はどんな画面にレイアウトしたとしても同じ色で統一するのであれば問題ないかもしれません。その色がコメントを表す特別な色という意味を持っているということであれば、 <code>--bg-comment</code> という名前も適切かもしれませんが、実際は別の画面になればコメントより目立たせたい要素が別にあるなど、コメント系モジュールであっても、別の色が適切な場合は多いはずです。</p><p>その場合はデザイン的な働きを適切な抽象度を持った名前で表現することが大事だと思います。その画面上でユーザーに最も注目してもらいたい要素であれば、 <code>--bg-highlight</code> という名前で コメント一覧モジュールの背景を塗るのが適切でしょう。</p><p>新規の箱に具体的な名前をつけて別項目として設定しまうことは簡単です。なので、その誘惑に駆られることは何度もありました。しかし、そうやってつけられた名前は適切な抽象度を持たないため、別の画面では使われない可能性が高くなる上に、別の箱を作る要因になるので、あっという間に人が管理できない個数へと箱が増えてしまいます。</p><p>適切な抽象度とは、色でいうと、基本色や強調色、警告色といったアプリケーションにおいて普遍な要素名に対してサービスのキャラクターづけがされた値を設定するようにします。これより具体性が高い要素名は、カンプ上に配置されたコンテキストに強く影響されている可能性が高いので、デザインレビュー時に再度名前の見直しをするようにしました。</p><p>サービスにおいてコアバリューに近いものに関しては具体性が高い要素名が適切な場合があるかもしれません。先程の例で言うと、コメント機能がサービスのコアバリューでほかの要素とは完全に差別化し、どの画面にいてもコメントが特別だと分かるように色を一色に統一したい、という場合は具体的な名前が適切でしょう。ただそういった名前は、サービス１つにつき多くても１、２個のように思います。</p><h2>明パターンと暗パターンの箱を用意する</h2><p>プロダクトの強調色や警告色など、全ての色は２パターン決めておくとよいです。スタイルガイドは背景色を白で用意することが多いと思いますが、もしプロダクトのベースが白であっても、配置するモジュール郡の中には暗い色のものもあると思います。</p><p>スタイルガイドで定義したカラーコードが、これら暗い色のモジュールを考慮していないと、明度差が足りなくて視認性や可読性が下がったりして、強調色が強調色として働かない可能性が出てきます。</p><p>そこでスタイルガイドには最初から明るいパターンの背景上に乗るもの用と暗いパターンの背景上に乗るもの用を用意しておき、色系の要素には常に２パターンの箱がある状態にしました。</p><p><img src="/images/make-style-guide-easy/light-dark-uis.png" alt="Sketch 明パターンと暗パターン"></p><p>CSS のカスタムプロパティも２パターン用意します。</p><p><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* font color - dark */</span></div><div class="line">--<span class="attribute">font</span>-<span class="attribute">color</span>-regular: <span class="number">#eeeeee</span>;</div><div class="line">--<span class="attribute">font</span>-<span class="attribute">color</span>-success: none;</div><div class="line">--<span class="attribute">font</span>-<span class="attribute">color</span>-danger: <span class="number">#f0163a</span>;</div><div class="line">--<span class="attribute">font</span>-<span class="attribute">color</span>-warning: <span class="number">#f0163a</span>;</div><div class="line">--<span class="attribute">font</span>-<span class="attribute">color</span>-info: <span class="number">#8c8c8c</span>;</div><div class="line">--<span class="attribute">font</span>-<span class="attribute">color</span>-<span class="selector-tag">link</span>: <span class="number">#6fb900</span>;</div><div class="line">--<span class="attribute">font</span>-<span class="attribute">color</span>-<span class="selector-tag">link</span>-hover: <span class="number">#c5c5c5</span>;</div><div class="line">--<span class="attribute">font</span>-<span class="attribute">color</span>-active: none;</div><div class="line"></div><div class="line"><span class="comment">/* font color - light */</span></div><div class="line">--lt-<span class="attribute">font</span>-<span class="attribute">color</span>-regular: <span class="number">#1a1a1a</span>;</div><div class="line">--lt-<span class="attribute">font</span>-<span class="attribute">color</span>-success: none;</div><div class="line">--lt-<span class="attribute">font</span>-<span class="attribute">color</span>-danger: <span class="number">#f0163a</span>;</div><div class="line">--lt-<span class="attribute">font</span>-<span class="attribute">color</span>-warning: <span class="number">#f0163a</span>;</div><div class="line">--lt-<span class="attribute">font</span>-<span class="attribute">color</span>-info: <span class="number">#8c8c8c</span>;</div><div class="line">--lt-<span class="attribute">font</span>-<span class="attribute">color</span>-<span class="selector-tag">link</span>: <span class="number">#6fb900</span>;</div><div class="line">--lt-<span class="attribute">font</span>-<span class="attribute">color</span>-<span class="selector-tag">link</span>-hover: <span class="number">#c5c5c5</span>;</div><div class="line">--lt-<span class="attribute">font</span>-<span class="attribute">color</span>-active: none;</div></pre></td></tr></table></figure></p><p>最終的にHTML （というか React と JSX）で作ったコンポーネントリストでは、実際に明るい背景と暗い背景の上にコンポーネントを置いて管理しました。これにより明るい背景では使えるけど、暗い背景ではそのまま使えないコンポーネントを一目で確認できるようになります。</p><p><img src="/images/make-style-guide-easy/light-dark-component-list.png" alt="React JSX 明パターンと暗パターン"></p><h2>空き箱を用意することで運用の難易度が下がった</h2><p>空き箱を適切な抽象度を意識して用意することで、スタイルガイドの運用はうんと楽になりましした。以前は自分の中に、スタイルガイドは（ガイドというくらいなので）UI デザインを先導するものであるべきという意識がありました。先にスタイルガイドがあって、デザインがそのガイドに従って作られるべきと。でも、自分たちはある意味未知のものを創っているのに、それを先導するものを作る難易度はとても高いです。今回は作ってみたデザインカンプからガイドとなるパターンを見つけていく仕組みを緩く作ることで、スタイルガイドが以前よりもワークするようにできました。</p><p>今回のプロジェクトでスタイルガイドに助けられた部分は大きいです。スタイルガイドがあることでデザイナーとの会話はしやすくなりましたし、今まで Photoshop や Sketch を通してしかできなかった部分のコミュニケーションを大きく補足してくれました。そしてエンジニアがデザインについてすこし深く考えるためのツールにもなったと思います。</p><p>そして「こんな感じでスタイルガイド作っていきたいんだけど」って相談したら一晩で Sketch のテンプレート作ってくれた <a href="https://twitter.com/pekep" target="_blank" rel="external">@pekep</a> に感謝。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前回 &lt;a href=&quot;/posts/atomic-design-on-actual-project/&quot;&gt;Atomic Design を実案件に導入した話&lt;/a&gt;で触れたコンポーネントリストを作り始めたとき、個人的にいろいろと学びがありました。&lt;/p&gt;
&lt;p&gt;コンポーネント
      
    
    </summary>
    
      <category term="Design" scheme="https://ygoto3.com/categories/Design/"/>
    
    
      <category term="style guide" scheme="https://ygoto3.com/tags/style-guide/"/>
    
  </entry>
  
  <entry>
    <title>Atomic Design を実案件に導入 - UI コンポーネントの粒度を明確化した結果と副産物</title>
    <link href="https://ygoto3.com/posts/atomic-design-on-actual-project/"/>
    <id>https://ygoto3.com/posts/atomic-design-on-actual-project/</id>
    <published>2016-03-16T09:01:51.000Z</published>
    <updated>2019-02-13T03:11:50.328Z</updated>
    
    <content type="html"><![CDATA[<p>ここ半年開発していた<a href="https://abema.tv/" target="_blank" rel="external">動画サービス</a>をベータ版ながらリリースしました（正式リリースは 4 月）。そのサービスの開発において、以前投稿した <a href="http://bradfrost.com/blog/post/atomic-web-design/" target="_blank" rel="external">Atomic Design</a> を採用しました。本記事では Atomic Design を実案件に導入した結果と感想を書いていきます。</p><p>Atomic Design の基本的な概念に関して知りたい方は <a href="https://twitter.com/brad_frost" target="_blank" rel="external">Brad Frost</a> 氏の<a href="http://bradfrost.com/blog/post/atomic-web-design/" target="_blank" rel="external">原文</a>、もしくは私の以前の記事↓を参照できます。</p><p><a href="http://ygoto3.com/posts/smashing-conference-whistler-and-atomic-design/">最近よくクリエイターが移住するカナダで Atomic Design を学ぶ</a></p><h2>Atomic Design を導入して正解</h2><p>結論から書くと、今回 Atomic Design を導入したことは正解でした。コンポーネントの粒度を論理的に説明できるガイドラインとして十分すぎるほどの役割を果たしてくれました。</p><p>このガイドラインがあることで、デザインに関してさほど関心がない人（たとえばデザインよりもエンジニアリングが好きなフロントエンドエンジニアなど）でも、UI コンポーネントの粒度を考えるフレームワークとなります。</p><p>もちろん、Atomic Design でなくても、コンポーネントの粒度を決定する基準が個人の感覚に依存することが避けられれば、どんなものでも構わないと思います。</p><h2>Atoms や Molecules はデザイン仕様の変化に強い</h2><p>Atomic Design を導入する目的は、デザイン仕様の変更に強く、再利用性がコンポーネント郡を揃えることです。当然のことですが、粒度が小さく特定のコンテキストに依存しないコンポーネントは少しくらい UI デザインに変更が入ったとしても、そのまま再利用することが可能です。</p><p>内製で自社サービスを開発していることもあり、今回のプロジェクトではデザインの変更は日常的に発生しました。そのためコンポーネントは将来的なデザイン変更を見越した上で、現在のデザインカンプ上に見えるコンテキストにできる限り依存しないように注意してコンポーネントを作ることが重要です。</p><p>Atomic Design の 5 つのカテゴライズの中で Atoms や Molecules はコンテキストが極めて薄いコンポーネントです。コンポーネントを作る際に常に Atoms や Molecules の粒度で作るとどういうコンポーネントが理想かを意識することが変更に強い UI コンポーネント郡を備えていくことにつながっていきます。</p><h2>デザイナーに Atomic Design の導入に協力してもらうことの難しさ</h2><p>ここまで書いてきたとおり、コンポーネントベースの開発はフロントエンドにとってはメリットが多いですが、Atomic Design はその名前の通りデザイン手法なので、導入においてもフロントエンドだけで完結するものではなく、デザイナーに協力してもらうことが不可欠です。（今回のプロジェクトでは、デザインとフロントエンドエンジニアリングは分業でした。）</p><p>しかし残念ながら、コンポーネントベースのデザインというのは一般的にマークアップをしないデザイナーにとっては作業しづらいものです。画面上でほかのコンポーネントと一緒にレイアウトされたときに、そのコンポーネントがどのように見えるのかをイメージすることは、かなりベテランで腕の良いデザイナーでも難しいです。</p><p>Atomic Design のようなコンポーネントベースのデザインプロセスをデザイナーに協力してもらうのは大きな課題です。</p><h2>Interface Inventory を開発初期から実践</h2><p>この課題を解決するために、開発の初期段階から Brad Frost 氏が提唱している <a href="http://bradfrost.com/blog/post/interface-inventory/" target="_blank" rel="external">Interface Inventory</a> をゆるく実践していきました。</p><p>Interface Inventory を実践したと言っても変わったことや難しいことをやったわけではなく、デザイナーには画面ごとのデザインカンプを通常通り作ってもらい、フロントエンドはそのカンプからいきなり画面を実装するのではなく、まず必要なコンポーネントを切り出して、コンポーネントリストを作成しました。</p><h2>Atomic Design でカテゴライズしたコンポーネントリスト</h2><p><img src="/images/atomic-design-on-actual-project/component-list.png" alt="Atomic Design でカテゴライズしたコンポーネントリスト"></p><p>このコンポーネントリストは <a href="http://patternlab.io/" target="_blank" rel="external">Pattern Lab</a> のように Atoms や Molecules といったコンポーネントの粒度でカテゴライズされた状態で、デザイナーに共有します。（Git 上で例えば master にマージされたら、自動で最新のコンポーネントリストが開発チーム全体で共有されるようデプロイされるようにしておくと良いかと思います。）</p><p>デザイナーには次からの画面デザインを考える際、リストにあるコンポーネントを見て可能な場合はそれらを使ってもらうよう協力してもらいます。UI のトーンがブレないようにスタイルガイドを作っているデザイナーの方もいると思いますので、スタイルガイドと同じように使用してもらえると一番良いです。</p><p>コンポーネントが再利用できた方が実装工数が減り、コード量も少なくなるためバグも減り、プロダクトのパフォーマンスも上がるのでプロダクトにとってのメリットも大きいので、その点も伝えるのですが、デザイナーにとってはイメージがつきにくい場合もあるので、まずはスタイルガイドと同じように使ってもらうように促すのが一番なのかなと思います。</p><h2>開発初期はコンポーネントリストの Atoms や Molecules を増やす</h2><p>前述したとおり、Atoms や Molecules はデザイン仕様の変更に強いので、コンポーネントリストでも Atoms や Molecules を増やし、Atoms や Molecules から Organisms を構成することを意識します。</p><p>作ったコンポーネントたちがカテゴリー別に一覧化されていると、粒度のバランスが取れているかを意識しやすくなります。例えば Atoms や Molecules にそぐわない、ある一定のコンテキストに強く影響されたコンポーネントがないかレビューしやすくなります。</p><p>デザインカンプからコンポーネントを抜き出すので、実装者はその画面デザインが意図しているコンテキストに非常に影響されやすいです。そのコンテキストの一層下に UI コンポーネントが共通で持っている目的があるはずなので、その共通の目的以上のものが機能に含まれていないかをレビュー時に確認し、適切に Organisms などにコンポーネントを分離することが大切です。</p><p>実際に開発中盤以降もデザイン変更が頻発しましたが、Organisms 以上のコンポーネントはその変更により修正が発生しますが、Atoms や Molecules に関しては、ほとんど発生しませんでした。</p><h2>コンポーネントリストとプロダクトのコンポーネントの同期</h2><p>コンポーネントリストやスタイルガイドを運用する上で陥りやすい問題として、開発が佳境に入るとコンポーネントリストが更新されないことが多々起こりえます。プロダクトの方に開発の意識が集中しているので、それは当然ですが、コンポーネントリストが常に更新されなければ、いづれデザイナー含めチーム全体がコンポーネントリストを参照しなくなります。</p><p>コンポーネントリストを「生きたドキュメント」として保ち続けるために、コンポーネントリストの中のコンポーネントとプロダクトで使われているコンポーネントの実装が同じソースを見ていることが重要です。</p><p>今であれば、コンポーネント化を助けるライブラリとして <a href="https://facebook.github.io/react/" target="_blank" rel="external">React</a> などを利用できると思います。今回のプロジェクトでは、 React で作成したコンポーネントをコンポーネントリストにもレンダリングしているため、プロダクトのコンポーネントとずれることがありません。</p><p>今回のプロジェクトでも、React + <a href="https://github.com/alexlande/react-style-guide" target="_blank" rel="external">alexlande/react-style-guide</a> を利用してコンポーネントリストを作成し、プロダクト上にあるコンポーネントと同期されるようにしました。</p><h2>正しくコンポーネントを分離すれば、デザイナーが安心してコンポーネントに対してプルリクすることも可能</h2><p>Atomic Design に限らず、コンポーネントを正しく分離するということは、デザインとして正しく論理的な意味を持ったコンポーネントとして設計することになります。サービス上で統一された正しい意味合いの色が適用されていて、コンポーネント単体が必要以上でも以下でもないマージン情報を持ち、どこにレイアウトされても自分以外を影響することのないように心掛ける必要があります。</p><p>スタイルがそのコンポーネント以外に影響しない状況が保持されていれば、アプリケーションの実装全体をそれほど把握していなくても、安心してコンポーネントに変更をかけることができます。それはフロントエンドエンジニアでなくても、デザイナーやほかの職種の人が実装に関わることができることを意味しています。</p><h2>デザイン変更実装をデザイナー自身がプルリク</h2><p>頻繁に変更するデザインには、簡単な色やラベリングの変更、余白の調整などが含まれます。これらの変更は作業的にはとても簡単なものですが、デザイナーがデザインカンプに対して変更したものをフロントエンジニアに渡して作業する場合は、そこそこの工数がかかります。</p><p>まずフロントエンドが実装したものをデザイナーに確認してもらう作業は二者のコミュニケーションが発生するため、確認が必要なときに他方の時間が空いているとは限りません。簡単な修正なので、デザイナーの確認が必要でないと思っていても、デザインカンプ上では良く見えていたものが、実際に実装されたら調整が必要だったということは多々起こりえます。残念ながら、デザイナーにしか気づけないもの点が存在するのは事実です。</p><p>また、実装したものを Pull Request すれば、ほかのフロントエンドエンジニアがレビューすることになると思いますが、その際にレビューできるのはコードに関することのみだったりします。（そして、これらのデザイン修正ではコードに関しては指摘する必要がないことの方が多いと思います。）</p><p>上記の 2 点は、デザイン変更に関する実装についてデザイナー自身が Pull Request することができると、工数をぐっと削減できます。デザイナー自身が実装しているため、実装後のデザイン確認作業は 1 者のみで済みます。また、Pull Request に対して、フロントエンドはコードのみをレビューすれば良くなります。</p><p>基本的な Git の使い方をデザイナーに学んでもらう必要はありましたが、デザイナーにとっても自分の意図を他人にフィルタリングされることなくプロダクトに反映できるので、デザイナー自身が Pull Request できることは大きなメリットがありました。</p><h2>Atoms / Molecules / Organisms のみを採用</h2><p>Brad Frost 氏の Atomic Design では 5 つのカテゴリー（ Atoms / Molecules / Organisms / Templates / Pages ）が紹介されていますが、今回のプロジェクトでは最初の 3 カテゴリー（ Atoms / Molecules / Organisms ）のみを管理しました。</p><p>今回のプロジェクトでは、Templates のような大きな粒度のものを再利用することがありませんでした。Templates と Pages については、何百や何千とページを量産するような案件の場合はコンポーネントリストなどで管理した方が良いように思いますが、そうでない場合は Atomic Design のカテゴリーから Atoms / Molecules / Organisms だけを採用するのも良いかと思います。</p><p>もちろん実際には Templates の役割をしている大きなコンポーネントは存在しているのですが、プロダクト上のみで確認できるだけで事足りるように個人的には思いました。</p><h2>考え方に名前があると受け入れやすい</h2><p>Atomic Design の良いところは、名前が分かりやすく、概念的にも難しいところがないことだと思います。（逆に悪いところは、カテゴリーの名前が若干恥ずかしいことかなと思います。「この Molecule が...」とかチームメンバーに言うのは最初は抵抗がありました - これについては <a href="https://twitter.com/t32k" target="_blank" rel="external">t32k</a> さんも予想してましたが。）</p><p>今回のプロジェクトでは、チームの半分弱がフロントエンド経験がないメンバーでしたが、Atomic Design の基本的なコンセプトはすんなり取り込めたようでした。</p><p>Atomic Design 自体は特に斬新な考え方なわけではなく、従来のコンポーネントを作る上でのふわっとした考え方に面白い名前がついただけですが、名前がついていることで認識の共有が加速する良い例だと思います。</p><h2>結果</h2><p>Atomic Design の考え方を借りて、コンポーネントの粒度を決定していった結果、以前より再利用性が高いコンポーネントを作ることができました。もちろん、Atomic Design だけではなく、コンポーネントベースのデザインプロセスに協力してくれたデザイナーのおかげもあります。（今回前向きにコンポーネントベースのデザインプロセスに協力してくれた <a href="https://twitter.com/pekep" target="_blank" rel="external">@pekep</a> に感謝。）</p><p>そして、適切なコンポーネントを分離できた結果、デザイナーがデザイン後の開発に参加できるという副産物も得ることができました。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ここ半年開発していた&lt;a href=&quot;https://abema.tv/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;動画サービス&lt;/a&gt;をベータ版ながらリリースしました（正式リリースは 4 月）。そのサービスの開発において、以前投稿した &lt;a href
      
    
    </summary>
    
      <category term="Design" scheme="https://ygoto3.com/categories/Design/"/>
    
    
      <category term="Atomic Design" scheme="https://ygoto3.com/tags/Atomic-Design/"/>
    
  </entry>
  
  <entry>
    <title>Gilgamesh を使って UI コンポーネントを拡張してみる</title>
    <link href="https://ygoto3.com/posts/try-gilgamesh/"/>
    <id>https://ygoto3.com/posts/try-gilgamesh/</id>
    <published>2015-02-23T01:12:12.000Z</published>
    <updated>2019-02-13T03:11:50.332Z</updated>
    
    <content type="html"><![CDATA[<p>UI をコンポーネント・ベースで開発していると、コンポーネントを開発した当初は予期していなかったカスタマイズが必要になることがあります。何でもカスタマイズできるような汎用性を持たせられれば、それが一番良いですが、過剰な汎用性はアプリケーションを不必要に重くするだけです。</p><p>しかし、アプリケーション固有の UI コンポーネントをある程度の大きさの粒度で作っている場合、必要十分な汎用性を予測することは非常に難しいことが多いため、必要になった時点で機能的な分岐を追加することが多いです。多くの場合、既存でそのコンポーネントを使っている箇所に影響を与えないように、分岐するためのフラグを要素の属性値として渡します。</p><p>ある程度の大きさの粒度というのは、例えば投稿フォームのような複数の input 、button 要素をテンプレートの中に持ち、バリデーションや Ajax などの機能を提供するくらいの粒度を想定しています。例えば、この投稿機能を提供する UI を下記のように使っている場合、</p><p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">post-form</span> /&gt;</span></div></pre></td></tr></table></figure></p><p><a href="/images/try-gilgamesh/postForm.png"><img src="/images/try-gilgamesh/postForm.png" alt="postForm コンポーネント"></a></p><p><code>label</code> という属性の値として変更したいラベルのテキストを渡すことで、属性値が設定されていた場合だけデフォルトとは違うラベルに変更できるようにします。</p><p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">post-form</span> <span class="attr">label</span>=<span class="string">"まずは試してみる"</span> /&gt;</span></div></pre></td></tr></table></figure></p><p><a href="/images/try-gilgamesh/SampleLabel.png"><img src="/images/try-gilgamesh/SampleLabel.png" alt="ラベルを変更した postFomr コンポーネント"></a></p><p>ただし、変更が必要になったときにこれを繰り返し続けると、次のようなことにもなりかねません。</p><p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">post-form</span></span></div><div class="line"><span class="tag">  <span class="attr">label</span>=<span class="string">"最初の投稿"</span></span></div><div class="line"><span class="tag">  <span class="attr">size</span>=<span class="string">"small"</span></span></div><div class="line"><span class="tag">  <span class="attr">skin</span>=<span class="string">"dark"</span></span></div><div class="line"><span class="tag">  <span class="attr">is-followed</span>=<span class="string">"true"</span></span></div><div class="line"><span class="tag">  <span class="attr">stars</span>=<span class="string">"12"</span></span></div><div class="line"><span class="tag">  <span class="attr">limit</span>=<span class="string">"1000"</span></span></div><div class="line"><span class="tag">  …</span></div><div class="line"><span class="tag">  …</span></div><div class="line"><span class="tag">/&gt;</span></div></pre></td></tr></table></figure></p><p>さすがにこの例のような場合はデザイン的にも問題があるとは思いますが、運用を長く続けていると起こり得る自体です。</p><h3>Gilgamesh</h3><p><a href="http://sskyy.github.io/Gilgamesh/" title="Gilgamesh" target="_blank" rel="external">Gilgamesh</a> は、<a href="https://github.com/sskyy" title="sskyy (Zhenyu Hou)" target="_blank" rel="external">Zhenyu Hou</a> 氏が開発している JavaScript フレームワークを拡張するライブラリ集です。</p><p>JavaScript フレームワークを拡張する、とありますが、現在のところサポートしているフレームワークは、AngularJS のみです。今後 Polymer と React もサポートされる予定みたいです。</p><p>Gilgamesh には今のところ大きく２つの機能があります。</p><ol><li>テンプレート拡張ライブラリ</li><li>データソースライブラリ</li></ol><p>今回は、１つ目の「テンプレート拡張ライブラリ」としての機能を利用して AngularJS の <code>Directive</code> で作った UI コンポーネントの拡張を試してみます。</p><h3>Gilgamesh を試す準備</h3><p><a href="https://github.com/sskyy/Gilgamesh.git" title="sskyy/Gilgamesh" target="_blank" rel="external">Gilgamesh のリポジトリ</a> を clone してきて、任意の HTML で jQuery と AngularJS を読み込ませた上で下記の script 追加します。</p><p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./adapters/angular/adapter.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./build/Gilgamesh.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./adapters/angular/directives.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p><p>ちなみに、jQuery を外して実行してみたところ、エラーが出たので現状は jQuery に依存しているのかもしれません。（あまり深く追ってないです。）</p><h3>Gilgamesh でコンポーネントを作成する</h3><p>AngularJS の Directive 機能でコンポーネントを作るのとほぼ同様に、Gilgamesh のコンポーネントを作ることができます。Angular モジュール・オブジェクトの <code>directive</code> メソッドを <code>component</code> に置き替えるだけです。</p><p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">'demo'</span>)</div><div class="line">.component(<span class="string">'postForm'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    templateUrl: <span class="string">'./template.html'</span>,</div><div class="line">    link: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</div><div class="line">  &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>これで下記のように <code>&amp;lt;div post-form&amp;gt;&amp;lt;/div&amp;gt;</code> をマークアップに配置するとこのコンポーネントを使うことができます。</p><p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">post-form</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><p><a href="/images/try-gilgamesh/postForm.png"><img src="/images/try-gilgamesh/postForm.png" alt="postForm コンポーネント"></a></p><p>本当は、<code>restrict: 'E'</code> で、Element Derective にしたかったのですが、現時点では <code>&amp;lt;div post-form&amp;gt;&amp;lt;/div&amp;gt;</code> を配置するとエラーが出てうまく動作しませんでした。</p><h3>コンポーネントのパーツを書き替える</h3><p>Gilgamesh で作ったコンポーネントに対して、マークアップ側から変更を加えていきます。中止ボタンだけ別の見た目のボタンに変更します。</p><p>まず、コンポーネントで使っているテンプレートの中止ボタン要素に役割名を指定します。ここでは <code>cancel</code> という名前を指定します。</p><p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-2"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-block"</span> <span class="attr">ng-click</span>=<span class="string">“user.cancel()</span>"</span></div><div class="line"><span class="tag">   <span class="attr">gm-role</span>=<span class="string">"cancel"</span></span></div><div class="line"><span class="tag">  &gt;</span>中止<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><p>次にコンポーネントを使用する側で、中止ボタンだけ置き替えたい要素に上書きする記述をします。コンポーネントの要素に <code>gm-tpl-partial</code> という属性を書き加えて、子要素として <code>gm-role=&quot;cancel&quot;</code> という属性を付けた要素を記述します。これが中止ボタンを上書きする要素になります。</p><p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">post-form</span> <span class="attr">gm-tpl-partial</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-danger btn-block"</span> <span class="attr">ng-click</span>=<span class="string">“user.cancel()</span>"</span></div><div class="line"><span class="tag">   <span class="attr">gm-role</span>=<span class="string">"cancel"</span></span></div><div class="line"><span class="tag">  &gt;</span>解除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><p><a href="/images/try-gilgamesh/postFormPartial.png"><img src="/images/try-gilgamesh/postFormPartial.png" alt="部分的にパーツを上書きした postForm コンポーネント"></a></p><p>また、部分的にではなく、テンプレート自体を全体的に別のものにしたい場合は、<code>gm-tpl-partial</code> 属性を設定しないで、下記のようにコンポーネント要素の中身を上書きするだけで UI 全体が上書きされます。</p><p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">post-form</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- ここの記述でテンプレートをそっくり書き替える --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><h3>コンポーネントのパーツを取り除く</h3><p>部分的に上書きもできれば、部分的に取り除くこともできます。今度は中止ボタンをコンポーネントから取り除きます。<code>gm-tpl-exclude=&quot;cancel&quot;</code> という属性をコンポーネントの要素に追加するとテンプレートで <code>gm-role=&quot;cancel&quot;</code> 属性を与えられた要素だけ除外されます。</p><p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">post-form</span></span></div><div class="line"><span class="tag"> <span class="attr">gm-tpl-exclude</span>=<span class="string">"cancel"</span></span></div><div class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><p><a href="/images/try-gilgamesh/postFormExclude.png"><img src="/images/try-gilgamesh/postFormExclude.png" alt="postForm からパーツだけ除外"></a></p><h3>コンポーネントの外にある要素をコンポーネントのパーツとして扱う</h3><p>例えば、中止ボタンをテンプレートのマークアップ外に配置したい場合は、Gilgamesh のコンポーネントの外にある要素をコンポーネントのパーツとして扱うことができる機能が有効です。まずコンポーネントの要素に <code>id</code> を設定します。</p><p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">post-form</span> <span class="attr">id</span>=<span class="string">"postForm"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><p>そして HTML の任意の場所に中止ボタンとして機能させたい要素を <code>gm-import=&quot;postForm&quot;</code> 属性を加えて配置します。属性値を、先程の id 属性の値と同じにすることで、postForm コンポーネントの外にある要素をコンポーネントの中のものとして扱うことができるようになります。</p><p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-danger btn-block"</span></span></div><div class="line"><span class="tag"> <span class="attr">gm-import</span>=<span class="string">"postForm"</span></span></div><div class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">post-form</span> <span class="attr">id</span>=<span class="string">“postForm”</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><p>コンポーネントの外にあっても、<code>gm-import</code> 属性で紐付けられた要素内は postForm コンポーネントの scope に紐付きます。なので、要素内に書いた Angular 式は postForm のコンテキストで展開されます。</p><p><a href="/images/try-gilgamesh/postFormImport.png"><img src="/images/try-gilgamesh/postFormImport.png" alt="postForm コンポーネントに外部から要素を追加"></a></p><h3>コンポーネントを拡張する</h3><p>あるコンポーネントの <code>link</code> に設定した機能を継承して別のコンポーネントを作ることができます。<code>component</code> メソッドで新しいコンポーネントを作るときに <code>extend</code> キーを追加します。値には継承したい親コンポーネントの名前を指定します。</p><p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">'demo'</span>)</div><div class="line">.component(<span class="string">'postFormSubscribe'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    extend: <span class="string">'postForm'</span>,</div><div class="line">    templateUrl: <span class="string">'./template.html'</span>,</div><div class="line">    link: <span class="function"><span class="keyword">function</span> (<span class="params">iScope</span>) </span>&#123;</div><div class="line">      <span class="comment">// postForm の link が先に実行される</span></div><div class="line">      iScope.user.subscription = <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>これで postForm コンポーネントを継承して追加で <code>iScope.user.subscription = true;</code> という処理を postFormSubscribe コンポーネントにだけ実行できます。<code>iScope.user.subscription = true;</code> を実行したことにより、postFormSubscribe コンポーネントでは、購読チェックボックスがデフォルトでオンになるようにしました。</p><p><a href="/images/try-gilgamesh/postFormExtend.png"><img src="/images/try-gilgamesh/postFormExtend.png" alt="postForm コンポーネントを拡張して作った postFormSubscribe コンポーネント"></a></p><p>この拡張機能は残念ながら、現時点で自分が試した範囲では <code>link</code> を継承することしかできないようでした。親のテンプレートを継承できるともっと使い道が広がりそうです。</p><h3>まだプロダクトでは使えなさそうだが...</h3><p>Gilgamesh のテンプレート拡張機能を試してみました。少しまだバグが多い印象なのでプロダクトにはまだ導入できないと思っています。しかし、予期できなかったけれど、必要になった汎用性を復活してくれるライブラリとして、機会があれば使ってみたいと思っています。</p><p>また本記事の内容については、<a href="http://www.slideshare.net/ygoto3q/componentization-with-gilgamesh" title="Componentization with Gilgamesh" target="_blank" rel="external">こちらのスライド</a>でも同様の内容を話しています。</p><p><strong>Gilgamesh</strong><a href="http://sskyy.github.io/Gilgamesh/" title="grunt-angular-templates" target="_blank" rel="external">http://sskyy.github.io/Gilgamesh/</a></p><p><strong>Gilgamesh: bring Angular to the next level</strong><a href="http://www.reddit.com/r/programming/comments/2s5exu/gilgamesh_bring_angular_to_the_next_level/" title="grunt-angular-templates" target="_blank" rel="external">http://www.reddit.com/r/programming/comments/2s5exu/gilgamesh_bring_angular_to_the_next_level/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;UI をコンポーネント・ベースで開発していると、コンポーネントを開発した当初は予期していなかったカスタマイズが必要になることがあります。何でもカスタマイズできるような汎用性を持たせられれば、それが一番良いですが、過剰な汎用性はアプリケーションを不必要に重くするだけです。&lt;/
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://ygoto3.com/categories/JavaScript/"/>
    
      <category term="Design" scheme="https://ygoto3.com/categories/JavaScript/Design/"/>
    
    
      <category term="AngularJS" scheme="https://ygoto3.com/tags/AngularJS/"/>
    
  </entry>
  
  <entry>
    <title>最近よくクリエイターが移住するカナダで Atomic Design を学ぶ</title>
    <link href="https://ygoto3.com/posts/smashing-conference-whistler-and-atomic-design/"/>
    <id>https://ygoto3.com/posts/smashing-conference-whistler-and-atomic-design/</id>
    <published>2014-12-19T23:52:28.000Z</published>
    <updated>2019-02-13T03:11:50.332Z</updated>
    
    <content type="html"><![CDATA[<p>こちらは <a href="http://qiita.com/advent-calendar/2014/frontrend" title="Frontrend Advent Calendar 2014" target="_blank" rel="external">Frontrend Advent Calendar 2014</a> 19日目の記事です。</p><p>2014年 12月8日〜12月14日の間、カナダに滞在してきました。目的は12月9日〜12日に開催される <a href="http://smashingconf.com/whistler-2014/" title="Smashing Conference 2014" target="_blank" rel="external">Smashing Conference 2014</a> へ参加するためです。</p><p>海外のカンファレンスに参加するのはおろか、海外旅行もしたことがないので、今回１人でカナダに行くということで終始緊張の連続でした。（Frontrend の <a href="https://twitter.com/hiloki" title="@hiloki" target="_blank" rel="external">@hiloki</a> さんが「僕も行こうかな」と言っていたので、心強く思っていたのですが、残念ながら叶わず。）</p><p>本記事は、カンファレンスが開催されたカナダという国にまつわるお話を <a href="http://frontrend.github.io/" title="Frontrend" target="_blank" rel="external">Frontrend</a> の話題を交えながら書きつつ、このカンファレンスで一番楽しみにしていたトピックである「Atomic Design」について書いていきます。</p><h3>参加の理由</h3><p>今まで海外カンファレンスなど参加したことがない自分が今回参加を決意した理由は、興味があるスピーカー陣が多くいたことがもちろん１番なのですが、２番目の理由として、今年に入ってからカナダという国そのものに興味を持つようになったからです。</p><p>興味を持ったキッカケは、カンファレンス募集期間の前後、立て続けに日本からカナダに移住する Web クリエイター・エンジニアたちに会ったことです。そのうちの一人が、Mr. Frontrend である <a href="https://twitter.com/t32k" title="@t32k" target="_blank" rel="external">@t32k</a> さんでした。彼のブログ記事「<a href="http://t32k.me/mol/log/p32k/" title="Webエンジニアからみたフィリピン語学留学" target="_blank" rel="external">Webエンジニアからみたフィリピン語学留学</a>」で書いている通り、彼はフィリピンで語学留学した後、現在カナダでエンジニアとして働こうとしています。</p><h3>アメリカに近いという点でのカナダの魅力</h3><p>「偶然なのか、なんだか最近多くの人がカナダに行っている気がするな。」となんとなく思っていました。IT 業界でエンジニアとして働いている者であれば、一度はシリコンバレーで働きたいと願う人も少なくないでしょう。だから、アメリカ合衆国で働きたい、というのは分かります。しかし、なぜカナダなのでしょうか。</p><p>そんな疑問に答えるかのように、<a href="http://frogagent.com/" title="Frog" target="_blank" rel="external">Frog</a> というクリエイターのためのカナダ留学支援団体のサイトにはカナダのバンクーバーについてこんなことが書かれています。</p><ul><li>バンクーバーはシリコンバレーと時差が同じ</li><li>Facebook やアマゾンなどの企業が進出</li><li>カナダで就労して、アメリカの就労ビザを取得したらシリコンバレー就職</li></ul><p>なんともアメリカンドリームに近づけそうなカナダの魅力がそこにはありました。もし普通の日本人がアメリカで働きたいと思ったとしても、アメリカの<a href="http://www.usavisa.jp/howto/faq_visa07.html" title="アメリカ就労ビザ取得は難しい" target="_blank" rel="external">就労ビザ取得は難しく</a>、働きたくても外国人にあたる日本人はなかなか働く許可を得ることが難しいでしょう。それと比較すると、カナダは就労ビザの制度に融通が利きやすいということのようです。</p><p>実際、現地で出会った人の中にもいずれはシリコンバレーで働くことを目標にしている人もいました。</p><h3>カナダ自身の魅力</h3><p><a href="/images/smashing-conference-whistler-and-atomic-design/vancouver.jpg"><img src="/images/smashing-conference-whistler-and-atomic-design/vancouver.jpg" alt="vancouver"></a></p><p>上記のような理由は、カナダ自身というよりはアメリカへのアクセスに対してのカナダの魅力しか示していませんが、実際カナダのバンクーバーに行ってみると、人は優しく、街は綺麗でとても魅力的な国でした。</p><p>私は学生時代に約６年アメリカに住んでいた記憶もあって、カナダに着いたとき、街中の標識や店頭の商品を見てアメリカととても似ているな、と感じたのですが、実際に人と触れ合うと（言い方は悪いですが）アメリカのようなドライさはあまり感じられません。むしろ優しさに溢れていました。</p><p>たとえばロックが開かなくなった荷物について私が空港の人に助けを求めると「私には開け方が分からない」と言いながらもあの手この手で開けようと頑張ってくれたり、カナダに来たばかりで電車の乗車券の買い方１つ分からない私に通りすがりの人がとても丁寧に買い方を説明してくれたり、気候とは裏腹になんだかとても暖かい国だなと感じました。</p><p>そして、移民も多いためか外国人に対して慣れている感じも見受けられます。物価が若干高いところと、気候が寒いところを除けば、日本人にとっても住みやすそうな街に感じました。もちろん１週間しか滞在していないので実際のところは分かりませんが、<a href="http://www.statcan.gc.ca/pub/89-621-x/89-621-x2007013-eng.htm" title="The Japanese Community in Canada" target="_blank" rel="external">The Japanese Community in Canada</a> が示すようにバンクーバーの人口の 1.3% が日系であることからも日本人にとっての住みやすさが想像できます。</p><h3>英語の重要性</h3><p>カナダで開催されるカンファレンスということもあり、やはりコミュニケーションは英語になります。長く英語を話す機会から離れているので、この点も今回の旅において心配する要因の１つでした。</p><p>少し前に、<a href="https://soundcloud.com/engineer-meeting/vol6-4?in=engineer-meeting/sets/vol-6" title="エンジニアミーティング vol.6-4 エンジニアの英語戦略" target="_blank" rel="external">エンジニアミーティング vol.6-4 エンジニアの英語戦略</a> というポッドキャスト番組でも話があったように、特にここ１、２年はまわりにいるエンジニアが英語を話せるようになる必要性を強く感じてきています。</p><p>実際、職場の友人も、English Lunch という呼ばれる英語オンリーで会話するランチを定期的に開いたり、Frontrend の <a href="https://twitter.com/1000ch" title="@1000ch" target="_blank" rel="external">@1000ch</a> が「<a href="http://1000ch.net/posts/2014/look-back-over-2014.html" title="2014年の振り返りと人気記事まとめ" target="_blank" rel="external">2014年の振り返りと人気記事まとめ</a>」で触れているように <a href="https://www.rarejob.com/" title="a" target="_blank" rel="external">レアジョブ英会話</a> で毎日レッスンを受けたりしている人がたくさんいます。</p><p>私も同様に、生の声を聞ける機会に英語で<strong>恐れず</strong>話ができることは大事だと今回の旅で思いました。（恐れず、を強調したのは、別に流暢でなくてもコミュニケーションを取ることができれば良いと思っているからです。）私は漠然と開発における技術やワークフロー、考え方など欧米は日本より進んでいるように思っていましたが、実際にカンファレンス参加者と話すと日本で私たちが課題に持っているのと同じような課題を抱えていて、相手の話が身近に感じたり私の話に共感してくれたりするのがとても新鮮でした。</p><h3>Smashing Conference Whistler</h3><p>さて、今回参加した Smashing Conference ですが、<strong>ウィスラー</strong>というバンクーバーから車で２時間程離れたリゾート地で開催されました。（ウィスラーは２０１０年冬季オリンピック競技が行われたくらいのスキーリゾートなので、正直スキーやスノボというオマケにつられてカンファレンスに参加した、という人もいました。）</p><p>参加者は、やはりカナダ人、とりわけバンクーバーから来ている人が多かったのですが、アメリカ人も多くいました。逆に考えると、カナダからアメリカのカンファレンスなどのイベントに参加することもそのくらい気軽なのだろうと感じます。（日本からアメリカのイベントに参加しようと思うとウン十万円と費用がかかるので、この点においては羨ましい限りです。）</p><h3>Mr. Brad Frost と Atomic Design</h3><p>今回のカンファレンスで一番楽しみにしていたのは、<a href="https://twitter.com/brad_frost" title="Brad Frost" target="_blank" rel="external">Brad Frost</a> 氏の Full-day ワークショップを受講することでした。Brad Frost 氏は Responsive Design のパターンやニュースなどを集めたサイト <a href="http://bradfrost.github.io/this-is-responsive/" title="This Is Responsive" target="_blank" rel="external">This Is Responsive</a> を公開し、Adaptive Design に関する実用的で深い見識を持っています。</p><p>私がこのワークショップを楽しみにしていた理由は、彼がレスポンシブな Web をコンポーネントベースでデザインする方法論として、<strong>Atomic Design</strong> というものを提唱していて、このワークショップはその考えを学ぶことができる場だったからです。</p><p>ここ１年、私は２つのプロジェクトでフロントエンドの開発をしました。どちらのプロジェクトでも<a href="http://www.slideshare.net/ygoto3q/componentization-for-reality" title="Componentization for Reality" target="_blank" rel="external">コンポーネントベースでの UI 開発を意識してきました</a>が、コンポーネントをどんな粒度で作るのが１番再利用性が高くなるのか、なかなか明確な基準をチームの中で共有することができないでいました。彼のワークショップを通して、コンポーネント開発に対する考え方を磨きたいと思いました。</p><p>ここからは、そのワークショップおよび、カンファレンスの１セッションでもあった Atomic Design について書きたいと思います。</p><h3>Atomic Design とは</h3><p><a href="http://bradfrost.com/blog/post/atomic-web-design/" title="Atomic Design" target="_blank" rel="external">Atomic Design</a> はデザインシステムを作るための１つの手段です。ざっくり言うと UI コンポーネントを粒度に応じたカテゴリーに明確に分ける手法です。Atomic Design では下記のようなカテゴライズのレベルが示されています。</p><ol><li>Atoms - 原子</li><li>Molecules - 分子</li><li>Organisms - 有機体</li><li>Templates - テンプレート</li><li>Pages - ページ</li></ol><p>これらのカテゴリーは上から下に行くにつれて、粒度は大きくなり、抽象度は下がっていきます。下位カテゴリーのコンポーネント（例えば原子）を組み合わせて上位のコンポーネント（分子）を構成するようにデザインを考えていきます。</p><blockquote><p>We’re not designing pages, we’re designing systems of components.</p></blockquote><p>まさに <a href="https://twitter.com/stephenhay" title="Stephen Hay" target="_blank" rel="external">Stephen Hay</a> 氏の上記の言葉にあるように、ページをデザインするのではなく、コンポーネントで構成するデザインシステムです。</p><h3>特徴的な名称</h3><p>私が Atomic Design が手段としてとても優れていると思う点は、カテゴリーの名称がコミュニケーション・ツールとしても柔軟なところです。</p><p>５つのカテゴリーのうち、原子、分子、有機体に関しては、開発サイドにメリットがあるカテゴリー名です。この３つの名称は、およそ Web デザインには関係が無さそうな名前です。しかし、原子と原子が結合して分子になることから連想すると、コンポーネントを組み合わせて新しいコンポーネントを作り出すという特性をとても正確に表しています。</p><p>それに対してテンプレートとページという２つの名称はとても一般的です。前者３つのコンポーネントより具体性が増して、このレベルではクライアントやプロデューサーに見せるアウトプットになるので、彼らと会話するときに余計な違和感を与えることなくコミュニケーションできる名称になっています。</p><h3>Pattern Lab</h3><p>５つのカテゴリーを１つずつ説明する前に、Atomic Design を実践するために便利なツールである <a href="http://patternlab.io/" title="Pattern Lab" target="_blank" rel="external">Pattern Lab</a> を紹介します。Pattern Lab は Brad Frost 氏と <a href="https://twitter.com/dmolsen" title="Dave Olsen" target="_blank" rel="external">Dave Olsen</a> 氏の両名が作ったパターンライブラリかつ静的サイト・ジェネレータです。</p><p>パターンライブラリとしては、原子や分子、有機体といったコンポーネントパターンをコードベースで管理することができます。また静的サイト・ジェネレータとしては、ページやテンプレートと言ったサイトレベルのデザインを原子、分子、有機体から生成します。</p><p>Pattern Lab は Atomic Design のパターンを作るスターターキットとしてとても優れているので、ここからの５つのカテゴリの紹介は Pattern Lab で説明していきたいと思います。</p><h3>Atoms - 原子</h3><p>原子という名前の通り、これ以上分割することができない基本的な要素がこのカテゴリに含まれます。これ以上分割することができない要素なので、ラベルやインプット要素、ボタンなどの HTML タグは原子としてカテゴライズされます。カラーパレットやフォント、アニメーションなどもこれ以上分割することができない要素として原子に含まれます。</p><p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 見出し --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Heading Level 1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div></pre></td></tr></table></figure></p><p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- ボタン --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"btn"</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure></p><p><a href="/images/smashing-conference-whistler-and-atomic-design/button.png"><img src="/images/smashing-conference-whistler-and-atomic-design/button.png" alt="button"></a></p><p>原子にカテゴライズされる要素は、基本的に単体では UI として意味を成さないものばかりになりますが、この後に紹介していくカテゴリのコンポーネントも、ここの要素にあてられたスタイルがベースとなっていきます。この要素たちを集めて一覧化すれば、<a href="https://twitter.com/danielmall" title="Dan Mall" target="_blank" rel="external">Dan Mall</a> 氏の <a href="http://danielmall.com/articles/rif-element-collages/" title="ELEMENT COLLAGES" target="_blank" rel="external">ELEMENT COLLAGES</a> のような感じで、サイト全体のトンマナを要素レベルで俯瞰できるはずです。</p><h3>Molecules - 分子</h3><p>分子もその名の通り、原子がくっついてできる最小の単位です。ラベルやインプット要素、ボタンなどのコンポーネントを合わせて、例えば検索フォームという形にすることができます。原子は単体ではあまり意味をなさないものでしたが、組み合わせることで目的を持ったコンポーネントになることができます。</p><p>ただ、このコンポーネントが持っている目的はまだ汎用的なもので、コンポーネントとしての再利用性が５つのカテゴリの中で最も高くなるようにデザインしていく必要があります。これが Atomic Design システムの根幹を担います。この分子をいろいろな UI パーツに上手に組み込むことが Atomic Design のコツとなるように思います。</p><p>Pattern Lab では、このように既存で作った原子を組み合わせて分子としてのコンポーネントを作れるように、別のコンポーネントをインクルードすることができるようになっています。</p><p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"block block-thumb"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url &#125;&#125;"</span> <span class="attr">class</span>=<span class="string">"b-inner"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"b-thumb"</span>&gt;</span></div><div class="line">      &#123;&#123;&gt; atoms-square &#125;&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"b-text"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"b-title"</span>&gt;</span>&#123;&#123; headline.short &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; excerpt.medium &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><p><a href="/images/smashing-conference-whistler-and-atomic-design/molecule.png"><img src="/images/smashing-conference-whistler-and-atomic-design/molecule.png" alt="molecule"></a></p><p>Pattern Lab はテンプレートエンジンとして Mustache を使っており、<code>{{> そのコンポーネントの名前}}</code> という記述でほかのコンポーネントをインクルードすることができます。上記のコードでは、原子のコンポーネントである <code>atoms-square</code> をインクルードしています。原子から分子というように小さいコンポーネントを使って大きいコンポーネントを作っていくことが簡単にできます。</p><h3>Organisms - 有機体</h3><p>有機体は原子や分子を組み合わせて、さらに複雑なコンポーネントを構成します。このレベルでは、インターフェースのパーツとして人が意味のある名前を付けるコンポーネントとなります。例えば、ヘッダーやフッター、記事一覧などのパーツが有機体に含まれます。</p><p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"header cf"</span> <span class="attr">role</span>=<span class="string">"banner"</span>&gt;</span></div><div class="line">  &#123;&#123;&gt; atoms-logo &#125;&#125;</div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#search-form"</span> <span class="attr">class</span>=<span class="string">"nav-toggle nav-toggle-search icon-search"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"is-vishidden"</span>&gt;</span>Search<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#nav"</span> <span class="attr">class</span>=<span class="string">"nav-toggle nav-toggle-menu icon-menu"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"is-vishidden"</span>&gt;</span>Menu<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  &#123;&#123;&gt; molecules-primary-nav &#125;&#125;</div><div class="line">  &#123;&#123;&gt; molecules-search &#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></div></pre></td></tr></table></figure></p><p><a href="/images/smashing-conference-whistler-and-atomic-design/header.png"><img src="/images/smashing-conference-whistler-and-atomic-design/header.png" alt="header"></a></p><h3>Templates - テンプレート</h3><p>テンプレートはその名前の通りで、具体的なコンテンツを持っていないページのテンプレートです。ヘッダーや記事一覧などの有機体、ページネーションなどの分子をレイアウトして構成します。</p><p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page"</span> <span class="attr">id</span>=<span class="string">"page"</span>&gt;</span></div><div class="line">  &#123;&#123;&gt; organisms-header &#125;&#125;</div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">role</span>=<span class="string">"main"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"section-title"</span>&gt;</span>Our Outdoor Blog<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"l-two-col"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"l-main"</span>&gt;</span></div><div class="line">        &#123;&#123;&gt; organisms-latest-posts &#125;&#125;</div><div class="line">        &#123;&#123;&gt; molecules-pagination &#125;&#125;</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!--end l-main--&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"l-sidebar"</span>&gt;</span></div><div class="line">        &#123;&#123;&gt; organisms-recent-tweets &#125;&#125;</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!--end l-sidebar--&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!--end two-col--&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!--End role=main--&gt;</span></div><div class="line">  &#123;&#123;&gt; organisms-footer &#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><h3>Pages - ページ</h3><p>最後がページです。テンプレートに画像やテキストなどの具体的なコンテンツが流し込まれて完成します。</p><p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&#123;&gt; templates-homepage &#125;&#125;</div></pre></td></tr></table></figure></p><p>Pattern Lab では、コンテンツは JSON によってテンプレートに適用され、ページとなります。ここではここまで作ってきたコンポーネント現実のコンテンツに耐え得るかを確認します。サンプルテキストやアテの画像ではないコンテンツを流し込んだときにレイアウトが崩れることなく、コンポーネントとして成り立つことができているかをテストするカテゴリーでもあります。</p><h3>デザインシステムの運用におけるパターンライブラリの重要性</h3><p>私も過去のプロジェクトで、デザインシステムらしきものを自分で考えて、そのシステムに従ってコンポーネントを管理していました。いわゆるオレオレデザインシステムです。そのデザインシステムで作ったコンポーネントの粒度が適切だったかどうかはさておき、ディベロッパー間で共通言語として使うところまでは上手くいったように思いましたが、コンポーネントを組み合わせて新しいコンポーネントを作成していくため、粒度の小さいコンポーネントに修正が入ったときの影響範囲が分かりづらくメンテナンス性にずっと課題を感じていました。</p><p>コンポーネントベースのデザインシステムを運用で実践していくにあたっては、コードのメンテナンス性を保つために最低限下記の機能を持ったパターンライブラリが必要だと思います。</p><ul><li>粒度の小さいコンポーネントをインクルードしてより大きなコンポーネントを構成する機能</li><li>インクルードされる側の粒度が小さいコンポーネントがどこで使用されているかを把握できる機能</li></ul><p>「粒度の小さいコンポーネントをインクルードしてより大きなコンポーネントを構成する機能」に関しては、細かいコンポーネントたちを１ソースにまとめるために必要です。やはりコンポーネントに修正を入れるときは１ヶ所だけ修正すれば良い状態が理想です。</p><p>「インクルードされる側の粒度が小さいコンポーネントがどこで使用されているかを把握できる機能」に関しては、コンポーネントを削除する時に便利です。長く開発・運用を続けていると、定期的にコードの大掃除する必要に迫られると思いますが、そのコンポーネントを削除してもほかのコンポーネントに影響が出ないか確認できれば不必要なコンポーネントの掃除が容易になります。</p><p>Atomic Design 実践用のサポートツールである Pattern Lab は、「粒度の小さいコンポーネントをインクルードしてより大きなコンポーネントを構成する機能」を <strong>Mastache</strong> を採用することにより実現し、「インクルードされる側の粒度が小さいコンポーネントがどこで使用されているかを把握できる機能」を <strong>Lineage</strong> という機能で実現しています。</p><p>コンポーネントベースでのデザインを実践するときは、どうしてもそのデザインシステムに合ったコンポーネント管理機能を持つツールが必要になります。デザイナー・ディベロッパーは自分のプロジェクトに合ったデザインシステムを採用する必要がありますが、そのデザインシステムをサポートするツールがあるとは限りません。むしろ、ないケースの方が多いでしょう。Atomic Design の場合は、そのデザインシステムに特化した Pattern Lab というツールがすでに用意されていることが、これを採用する強い理由になるように思います。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;こちらは &lt;a href=&quot;http://qiita.com/advent-calendar/2014/frontrend&quot; title=&quot;Frontrend Advent Calendar 2014&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Fron
      
    
    </summary>
    
      <category term="Design" scheme="https://ygoto3.com/categories/Design/"/>
    
    
      <category term="Atomic Design" scheme="https://ygoto3.com/tags/Atomic-Design/"/>
    
  </entry>
  
  <entry>
    <title>AngularJS の Controller / Service / Directive / Filter 役割のポイント</title>
    <link href="https://ygoto3.com/posts/roles-of-angularjs-controller-service-directive-filter/"/>
    <id>https://ygoto3.com/posts/roles-of-angularjs-controller-service-directive-filter/</id>
    <published>2014-08-29T13:24:13.000Z</published>
    <updated>2019-02-13T03:11:50.332Z</updated>
    
    <content type="html"><![CDATA[<p>会社内で AngularJS の Working Group を作り活動している中で、よく上がる質問の１つが AngularJS における Controller / Service / Directive / Filter に書く処理をどう分けたらいいのか、でした。</p><p>本記事では、Controller / Service / Directive / Filter の役割のポイントを整理したいと思います。</p><h3>基本ポイント</h3><p>他の MVC デザインパターンと同様、ビジネスロジックとプレゼンテーションロジックを分離することが基本です。</p><p>ビジネスロジックを Service が担当し、Controller でそれを紐付けてテンプレートに共有します。プレゼンテーションロジックは Directive と Filter が担当し、DOM 操作処理やデータ整形処理をテンプレートに共有します。</p><h4>Controller</h4><p>Controller ではビューで表示するデータとユーザーアクションに対するメソッドを定義します。</p><p>AngularJS では <code>$scope</code> オブジェクトを介してデータやメソッドをテンプレートで共有することができます。Controller には、ビジネスロジックを <code>$scope</code> オブジェクトに書き込んでいき、テンプレートでは <code>$scope</code> オブジェクトで共有されたデータとメソッドを参照します。</p><p>共有される <code>$scope</code> オブジェクトがカオスな状態になるのを避けるために、Controller では <code>$scope</code> オブジェクトを書き込み専用として、テンプレートでは読み取り専用として扱うと良いです。</p><p>また、直接 DOM を参照することなどは行わなないようにします。DOM 操作処理が Controller に入ってしまうと、デザイン変更などでテンプレートの HTML に変更を行わなければいけない場合に、Controller も書き変える必要が出てくる可能性があります。</p><p>そのため、DOM 操作処理は Controller 内では極力行わなず、Directive にその役目を渡しましょう。</p><p>ビジネスロジックとプレゼンテーションロジックを Service、Directive、Filter に分離して Controller を簡潔に保つことができると理想的です。</p><h4>Service</h4><p>ビジネスロジック担当です。ビューに依存しない処理を記述します。</p><p>また、各 Service はシングルトンとして存在するため、異なる Controller や Directive 間で共有するモデルとして使用できます。</p><h4>Directive</h4><p>HTML を拡張する機能です。前述の DOM 操作が必要になる場合を含み、プレゼンテーションロジックを記述します。</p><p>自身で Controller を持ち、単一で完結するコンポーネントを作ることもできますし、属する scope で公開されているデータと振舞いをテンプレートに紐付ける役割を担います。</p><h4>Filter</h4><p>データを整形する処理を記述します。</p><p>Directive と同様にプレゼンテーションロジックを記述しますが、Directive と違い、直接 Scope にアクセスすることはできません。モデルを変更することなく表示フォーマットのみを変更します。</p><h3>サンプル</h3><p>ここでは、フォームから ユーザーデータを追加する処理を例に説明します。</p><p>この例では、<code>FormCtrl</code> という Controller、<code>noHyphen</code> という Directive、<code>User</code> という Service を組み合わせて実装しています。</p><p>まずモジュールを宣言します。</p><p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> app = angular.module(<span class="string">'app'</span>, []);</div></pre></td></tr></table></figure></p><h4>テンプレート</h4><p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"registrationForm"</span> <span class="attr">ng-controller</span>=<span class="string">"FormCtrl"</span> <span class="attr">novalidate</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-model</span>=<span class="string">"user.nickname"</span> <span class="attr">required</span> <span class="attr">no-hyphen</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"nickname"</span> <span class="attr">ng-click</span>=<span class="string">"submit()"</span></span></div><div class="line"><span class="tag">  <span class="attr">ng-disabled</span>=<span class="string">"registrationForm.$invalid"</span>&gt;</span>送信<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure></p><p>このようなテンプレート用意した場合、各々の役割は以降のようになります。</p><h4>Controller に書く実装</h4><p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">app.controller(<span class="string">'FormCtrl'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope, $log, User</span>) </span>&#123;</div><div class="line">  $scope.submit = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    User.addUser($scope.user)</div><div class="line">    .then(</div><div class="line">      <span class="function"><span class="keyword">function</span> (<span class="params">resource</span>) </span>&#123;</div><div class="line">        $log.log(resource);</div><div class="line">      &#125;,</div><div class="line">      <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">        $log.warn(err);</div><div class="line">      &#125;</div><div class="line">    );</div><div class="line">  &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>ここでのポイントは <code>$scope</code> オブジェクトの設定だけを記述している点です。DOM にイベントハンドラを紐付ける <code>$('button').on('click', function () { ... })</code> などの処理はビルトインの Directive である <code>ngClick</code> に任せてあります。</p><p>また、バリデーション機能は、特定の DOM の値を取得する必要があるため、Controller 内には記述しません。後述する <code>noHyphen</code> という Directive を実装して機能を実現します。</p><p>このフォームは送信ボタンを押された時に Ajax 処理も実行しますが、その処理も後述する <code>User</code> という Service に実装を切り分けています。</p><h4>Directive に書く実装</h4><p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">app.directive(<span class="string">'noHyphen'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="built_in">require</span>: <span class="string">'ngModel'</span>,</div><div class="line">    link: <span class="function"><span class="keyword">function</span> (<span class="params">iScope, iElem, iAttr, ngModelCtrl</span>) </span>&#123;</div><div class="line">      ngModelCtrl.$parsers.push(<span class="function"><span class="keyword">function</span> (<span class="params">viewVal</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> _isValid = <span class="literal">true</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (~viewVal.indexOf(<span class="string">'-'</span>)) &#123;</div><div class="line">          _isValid = <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        ngModelCtrl.$setValidity(<span class="string">'noHyphen'</span>, _isValid)</div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>ここでのポイントは、<code>ngModel</code> を介して DOM 操作をしている点です。Controller で必要だった DOM にイベントハンドラを紐付ける処理は Directive に記述します。</p><p>処理した結果を <code>ngModel</code> ディレクティブを介して <code>FormCtrl</code> の <code>$scope</code> に渡しています。</p><h4>Service に書く実装</h4><p>今回は、<code>factory</code> メソッドを使用します。</p><p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">app.factory(<span class="string">'User'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$http</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> _onSuccess = <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> res.data;</div><div class="line">      &#125;,</div><div class="line">      _onError = <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> $q.reject(<span class="string">'an error occured.'</span>);</div><div class="line">      &#125;,</div><div class="line">      _addUser = <span class="function"><span class="keyword">function</span> (<span class="params">user</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> request = $http(&#123;</div><div class="line">          method: <span class="string">'post'</span>,</div><div class="line">          url: <span class="string">'/api/something'</span>,</div><div class="line">          params: &#123;</div><div class="line">            action: <span class="string">'add'</span></div><div class="line">          &#125;,</div><div class="line">          data: &#123;</div><div class="line">            nickname: user.nickname</div><div class="line">          &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">return</span> request.then(_onSuccess, _onError);</div><div class="line">      &#125;;</div><div class="line"></div><div class="line">   <span class="keyword">return</span> &#123;</div><div class="line">     addUser: _addUser</div><div class="line">   &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>ここでのポイントは、ビューに依存しない処理のみを記述している点です。</p><p>ここでは、新規ユーザーデータの送信に使われる Ajax 処理を実装しているので、<code>FormCtrl</code> はこの <code>User</code> Service をインジェクトすることで自身の <code>$scope</code> オブジェクトに持っているデータを送信することができます。</p><p>特有の概念が多いため AngularJS での役割の分担は分かりづらいですが、自分は上記のように処理を分けるようにしています。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;会社内で AngularJS の Working Group を作り活動している中で、よく上がる質問の１つが AngularJS における Controller / Service / Directive / Filter に書く処理をどう分けたらいいのか、でした。&lt;/p&gt;
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://ygoto3.com/categories/JavaScript/"/>
    
    
      <category term="AngularJS" scheme="https://ygoto3.com/tags/AngularJS/"/>
    
  </entry>
  
  <entry>
    <title>2012 jQuery→Early 2013 Backbone→Late 2013 AngularJSな自分がハマった10のこと</title>
    <link href="https://ygoto3.com/posts/2012-jquery-early-2013-backbone-late-2013-angularjs/"/>
    <id>https://ygoto3.com/posts/2012-jquery-early-2013-backbone-late-2013-angularjs/</id>
    <published>2013-12-22T23:55:46.000Z</published>
    <updated>2019-02-13T03:11:50.328Z</updated>
    
    <content type="html"><![CDATA[<p>こちらは<a href="http://www.adventar.org/calendars/62" title="Frontrend Advent Calendar 2013" target="_blank" rel="external">Frontrend Advent Calendar 2013</a> 22日目の記事です。</p><p>本記事は、2012年までjQueryだけで開発していたフロントエンドエンジニアの自分が、<a href="http://frontrend.github.io/" title="Frontrend" target="_blank" rel="external">Frontrend</a>な方々に影響を受けたのをきっかけに、とあるコミュニティ系WebサービスでAngularJSを導入するまでの過程で影響された記事やイベントや人を時系列で紹介すると共に導入後AngularJSの開発でハマった10のことを紹介します。</p><h3>2012.07：Anatomy of Backbone.jsで学ぶ</h3><p><a href="http://angularjs.org/" title="AngularJS" target="_blank" rel="external">AngularJS</a>と言えば、MVC的なアーキテクチャをJavaScript開発に取り入れるためのフレームワークで現在は業務でも使用させていただいています。</p><p>しかし、振り返ってみると、2012年はMVなんちゃらなフレームワーク等には、全く無縁の生活を送っていました。</p><p>そんな2012年の7月頃に、Frontrendの<a href="https://twitter.com/cssradar" title="Yuya Saito" target="_blank" rel="external">Yuya Saito</a>さんに<a href="https://www.codeschool.com/" title="Code School" target="_blank" rel="external">Code School</a>の<a href="https://www.codeschool.com/courses/anatomy-of-backbonejs" title="Anatomy of Backbone.js" target="_blank" rel="external">Anatomy of Backbone.js</a>を紹介していただいて、<a href="http://backbonejs.org/" title="Backbone.js" target="_blank" rel="external">Backbone</a>をはじめとするJS開発におけるMVC的な発想を知ります。</p><p>ご存知の方も多いと思いますが、<a href="https://www.codeschool.com/" title="Code School" target="_blank" rel="external">Code School</a>はステップごとに用意されている講義形式の動画で学び、そのまま出題される課題をブラウザ上のエディタでコードを書いて解答して、実践的にプログラミングを学ぶことができるサービスです。</p><p><a href="https://www.codeschool.com/courses/anatomy-of-backbonejs" title="Anatomy of Backbone.js" target="_blank" rel="external">Anatomy of Backbone.js</a>を受講した印象としては、とても初心者が学習しやすいチュートリアルです。JSライブラリと言えば<a href="http://jquery.com/" title="jQuery" target="_blank" rel="external">jQuery</a>しか使ったことがなかった自分はここでBackboneの基本の基本を学べたと思います。</p><h3>2013.02：Frontrend Vol.4でBackbone導入決意</h3><p>基本のチュートリアルをこなしたとは言え、実際のプロジェクト(リリース済)で使うことに敷居の高さとリスクを感じ、なかなか導入することもできないまま2013年になってしまいました。</p><p>しかし、2月9日に開催された<a href="http://frontrend.github.io/events/04/r" title="Frontrend Vol.4" target="_blank" rel="external">Frontrend Vol.4</a>での<a href="http://aho.mu/" title="ahomu" target="_blank" rel="external">ahomu</a>さんセッション「<a href="http://vimeo.com/album/2260782/video/59558632" title="jQuery to Backbone – アーキテクチャを意識したJavaScript入門" target="_blank" rel="external">jQuery to Backbone – アーキテクチャを意識したJavaScript入門</a>」で、まさに「自分みたいにjQueryくらいしかライブラリ触ったことない人でもBackboneとか使えるかもー」と思い始めます。セッションの内容を参考にさっそく自分がフロントエンドを担当しているWebサービスでBackboneの導入を始めました。</p><p>このセッションは、当時のJS開発におけるjQueryが解決しない問題とBackboneを導入することで得られるメリットが分かりやすく説明されている上に、jQueryベースで記述されたコードをBackboneの構造に徐々に移していく具体的なコーディング手順まで紹介されています。自分はまさにその手順に従って、プロジェクトにBackboneを導入できたように思います。</p><h3>2013.09：Backbone Is Not EnoughでEmberJSとAngularJSが気になる</h3><p>Backboneを使い始めて半年くらい経ち、自分が担当しているサービスでは巡るめくアップデートとプロモーション施策の実装をしていかなければいけませんでした。そしてフロントエンドエンジニアが自分だけ、という状況だったこともあり「何か劇的に開発を高速化できる方法はないかな」と日々模索していました。</p><p>そして、<a href="http://www.shinetech.com/" title="Shine Technologies" target="_blank" rel="external">Shine Technologies</a>のブログ記事「<a href="http://blog.shinetech.com/2013/09/06/backbone-is-not-enough/" title="Backbone Is Not Enough" target="_blank" rel="external">Backbone Is Not Enough</a>」を読み、AngularJSに興味を持ち始めます。</p><p>記事では、Backboneでの大規模なSPA開発において、ネストされるViewをうまく構成する難しさ、Viewをテストする難しさ、メモリ管理の難しさ、容易に遅くなってしまうレンダリングへの対策やデータバインディングの重要さなどに関して<a href="http://emberjs.com/" title="EmberJS" target="_blank" rel="external">EmberJS</a>やAngularJSと比較して書かれていますが、中でも「Backboneと比較したEmberJSとAngularJSのコード記述量がかなり少ない」という1点に惹かれて、EmberJSとAngularJSが気になり始めます。</p><h3>2013.10：A comparison of the two-way binding in AngularJS, EmberJS and KnockoutJSでAngularJSが一番良いような気がしてくる</h3><p>EmberJSとAngularJSが気になり始めましたが、これらのフレームワークはそれぞれ何が違うのかは正直よく分からないでいました。Backbone単体では自分でこつこつ設定するデータバインディングを簡単に設定できる点に関しては、EmberJSもAngularJSも同じです。</p><p>その疑問に関しては、2013年10月に公開された<a href="http://2013.jsconf.eu/" title="JSConf EU 2013" target="_blank" rel="external">JSConf EU 2013</a>（9月開催）のMarius Gundersen氏セッションの動画「<a href="http://www.youtube.com/watch?v=mVjpwia1YN4" title="A comparison of the two-way binding in AngularJS, EmberJS and KnockoutJS" target="_blank" rel="external">A comparison of the two-way binding in AngularJS, EmberJS and KnockoutJS</a>」で解決されます。</p><p>このセッションでは、AngularJS、EmberJS、<a href="http://knockoutjs.com/" title="KnockoutJS" target="_blank" rel="external">KnockoutJS</a>の双方向データバインディングにおける挙動の違いが分かりやすくまとめられています。</p><p>このセッションにおいてAngularJSは、Dirty Checkingという仕組みと非同期でデータをバインドをしているため、</p><ul><li>リストの単純なレンダリングに関しては速い</li><li>Modelが複雑で巨大になってくるとレンダリングが遅い</li><li>コンピューティング処理が挟まれるプロパティに関しては重くなる</li></ul><p>などの特徴が説明されています。</p><p>担当サービスにおいて、Modelはそこまで複雑かつ巨大にならないと思った点と単純なレンダリングの速さが気に入り、AngularJSの導入を決めました。</p><h3>2013.10：A Better Way to Learn AngularJSで学ぶ</h3><p>導入を決めたら、次はAngularJSについて学習しなければいけません。</p><p>「<a href="https://www.codeschool.com/courses/anatomy-of-backbonejs" title="Anatomy of Backbone.js" target="_blank" rel="external">Anatomy of Backbone.js</a>」のような効率が良い（そしてできれば無料の）ラーニングリソースを探していたら（残念ながら、<a href="https://www.codeschool.com/" title="Code School" target="_blank" rel="external">Code School</a>にAngularJSのコースはありませんでした。）、「<a href="http://www.thinkster.io/pick/GtaQ0oMGIl/" title="A Better Way to Learn AngularJS" target="_blank" rel="external">A Better Way to Learn AngularJS</a>」というラーニングリソースを見つけました。</p><p><a href="https://www.codeschool.com/" title="Code School" target="_blank" rel="external">Code School</a>のようにコーディングで課題を問いていくリッチな機能は無いですが、初心者にも分かりやすく説明されたAngularJSのチュートリアルを動画で見ることができます。無料で学べるのですが、これを一通りこなすだけでAngularJSの基本的な使い方に関しては網羅できるように思います。</p><h3>2013.10：AngularJSで開発を始めていろいろとハマる</h3><p>もちろん基本的な使い方しか学んでいない自分は、AngularJSでサービスの開発を始めると、いろんなところでハマりました。Backboneを利用していた時と比べ、確かにコード記述量は減りましたが、AngularJSについて調べている時間は増えました。</p><p>そんなわけで「<a href="http://blog.shinetech.com/2013/09/06/backbone-is-not-enough/" title="Backbone Is Not Enough" target="_blank" rel="external">Backbone Is Not Enough</a>」に載っていたAngularJSの<a href="http://shinetechblog.files.wordpress.com/2013/09/learning_curves.png" target="_blank" rel="external">ラーニングカーブ</a>をしみじみ実感しましたが、同時にノウハウが溜まった後は劇的に楽になるはず、という期待でいっぱいでした。</p><h4>AngularJSで開発を始めてハマった10のこと</h4><p>本記事のタイトルにある通り、ここからはAngularJSでの開発で最初の頃に自分がハマった点を回避策とともにリストしていきたいと思います。</p><h5>1. JSファイルをminifyしたら動かなくなった</h5><p>AngularJSでは、Controllerの書き方にパターンがいくつか存在しますが、そのパターンのうちminifyするとJSが正しく動作しなくなるものがあります。</p><p>AngularJSにはDI (Dependency Injection)と呼ばれる仕組みがあります。Controllerで使用するserviceを指定する際に、functionの引数に指定された変数名から自動的に必要なserviceを決定できるすごい機能を持っているために、起こってしまうのがこの問題です。</p><p>回避策は2点。</p><ul><li>引数にわたすserviceの名前を文字列で明示する</li><li>ngminを使用する</li></ul><p>1点目の回避策は、引数にわたすserviceの名前を文字列で明示することです。</p><p>minifyすると動かない書き方（functionの引数だけでserviceを指定）</p><p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">'myApp'</span>, [])</div><div class="line">  .controller(<span class="string">'MyCtrl'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope, $http</span>) </span>&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  &#125;);</div></pre></td></tr></table></figure></p><p>minifyしても動く書き方（functionの引数の前に文字列でserviceを指定）</p><p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">'myApp'</span>, [])</div><div class="line">  .controller(<span class="string">'MyCtrl'</span>, [<span class="string">'$scope'</span>, <span class="string">'$http'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope, $http</span>) </span>&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  &#125;]);</div></pre></td></tr></table></figure></p><p>2点目の回避策は、使用するpre-minifierを<a href="https://github.com/btford/ngmin" title="ngmin" target="_blank" rel="external">ngmin</a>にすることです。</p><p>こちらだと動かない方の書き方をしても、ngminが動く方の書き方に変えてminifyしてくれます。これでキーの打数は減り、楽して開発できるでしょう。</p><h5>2. RequireJSなどで遅延ロードするとAngularJSが正しく動かない</h5><p>Backboneを使っているときは、モジュールごとに処理を分けてRequireJSで遅延ロードさせたりしていましたが、AngularJSで同様のことをしようと思うとモジュールのロードが完了する前にAngularの起動が行われて、意図した挙動をしなくなることがあります。</p><p>回避策は、手動で起動することです。</p><p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>([<span class="string">'require'</span>, <span class="string">'exports'</span>, <span class="string">'app'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">require, angular</span>) </span>&#123;</div><div class="line">  <span class="comment">// 起動前のいろんな処理...</span></div><div class="line"></div><div class="line">  <span class="comment">// 手動で起動</span></div><div class="line">  angular.bootstrap(<span class="built_in">document</span>, [<span class="string">'myApp'</span>]);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><h5>3. AngularJS起動前だとng-hideなどで隠れるはずの要素が一瞬表示されてしまう</h5><p>SPAで作っている場合には問題ないかもしれませんが、そうでない場合、先述した手動での初期化などを行うとAngularJSの起動が遅くなり、ページロード時にngHideディレクティブなどを指定しているDOMが一瞬表示されてしまうことがあります。</p><p><a href="https://github.com/angular/angular.js/blob/master/css/angular.css" title="angular.css" target="_blank" rel="external">angular.css</a>を読み込んでおき、対象の要素のclass属性に<strong>ng-hide</strong>を足しておくことで回避できます。</p><p>ngHideなどの処理は、内容的には**display:none;**を適用するために、<strong>ng-hide</strong>というクラスを要素に付けているだけです。</p><p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.ng-hide</span> &#123;</div><div class="line">  <span class="attribute">display</span>: none <span class="meta">!important</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><a href="https://github.com/angular/angular.js/blob/master/css/angular.css" title="angular.css" target="_blank" rel="external">angular.css</a>を読み込まなくても、上記のようなcssが入っていれば大丈夫です。</p><h5>4. AngularJS起動前にが一瞬表示されてしまう</h5><p>上記と同様に、AngularJS起動前の評価されていないexpressionも生のテキストとしてページロード時に一瞬表示されてしまいます。</p><p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;comment&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure></p><p>このような場合は、</p><p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">ng-bind</span>=<span class="string">"comment"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure></p><p>で回避することができます。もしくは、</p><p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">ng-cloak</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure></p><p>でも可能ですが、ngCloakを使用する場合はngHide同様<a href="https://github.com/angular/angular.js/blob/master/css/angular.css" title="angular.css" target="_blank" rel="external">angular.css</a>を読み込んでおく必要があります。</p><p>この問題を回避するという用途的には、ngCloakを使う方が正しいようです。</p><h5>5. textarea要素にデフォルト値が設定できない</h5><p>textarea要素にデフォルト値を設定したいと思い、</p><p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">ng-model</span>=<span class="string">"comment"</span>&gt;</span>コメント<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div></pre></td></tr></table></figure></p><p>上のように設定してもテキストエリア内にもcomment Modelにも反映されません。</p><p>回避策は、ng-initで明示的にcomment Modelをそのデフォルト値で初期化することです。</p><p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">ng-init</span>=<span class="string">"comment = ‘コメント’"</span> <span class="attr">ng-model</span>=<span class="string">"comment"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div></pre></td></tr></table></figure></p><h5>6. 表示テキストが2重エスケープされる</h5><p>AngularJSでHTMLにバインドすると自動的にエスケープがかかってしまいます。サーバサイドでエスケープ処理を施している場合は、場合によっては2重エスケープ状態が発生してしまいます。</p><p>そんなときは、ngSanitizeをインストールして、</p><p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">'myApp'</span>, [<span class="string">'ngSanitize'</span>]);</div></pre></td></tr></table></figure></p><p>DOMには</p><p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;item.content&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure></p><p>と書く代わりに</p><p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">ng-bind-html</span>=<span class="string">"item.content"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure></p><p>のようにしてエスケープ処理をしないようにできます。</p><h5>7. Directiveの命名規則がややこしい</h5><p>ここからは、AngularJSで一番素敵な機能だと思っているDirectiveについてのネタが続きます。</p><p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">x-switch</span>&gt;</span><span class="tag">&lt;/<span class="name">x-switch</span>&gt;</span></div></pre></td></tr></table></figure></p><p>このようなElement DirectiveをJS側で定義したいとき、</p><p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">'myApp'</span>, [])</div><div class="line">  .directive(<span class="string">'xSwitch'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  &#125;);</div></pre></td></tr></table></figure></p><p>のように、ハイフンつなぎ（x-switch）→キャメルケース（xSwitch）とする必要があります。</p><h5>8. カスタムDirectiveの内側のコンテンツが消える</h5><p>当然と言えば当然なのですが、テンプレートを指定したDirective DOMの内側にあらかじめコンテンツを入れておいてもテンプレートに置き変えられてしまいます。最初はこれに気づきませんでした。</p><p>Directiveの内側に入れたコンテンツをテンプレート内の特定の場所で利用したい場合は、JS側のDirective定義でtranscludeをtrueに設定し、template側のコンテンツを利用したい要素にng-transclude属性を設定する。</p><p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">'myApp'</span>, [])</div><div class="line">  .directive(<span class="string">'someDirective'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      transclude: <span class="literal">true</span>,</div><div class="line">      template: <span class="string">'&lt;div class="well"&gt;&lt;p ng-transclude&gt;&lt;/p&gt;&lt;/div&gt;'</span>,</div><div class="line">      link: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// …</span></div><div class="line">      &#125;</div><div class="line">    &#125;;</div><div class="line">  &#125;)</div></pre></td></tr></table></figure></p><h5>9. カスタムDirectiveをたくさん作っていたらtemplate用HTMLファイルのリクエストでいっぱいになる</h5><p>カスタムDirectiveはとても便利で、HTMLを綺麗にしておけるし、処理も独立させられるのでついついたくさん作ってしまいます。そのときに使用するテンプレートHTMLを外部においてtemplateUrlで読み込ませると、そのテンプレートの数分だけリクエストが別途走ってしまいます。</p><p>回避策は、外部テンプレートHTMLをtemplateCacheを使用してJSにキャッシュしてくれる<a href="https://github.com/ericclemmons/grunt-angular-templates" title="grunt-angular-templates" target="_blank" rel="external">grunt-angular-templates</a>を使用することです。</p><p>こちらに関しては、<a href="http://www.ygoto3.com/?p=8" title="grunt-angular-templatesを使ってみた" target="_blank" rel="external">別記事</a>参照。</p><h5>10. AngularJS Batarangの存在を知るのが遅かった</h5><p>これは、ハマったことでも何でもないですが、AngularJSのデバッグをする際にDev ToolsとDOM自体にプロパティ表示用のコードを書いたりしていました。</p><p>AngularJSのデバッグ用Chrome Extensionに「<a href="https://github.com/angular/angularjs-batarang" title="Angular Batarang" target="_blank" rel="external">Angular Batarang</a>」というものがあります。これの存在をもっと早く知っていたらデバッグがもっと楽だっただろうと思います。</p><p>BackboneにもFirebug Extensionの「<a href="https://addons.mozilla.org/en-US/firefox/addon/Backbone-Eye/" title="Backbone-Eye" target="_blank" rel="external">Backbone-Eye</a>」などがありますし、やはり専用のデバッグツールがあると開発も快適です。</p><h3>2013.10：ブログを始める（余談）</h3><p>開発にハマっては調べハマっては調べしている日々の中、Frontrendの<a href="http://inkdesign.jp/" title="Hiroki Tani" target="_blank" rel="external">Hiroki Tani</a>さんに何気なく「ブログとか書いてみたらどうですか」と言われたのをきっかけに、どうせならAngularJSで調べたことでも書いてみようと思い、このブログを始めました。あまり継続して書けていないので、来年はもっと頑張ろうと思います。</p><h3>終わりに</h3><p><a href="http://www.adventar.org/calendars/62" title="Frontrend Advent Calendar 2013" target="_blank" rel="external">Frontrend Advent Calendar 2013</a>という場を借りて、とても個人的な振り返りをさせていただきました。今日この記事を書けるのも、先に書いた通り<a href="http://frontrend.github.io/" title="Frontrend" target="_blank" rel="external">Frontrend</a>の方々にいただいたきっかけが大きく影響しています。</p><p>明日は、<a href="http://blog.wnotes.net/blog/article/webrtc-beginning" title="ysugimoto" target="_blank" rel="external">ysugimoto</a> さんです。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;こちらは&lt;a href=&quot;http://www.adventar.org/calendars/62&quot; title=&quot;Frontrend Advent Calendar 2013&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Frontrend Advent
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://ygoto3.com/categories/JavaScript/"/>
    
    
      <category term="AngularJS" scheme="https://ygoto3.com/tags/AngularJS/"/>
    
  </entry>
  
  <entry>
    <title>$routeProviderがない - AngularJS 1.2.0-rc にアップデートする際の注意</title>
    <link href="https://ygoto3.com/posts/angularjs-12-has-no-routeprovider/"/>
    <id>https://ygoto3.com/posts/angularjs-12-has-no-routeprovider/</id>
    <published>2013-11-01T00:25:55.000Z</published>
    <updated>2019-02-13T03:11:50.328Z</updated>
    
    <content type="html"><![CDATA[<p>2013年11月1日現在、AngularJS最新のstable versionは「1.0.8」、「1.2.0」はRC扱いになっています。</p><p>通常はstableな「1.0.8」を使用すればいいのですが、たとえばngAnimateなどの機能は「1.2.0」から提供されているので、ngAnimateを使いたくてアップデートすることもあるかと思います。</p><h3>1.2.0ではngRouteモジュールが本体から分離されている</h3><p>SPAで開発する場合など$routeProviderサービスを使用してルーティング処理を行っていると思いますが、1.0.8では本体に組み込まれている$routeProviderが<strong>1.2.0ではngRouteモジュールのサービスとして分離されています</strong>。</p><p>なので、$routeProviderを使用しているアプリで「1.2.0-rc」にアップデートした場合、下記のようなエラーがコンソールに表示されます。</p><p><code>Uncaught Error: [$injector:modulerr] Failed to instantiate module angularApp due to: Error: [$injector:unpr] Unknown provider: $routeProvider</code></p><h3>修正</h3><p>対応方法は簡単で、ngRouteモジュールを提供する<strong>angular-route.js</strong>を別途インストールします。例えばBowerで</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ bower install angular-route --save</div></pre></td></tr></table></figure></p><p>でインストールした後、HTMLファイルでangular-routeを読み込み、</p><p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bower_components/angular-route/angular-route.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p><p>依存するモジュールとして<strong>ngRoute</strong>を追加します。</p><p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">'myApp'</span>, [<span class="string">'ngRoute'</span>])</div><div class="line">.config([<span class="string">'$routeProvider'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$routeProvider</span>) </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;]);</div></pre></td></tr></table></figure></p><p>これでエラーは消えて正常な動作に戻るはずです。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2013年11月1日現在、AngularJS最新のstable versionは「1.0.8」、「1.2.0」はRC扱いになっています。&lt;/p&gt;
&lt;p&gt;通常はstableな「1.0.8」を使用すればいいのですが、たとえばngAnimateなどの機能は「1.2.0」から提供さ
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://ygoto3.com/categories/JavaScript/"/>
    
    
      <category term="AngularJS" scheme="https://ygoto3.com/tags/AngularJS/"/>
    
  </entry>
  
  <entry>
    <title>grunt-angular-templatesを使ってみた</title>
    <link href="https://ygoto3.com/posts/try-grunt-angular-templates/"/>
    <id>https://ygoto3.com/posts/try-grunt-angular-templates/</id>
    <published>2013-10-31T21:42:13.000Z</published>
    <updated>2019-02-13T03:11:50.332Z</updated>
    
    <content type="html"><![CDATA[<h3>AngularJSのElement Directiveを使っていて</h3><p>AngularJSのElement Directiveは便利でHTMLも綺麗になるので好きなんですが、テンプレートをDirectiveの中に書くのだけ好きになれません。</p><p>JavaScriptファイル内に文字列として書くためエディタのカラーリングも効かず、書くにくいのが嫌でした。</p><p>もちろんtemplateの代わりにtemplateUrlで外部HTMLを使うこともできますが、別途AJAXしてしまうので無駄にファイルのリクエスト数が増えてしまうのも好ましくありません。</p><p><strong>よく使うテンプレートたちは外部HTMLで書いておいて、リクエスト数は抑えたい。</strong></p><p>それの1つの解決方法として、今回は<strong>grunt-angular-templates</strong>を使いました。</p><h3>grunt-angular-templatesとは</h3><p><a href="https://github.com/ericclemmons/grunt-angular-templates" target="_blank" rel="external">grunt-angular-templates</a>は、Eric Clemmons氏のGruntプラグインで、指定したHTMLファイル郡をミニファイ・結合して1つのJavaScriptファイルとして出力してくれます。</p><p>そのJavaScriptファイルには、指定したHTMLファイルを$templateCache.putするように記述してあるので、後はそのURLをtemplateUrlで指定すると別途AJAXすることなくキャッシュしたデータを使用してくれます。</p><h3>インストール</h3><p>インストールはnpm。</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install grunt-angular-templates --save-dev</div></pre></td></tr></table></figure></p><p>そしてGruntfile.jsでロードを有効化。</p><p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grunt.loadTasks(<span class="string">'grunt-angular-templates'</span>);</div></pre></td></tr></table></figure></p><h3>設定</h3><p>まずは一番シンプルな形を試します。AngularJSのテンプレートとして書いたHTMLファイル全てを$templateCacheにキャッシュさせるJavaScriptを出力させます。</p><p>Gruntfile.jsで以下の最低限のオプションだけ記述します。</p><p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ngtemplates:  &#123;</div><div class="line">  myApp: &#123; <span class="comment">// angularのモジュール名に合わせます</span></div><div class="line">    src: <span class="string">'templates/**/*.html'</span>,</div><div class="line">    dest: <span class="string">'js/templates.js'</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&quot;myApp&quot;はテンプレートを使うモジュール名に合わせます。</p><h3>実行</h3><p>実行します。</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ grunt ngtemplates</div></pre></td></tr></table></figure></p><p>もし下記のような名前のHTMLファイルを入れていれば</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">templates</div><div class="line">└── btnLike.html</div><div class="line">└── btnFollow.html</div></pre></td></tr></table></figure></p><p>js/templates.jsには以下のようなコードが出力されます。</p><p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">'myApp'</span>).run([<span class="string">'$templateCache'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$templateCache</span>) </span>&#123;</div><div class="line">  $templateCache.put(<span class="string">'templates/btnFollow.html'</span>,</div><div class="line">    <span class="string">"&lt;a href=# class=\"btn btn-large btn-follow\"&gt;Follow&lt;/a&gt;"</span> </div><div class="line">  );</div><div class="line">  $templateCache.put(<span class="string">'templates/btnLike.html'</span>,</div><div class="line">    <span class="string">"&lt;a href=# class=\"btn btn-primary\"&gt;Like&lt;/a&gt;"</span> </div><div class="line">  );</div><div class="line">&#125;]);</div></pre></td></tr></table></figure></p><p>あとはこのjs/templates.jsを</p><p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/templates.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p><p>と読み込めば、btnLike.htmlとbtnFollow.htmlの内容は読み込まれてキャッシュされるので、使うときは$routeProviderやDirectiveのtemplateUrlで</p><p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">'myApp'</span>)</div><div class="line">.directive(<span class="string">'btnLike'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      restrict: <span class="string">'E'</span>,</div><div class="line">      templateUrl: <span class="string">'templates/btnLike.html'</span></div><div class="line">    &#125;;</div><div class="line">  &#125;);</div></pre></td></tr></table></figure></p><p>という感じで使うか、またはHTMLに直接</p><p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-include</span>=<span class="string">"’templates/btnLike.html’"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><p>とngIncludeで指定して使うことができます。</p><h3>その他オプションを試してみる</h3><p>もしテンプレートが置いてあるパスと実際にアプリ内で指定するURLが違う場合は、cwdオプションを使って下記のようにカレントディレクトリを別途指定します。</p><p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Gruntfile.js</span></div><div class="line">ngtemplates:  &#123;</div><div class="line">  myApp: &#123;</div><div class="line">    cwd: <span class="string">'app'</span>, <span class="comment">// 実際にtemplatesディレクトリが入っているパス</span></div><div class="line">    src: <span class="string">'templates/**/*.html'</span>, <span class="comment">// アプリで使うURL</span></div><div class="line">    dest: <span class="string">'app/js/templates.js'</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>また、テンプレート用JSに変換する際に<strong>htmlmin</strong>を利用することができるので、</p><p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Gruntfile.js</span></div><div class="line">ngtemplates:  &#123;</div><div class="line">  myApp: &#123;</div><div class="line">    src: <span class="string">'templates/**/*.html'</span>,</div><div class="line">    dest: <span class="string">'js/templates.js'</span>、</div><div class="line">    options: &#123;</div><div class="line">      htmlmin: &#123; <span class="comment">// htmlminと同じオプションを指定できる</span></div><div class="line">        collapseBooleanAttributes:      <span class="literal">true</span>,</div><div class="line">        collapseWhitespace:             <span class="literal">true</span>,</div><div class="line">        removeAttributeQuotes:          <span class="literal">true</span>,</div><div class="line">        removeComments:                 <span class="literal">true</span>,</div><div class="line">        removeEmptyAttributes:          <span class="literal">true</span>,</div><div class="line">        removeRedundantAttributes:      <span class="literal">true</span>,</div><div class="line">        removeScriptTypeAttributes:     <span class="literal">true</span>,</div><div class="line">        removeStyleLinkTypeAttributes:  <span class="literal">true</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>オプションでhtmlminを指定して出力時のファイルサイズを最適化できました。</p><p>grunt-angular-templatesのおかげでテンプレートの外部HTML化が実現し、リクエスト数を抑えることもできました。</p><p><strong>grunt-angular-templates</strong><a href="https://github.com/ericclemmons/grunt-angular-templates" title="grunt-angular-templates" target="_blank" rel="external">https://github.com/ericclemmons/grunt-angular-templates</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3&gt;AngularJSのElement Directiveを使っていて&lt;/h3&gt;
&lt;p&gt;AngularJSのElement Directiveは便利でHTMLも綺麗になるので好きなんですが、テンプレートをDirectiveの中に書くのだけ好きになれません。&lt;/p&gt;
&lt;p&gt;Ja
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://ygoto3.com/categories/JavaScript/"/>
    
    
      <category term="AngularJS" scheme="https://ygoto3.com/tags/AngularJS/"/>
    
  </entry>
  
</feed>
